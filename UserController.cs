using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PagedList;
using PdfSharp;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Xml;
using System.Xml.Linq;
using TheArtOfDev.HtmlRenderer.PdfSharp;
using Formatting = Newtonsoft.Json.Formatting;

namespace GrowFast.Controllers
{
    public class UserController : Controller
    {
        // GET: User
        DbManager db = new DbManager();
        Activitylog activitylog = new Activitylog();
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Index()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public JsonResult PunchinButton()
        {
            string res = "";
            res = Attendancebtn.Punchinbutton(Session["userid"] + "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "", Session["emprid"] + "");

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SelfAttendance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                try
                {
                    ViewBag.shifttime = DateTime.ParseExact(Session["shiftstarttime"].ToString(), "HH:mm:ss", CultureInfo.InvariantCulture).ToString("hh:mm tt") + "-" + DateTime.ParseExact(Session["shiftendtime"].ToString(), "HH:mm:ss", CultureInfo.InvariantCulture).ToString("hh:mm tt");
                    string squery = "select * from tbl_attendance where Emprowid='" + Session["emprid"] + "' and Date='" + DateTime.Today.ToString("yyyy-MM-dd") + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(squery);
                    if (dt.Rows.Count > 0)
                    {
                        if (dt.Rows[0]["Punchin_time"] != null && dt.Rows[0]["Punchin_time"] + "" != "")
                        {
                            DateTime intime = DateTime.ParseExact(dt.Rows[0]["Punchin_time"].ToString(), "HH:mm:ss", CultureInfo.InvariantCulture);
                            ViewBag.intime = intime.ToString("hh:mm tt");
                        }
                        else
                        {
                            ViewBag.intime = "-- : --";
                        }
                        if (dt.Rows[0]["Punchout_time"] != null && dt.Rows[0]["Punchout_time"] + "" != "")
                        {
                            DateTime outtime = DateTime.ParseExact(dt.Rows[0]["Punchout_time"].ToString(), "HH:mm:ss", CultureInfo.InvariantCulture);
                            ViewBag.outtime = outtime.ToString("hh:mm tt");
                        }
                        else
                        {
                            ViewBag.outtime = "-- : --";
                        }
                        if (dt.Rows[0]["Working_hours"] != null && dt.Rows[0]["Working_hours"] + "" != "")
                        {
                            ViewBag.workhours = dt.Rows[0]["Working_hours"];
                        }
                        else
                        {
                            ViewBag.workhours = "-- : --";
                        }
                    }
                    else
                    {
                        ViewBag.intime = "-- : --";
                        ViewBag.outtime = "-- : --";
                        ViewBag.workhours = "-- : --";
                    }
                }
                catch (Exception ex)
                {
                    try
                    {
                        Error_15_16 error_15_16 = new Error_15_16();
                        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                        // Get the page URL, if available
                        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                        // Get the module name
                        moduleName = ex.TargetSite.Module.Name;
                        // Get the error line number, if available
                        var stackTrace = ex.StackTrace;
                        if (!string.IsNullOrEmpty(stackTrace))
                        {
                            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                            if (lineNumberIndex >= 0)
                            {
                                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                                if (newLineIndex >= 0)
                                {
                                    errorLine = lineNumber.Substring(0, newLineIndex);
                                }
                                else
                                {
                                    errorLine = lineNumber;
                                }
                            }
                        }
                        // Get the error message and name
                        if (ex.Message.ToString().Length >= 1000)
                        {
                            errorMessage = ex.Message.Substring(1, 500);
                        }
                        else
                        {
                            errorMessage = ex.Message;
                        }
                        errorName = ex.GetType().FullName;
                        // Get the error trace
                        errorTrace = ex.StackTrace;
                        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    }

                    catch
                    {

                    }
                    ViewBag.msg = "Error";
                }
                finally
                {
                    db.connectionstate();
                }
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult SelfAttendance(string gg)
        {
            string response = "";
            try
            {
                string msg = "";
                AttendanceUpload au = new AttendanceUpload();
                var location = Request.Form["location"];
                var latitude = Request.Form["latitude"];
                var longitude = Request.Form["longitude"];
                if (location != null && location != "")
                {
                    
                }
                else
                {
                    location = "Lucknow";
                }
                    //if (location != null || location != "")
                    //{
                    string respth = au.AttendanceImgUploadnoimg(location, Session["userid"].ToString(), latitude, longitude, Session["ubrname"] + "", Session["ubrcode"] + "", Session["emprid"] + "", Session["membertype"]+"");
                    if (respth != "" && respth != null)
                    {
                        response = respth;
                    }
                    else
                    {
                        response = "Some Error Occured";
                    }
                //}
                //else
                //{
                //    response = "Location is Null";
                //}

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                response = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(response);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult MarkAttendance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult MarkAttendance(string gg)
        {
            string response = "";
            try
            {
                string msg = "";
                AttendanceUpload au = new AttendanceUpload();
                var imageData = Request.Form["imageData"];
                var location = Request.Form["location"];
                var latitude = Request.Form["latitude"];
                var longitude = Request.Form["longitude"];
                // Remove the "data:image/png;base64," prefix from the image data
                imageData = imageData.Substring("data:image/png;base64,".Length);
                byte[] imageBytes = Convert.FromBase64String(imageData);
                //Bitmap bmpcImage = new Bitmap(imageData);
                string filePath = Server.MapPath("~/Content/Temp2/img1_" + DateTime.Now.ToString().Replace(" ", "").Replace(":", "").Replace("/", "") + ".jpeg");

                //bmpcImage.Save(filePath, ImageFormat.Png);
                System.IO.File.WriteAllBytes(filePath, imageBytes);
                byte[] fileBytes = System.IO.File.ReadAllBytes(filePath);
                string fileName = Path.GetFileName(filePath);

                HttpPostedFileBase sigFile = (HttpPostedFileBase)new HttppostedfilebaseCustom(imageBytes, "image/jpeg", fileName);

                if (filePath != null)
                {
                    //if (location != null && location != "")
                    //{
                        string respth = au.AttendanceImgUpload(sigFile, location, Session["userid"].ToString(), latitude, longitude, Session["ubrname"] + "", Session["ubrcode"] + "", Session["emprid"] + "", Session["membertype"]+"");
                        if (respth != "" && respth != null)
                        {
                            if (System.IO.File.Exists(filePath))
                            {
                                System.IO.File.Delete(filePath);
                            }
                            response = respth;
                        }
                        else
                        {
                            response = "Some Error Occured";
                        }
                    //}
                    //else
                    //{
                    //    response = "Location is Null";
                    //}

                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                response = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(response);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Requests()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Attendance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult GetAttendance(string date, string Shiftnm, string Empnm, string Managercode)
        {
            string res = "", tbldata = "", tbl = "";
            try
            {
                string daydatetime, datedatetime;
                string squery = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Id = tbl_attendance.Emprowid AND tbl_attendance.Date = '" + date + "' WHERE /*tbl_registration.Id='" + Session["emprid"] + "' and*/ tbl_registration.Status='Approved' and tbl_registration.BranchCode='" + Session["ubrcode"] + "'";

                if (!string.IsNullOrEmpty(Shiftnm))
                {
                    squery += " AND tbl_registration.Shiftname = '" + Shiftnm + "'";
                }
                if (!string.IsNullOrEmpty(Empnm))
                {
                    squery += " AND tbl_registration.Id = '" + Empnm + "'";
                }
                if (!string.IsNullOrEmpty(Managercode))
                {
                    squery += " AND tbl_registration.Managercode = '" + Managercode + "'";
                }
                activitylog.Activitylogins("tbl_attendance", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string punchin = dt.Rows[i]["Punchin_time"] + "";
                        string punchinstatus = dt.Rows[i]["Punchinstatus"] + "";
                        string punchout = dt.Rows[i]["Punchout_time"] + "";
                        string punchoutstatus = dt.Rows[i]["Punchoutstatus"] + "";
                        string workhs = dt.Rows[i]["Working_hours"] + "";
                        string datetime = dt.Rows[i]["Date"] + "";

                        if (punchin != null && punchin != "")
                        {

                        }
                        else
                        {
                            punchin = "--:--";
                        }
                        if (punchout != null && punchout != "")
                        {

                        }
                        else
                        {
                            punchout = "--:--";
                        }
                        if (workhs != null && workhs != "")
                        {

                        }
                        else
                        {
                            workhs = "--:--";
                        }
                        datedatetime = DateTime.Parse(date).ToString("dd");
                        daydatetime = DateTime.Parse(date).ToString("ddd");

                        if (punchinstatus != null && punchinstatus != "")
                        {
                            if (punchoutstatus != null && punchoutstatus != "")
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                }
                                else
                                {
                                    if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                    {
                                        res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1 '><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark text-dark'>" + punchin + "</h6><span  class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark text-dark ts11'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark text-dark'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark text-dark ts111'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                    }
                                    else
                                    {
                                        res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6><span  class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                    }

                                }
                            }
                            else
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6><span  class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }
                                else
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6><span  class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }


                            }
                        }
                        else
                        {
                            if (punchoutstatus != null && punchoutstatus != "")
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }
                                else
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1 text-truncate text-dark ts11'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }


                            }
                            else
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }
                                else
                                {
                                    res += "<a href=/User/AttendanceLocation?empid=" + dt.Rows[i]["Id"] + "&date=" + date + " class='ps-0 ms-0'><div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><br><label class='text-dark'> " + datedatetime + " " + daydatetime + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1 text-truncate text-dark'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1 text-truncate text-dark'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1 text-truncate text-dark'>" + workhs + "</h6></div></div></div></div></div></div></a>";
                                }


                            }

                        }

                    }
                }
                else
                {
                    //res = "no Data";
                    res += "<div class='row mb-1'><div class='col-sm-1  col-1 ms-0 ps-0'><label class='text-dark'></label><br><label class='text-dark'> " + DateTime.Parse(date).ToString("dd") + " " + DateTime.Parse(date).ToString("ddd") + "</label></div><div class='col-sm-11 col-11 m-0 p-0'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span class='text-dark'>Punch In</span><h6 class='mt-1'>--:--</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span class='text-dark'>Punch Out</span><h6 class='mt-1'>--:--</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate text-dark'>Work Hours</span><h6 class='mt-1'>--:--</h6></div></div></div></div></div></div>";

                }
                string json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetCalender(int Month, int Year, string Employeeid)
        {
            string res = "", tbldata = "", tbl = "", subquery = "", regsubquery = ""; int holidaycount;

            string holidaydate = "", weekoffdate = "", Classname = "", datee = "", leavedate = "";
            StringBuilder htmlTable = new StringBuilder();
            try
            {
                string holidayquery = "select * from tbl_Holiday where MONTH(Date)='" + Month + "' and YEAR(Date)='" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_Holiday", "", holidayquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable holidaydt = db.GetAllRecord(holidayquery);
                activitylog.Activitylogupd("Success", "");
                if (holidaydt.Rows.Count > 0)
                {
                    for (int i = 0; i < holidaydt.Rows.Count; i++)
                    {
                        holidaydate += holidaydt.Rows[i]["Date"] + ",";
                    }
                }
                else
                {
                    holidaydate = ",";
                }
                holidaydate = holidaydate.Substring(0, holidaydate.Length - 1);
                string[] holidaydateArray = holidaydate.Split(',');



                int count = 1;
                for (int j = 1; j <= DateTime.DaysInMonth(Year, Month); j++)
                {
                    count++;
                }
                int addday = count - 2;
                int span = count / 2;
                int span2 = span + 1;
                DateTime startDate = new DateTime(Year, Month, 1);
                DateTime endDate = startDate.AddDays(addday);

                string leavequery = "select * from tbl_leave where ((MONTH(From_date)='" + Month + "' and YEAR(From_date)='" + Year + "') or (MONTH(To_date)='" + Month + "' and YEAR(To_date)='" + Year + "')) and Employeeid='" + Employeeid + "' and Status='Approved'";
                activitylog.Activitylogins("tbl_leave", "", leavequery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable leavedt = db.GetAllRecord(leavequery);
                activitylog.Activitylogupd("Success", "");
                if (leavedt.Rows.Count > 0)
                {
                    for (int i = 0; i < leavedt.Rows.Count; i++)
                    {
                        if (leavedt.Rows[i]["From_date"] == leavedt.Rows[i]["To_date"])
                        {
                            leavedate += leavedt.Rows[i]["From_date"] + ",";
                        }
                        else
                        {
                            for (DateTime date1 = DateTime.Parse(leavedt.Rows[i]["From_date"] + ""); date1 <= DateTime.Parse(leavedt.Rows[i]["To_date"] + ""); date1 = date1.AddDays(1))
                            {
                                leavedate += date1 + ",";

                            }
                        }

                    }
                }
                else
                {
                    leavedate = ",";
                }
                leavedate = leavedate.Substring(0, leavedate.Length - 1);
                string[] leavedateArray = leavedate.Split(',');


                DataTable weekoffdt = db.GetAllRecord("select * from tbl_weekoff where Status='Active'");
                if (weekoffdt.Rows.Count > 0)
                {
                    for (int wo = 0; wo < weekoffdt.Rows.Count; wo++)
                    {
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (date.ToString("dddd") == weekoffdt.Rows[wo]["Weekday"] + "")
                            {
                                weekoffdate += date + ",";
                            }

                        }
                    }

                }
                else
                {
                    weekoffdate = ",";
                }
                weekoffdate = weekoffdate.Substring(0, weekoffdate.Length - 1);
                string[] weekoffdateArray = weekoffdate.Split(',');
                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    if (date != null)
                    {
                        regsubquery += "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchin_time, '') ELSE NULL END) AS PI" + date.Day + ",";

                    }

                }
                regsubquery = regsubquery.Substring(0, regsubquery.Length - 1);

                string empquery = "", desigquery = "", departquery = "", managerquery = "";

                if (Employeeid != null && Employeeid != "")
                {

                    empquery += " tbl_attendance.Emprowid='" + Employeeid + "' and";
                    empquery = empquery.Substring(0, empquery.Length - 4);
                    subquery += " Where  (" + empquery + ")";
                }
                if (subquery.EndsWith(" and"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 4);
                }
                string attquery = "SELECT tbl_registration.Name,tbl_registration.Employee_type,tbl_registration.Id,tbl_registration.Employee_id,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime," +
     regsubquery + " FROM tbl_registration LEFT JOIN tbl_attendance ON tbl_registration.Id = tbl_attendance.Emprowid AND MONTH(tbl_attendance.Date) = " + Month + " " + subquery + "  GROUP BY tbl_registration.Name,tbl_registration.Employee_type,tbl_registration.Id,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime,tbl_registration.Employee_id";
                activitylog.Activitylogins("tbl_registration,tbl_attendance", "", attquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                if (attdt.Rows.Count > 0)
                {
                    for (int i = 0; i < attdt.Rows.Count; i++)
                    {

                        int present = 0, absent = 0, leavecount = 0, latearrival = 0, earlydeparture = 0, halfday = 0, totalday = 0, weekofcount = 0;
                        int j = i + 1;


                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (date <= DateTime.Now)
                            {
                                if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                                {
                                    Classname = "circle-green";
                                    datee = date.ToString();

                                }
                                else
                                {
                                    foreach (string lid in leavedateArray)
                                    {
                                        if (date.ToString() == lid)
                                        {
                                            Classname = "circle-blue";
                                            datee = date.ToString();
                                            break;

                                        }
                                        else
                                        {
                                            foreach (string wid in weekoffdateArray)
                                            {
                                                if (date.ToString() == wid)
                                                {
                                                    Classname = "circle-grey";
                                                    datee = date.ToString();
                                                    break;

                                                }
                                                else
                                                {
                                                    foreach (string hid in holidaydateArray)
                                                    {
                                                        if (date.ToString() == hid)
                                                        {
                                                            Classname = "circle-grey";
                                                            datee = date.ToString();
                                                            break;

                                                        }
                                                        else
                                                        {
                                                            Classname = "circle-red";
                                                            datee = date.ToString();

                                                        }

                                                    }
                                                }
                                            }

                                        }

                                    }


                                }

                            }
                            else
                            {
                                Classname = "circle-no";
                                datee = date.ToString();
                            }
                            DateTime formatedate = DateTime.Parse(datee);
                            res += "{ className : '" + Classname + "', start : '" + formatedate.ToString("yyyy-MM-dd") + "' },";
                        }


                    }
                    res = res.Substring(0, res.Length - 1);
                    // Remove unnecessary spaces and enclosing braces
                    string jsonString = "[" + res.Replace("},{", "}, {") + "]";

                    // Deserialize the JSON string to a dynamic object
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    dynamic jsonObject = serializer.Deserialize(jsonString, typeof(object));
                    return Json(jsonObject, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }
                //DataTable dt = db.GetAllRecord(squery);
                string json = JsonConvert.SerializeObject(attdt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetMonthperfor(string Month, string Year, string Employeeid)
        {
            GetattendanceList getattendanceList = new GetattendanceList();
            string res = getattendanceList.attendancelist(Convert.ToInt32(Month), Convert.ToInt32(Year), Employeeid);
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AttendanceLocation(string date, string empid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.date = DateTime.Parse(date).ToString("dd");
                ViewBag.day = DateTime.Parse(date).ToString("ddd");

                string squery = "select * from tbl_attendance where Date='" + date + "' and Emprowid='" + empid + "' and BranchCode='" + Session["ubrcode"] + "'";

                activitylog.Activitylogins("tbl_attendance", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.empid = dt.Rows[0]["Employeeid"].ToString();
                    ViewBag.empname = dt.Rows[0]["Name"].ToString();
                    ViewBag.intime = dt.Rows[0]["Punchin_time"].ToString();
                    ViewBag.outtime = dt.Rows[0]["Punchout_time"].ToString();
                    ViewBag.inlocation = dt.Rows[0]["Punchin_location"].ToString();
                    ViewBag.outlocation = dt.Rows[0]["Punchout_location"].ToString();
                    ViewBag.inlattitude = dt.Rows[0]["Inlatitude"].ToString();
                    ViewBag.outlattitude = dt.Rows[0]["Outlatitude"].ToString();
                    ViewBag.inlongitude = dt.Rows[0]["Inlongitude"].ToString();
                    ViewBag.outlongitude = dt.Rows[0]["Outlongitude"].ToString();
                    ViewBag.workhours = dt.Rows[0]["Working_hours"].ToString();
                    ViewBag.Punchinimg = dt.Rows[0]["Punchinimg"].ToString();
                    ViewBag.Punchoutimg = dt.Rows[0]["Punchoutimg"].ToString();

                }
                else
                {
                    ViewBag.intime = "--:--";
                    ViewBag.outtime = "--:--";
                    ViewBag.inlocation = "";
                    ViewBag.outlocation = "";
                    ViewBag.inlattitude = "";
                    ViewBag.outlattitude = "";
                    ViewBag.inlongitude = "";
                    ViewBag.outlongitude = "";
                    ViewBag.workhours = "--:--";
                    ViewBag.Punchinimg = "";
                    ViewBag.Punchoutimg = "";
                }
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ViewLeave(string Leaveid, string Empid)
        {
            string res = ""; string query = "", upquery = "";
            try
            {
                query = "select * from tbl_leave where Leave_id='" + Leaveid + "' and Emprowid='" + Empid + "'  and Status!='Inactive'";
                activitylog.Activitylogins("tbl_leave", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.id = dt.Rows[0]["Id"] + "";
                    ViewBag.leaveid = dt.Rows[0]["Leave_id"] + "";
                    ViewBag.empid = dt.Rows[0]["Employeeid"] + "";
                    ViewBag.empname = dt.Rows[0]["Name"] + "";
                    ViewBag.empmanagerid = dt.Rows[0]["Managercode"] + "";
                    ViewBag.empmanagername = dt.Rows[0]["Managername"] + "";
                    ViewBag.depart = dt.Rows[0]["Department"] + "";
                    ViewBag.desig = dt.Rows[0]["Designation"] + "";
                    ViewBag.leavetype = dt.Rows[0]["Leave_type"] + "";
                    ViewBag.duratuon = dt.Rows[0]["Leaveduration"] + "";
                    ViewBag.fromdate = dt.Rows[0]["From_date"] + "";
                    ViewBag.todate = dt.Rows[0]["To_date"] + "";
                    ViewBag.totalday = dt.Rows[0]["Total_day"] + "";
                    ViewBag.logid = dt.Rows[0]["LogId"] + "";
                    ViewBag.logname = dt.Rows[0]["Logname"] + "";
                    ViewBag.reason = dt.Rows[0]["Reason"] + "";
                    ViewBag.status = dt.Rows[0]["Status"] + "";
                    DateTime date = DateTime.Parse(dt.Rows[0]["Date"] + "");
                    ViewBag.reqdate = date.ToString("yyyy-MM-dd");
                    ViewBag.attatchment = dt.Rows[0]["Attachment"] + "";
                    DateTime fdate = DateTime.Parse(dt.Rows[0]["From_date"] + "");
                    ViewBag.fromDate = fdate.ToString("yyyy-MM-dd");
                    DateTime tdate = DateTime.Parse(dt.Rows[0]["To_date"] + "");
                    ViewBag.toDate = tdate.ToString("yyyy-MM-dd");
                }
                else
                {
                    ViewBag.msg = "No Data Found";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult Revoke(string Id, string Employeeid, string Type, string Remerk)
        {
            string res = "";
            int getpendingleave, gettotalleave, getbalanceleave, getapproveleave, getLPWleave, totalLWPleave, totalpendingleave, totalapproveleave, totalbalanceleave, totalDays;
            string regquery, empid = "";
            string Employeename = "", Managername = "", Managercode = "", Employeecode = "";
            if (Type == "Leave")
            {

                string query = "update tbl_leave set Status='Revoked',Remark='" + Remerk + "',Approvaldate='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Emprowid='" + Employeeid + "' and Leave_id='" + Id + "' and Status='Pending'";

                string selquery = "select * from tbl_registration where Id='" + Employeeid + "'";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery); ;
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    Employeename = sdt.Rows[0]["Name"].ToString();
                    Managername = sdt.Rows[0]["Managername"].ToString();
                    Managercode = sdt.Rows[0]["Managercode"].ToString();
                    Employeecode = Employeeid;
                    empid = sdt.Rows[0]["Id"].ToString();
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    DateTime date = DateTime.Parse(sdt.Rows[0]["Dateofjoining"] + "");
                    //joiningdate = date.ToString();
                    DateTime currentDate = DateTime.Now;

                    TimeSpan duration = currentDate - date;

                    totalDays = Convert.ToInt32(duration.TotalDays);
                }
                else
                {
                    getpendingleave = 0;
                }
                totalpendingleave = getpendingleave - 1;

                regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + "  where Id='" + Employeeid + "' ";
                string descemp = "Leave has been Revoked by " + Employeename + ".";
                if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(regquery))
                {
                    Messaging.SendPushNotification("Leave Revoked Successfully", descemp, Employeeid);

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + Managercode + "','" + Managername + "','" + Employeename + " Revoked Leave','" + descemp + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification(Employeename + " Revoked Leave", descemp, Managercode);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }


                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "Your Application Has been Revoked Successfully.";
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "Your Application has not been Revoked.";
                }

            }


            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Leave()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Leave(FormCollection form, HttpPostedFileBase attatch)
        {
            try
            {
                //string slquery = "select * from tbl_leave where Emprowid='" + form["emprid"] + "' and (Status!='Approved' or Status!='Inactive' or Status!='Rejected' or Status!='Revoked' )";
                string slquery = "select * from tbl_leave where Emprowid='" + form["emprid"] + "' and Status='Pending'";
                DataTable sldt = db.GetAllRecord(slquery);
                if (sldt.Rows.Count > 0)
                {
                    ViewBag.msg = "Your Previous Leave is Already In Process.";
                }
                else
                {
                    string descemp = "", days = "";
                    int getpendingleave, getbalanceleave; string query = "";
                    string empid = "";
                    string fileName = "", attatchpth = "";
                    if (attatch != null)
                    {
                        ////string respth = lu.LeaveImgUpload(attatch);
                        //string filePath = Path.Combine(Server.MapPath("~/Content/Temp2/"), attatch.FileName);
                        //attatch.SaveAs(filePath);
                        //attatchpth = "Content/Temp2/" + attatch.FileName;
                        attatchpth = APIs.LeaveUpload(attatch);
                    }
                    else
                    {
                        ViewBag.msg = "Please select a file";
                        attatchpth = "Content/Img/defaultimg1.png";
                    }

                    if (form["dur"] == "Multiple")
                    {
                        DateTime FDT = Convert.ToDateTime(form["fromdate"]);
                        DateTime TDT = Convert.ToDateTime(form["todate"]);
                        TimeSpan difference = TDT - FDT;
                        var days2 = (difference.TotalDays) + 1;
                        days = days2.ToString();
                        query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Status,Attachment,Date,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + random(5) + "','" + form["emprid"] + "','" + form["empid"] + "','" + form["empname"] + "','" + form["dur"] + "','" + form["fromdate"] + "','" + form["todate"] + "','" + days + "','" + form["reason"] + "','Pending','" + attatchpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["leavetype"] + "','" + form["department"] + "','" + form["desig"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + form["manegername"] + "','" + form["manegerid"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','"+ form["premise"] + "','"+ Session["leaveregionid"] + "')";
                        descemp = "Leave applied from " + form["fromdate"] + " to " + form["todate"] + "";
                    }
                    else
                    {
                        days = "1";
                        query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Status,Attachment,Date,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + random(5) + "','" + form["emprid"] + "','" + form["empid"] + "','" + form["empname"] + "','" + form["dur"] + "','" + form["fromdate"] + "','" + form["fromdate"] + "','1','" + form["reason"] + "','Pending','" + attatchpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["leavetype"] + "','" + form["department"] + "','" + form["desig"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + form["manegername"] + "','" + form["manegerid"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + form["premise"] + "','" + Session["leaveregionid"] + "')";
                        descemp = "Leave applied from " + form["fromdate"] + " to " + form["fromdate"] + "";
                    }

                    JsonResult jsonResult = GetLeaveCount(form["emprid"], form["leavetype"]);
                    int[] dataArray = (int[])jsonResult.Data;

                    int remaing = dataArray[2];

                    if (form["leavetype"] == "LWP")
                    {

                    }
                    else
                    {
                        if (Convert.ToInt32(days) <= Convert.ToInt32(remaing))
                        {

                        }
                        else
                        {
                            ViewBag.msg = "You Have not enough balance of this type Leave. Please Click on  Leave History To Check Leave Balance";
                            return View();
                        }
                    }
                    string selquery = "select * from tbl_registration where Id='" + form["emprid"] + "'";
                    activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable sdt = db.GetAllRecord(selquery);
                    activitylog.Activitylogupd("Success", "");
                    if (sdt.Rows.Count > 0)
                    {
                        getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                        getbalanceleave = Convert.ToInt32(sdt.Rows[0]["Balanceleave"]);
                        empid = sdt.Rows[0]["Id"].ToString();
                    }
                    else
                    {
                        getbalanceleave = 0;
                        getpendingleave = 0;
                    }
                    int totalpendingleave = getpendingleave + 1;
                    string regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + " where Id='" + form["emprid"] + "'";
                    if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(regquery))
                    {
                        Messaging.SendPushNotification("Successfully Applied Leave", descemp, form["emprid"]);
                        string insquery = "";
                        if (form["premise"]== "Field Work")
                        {
                            insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) VALUES('god123','Admin','" + form["empname"] + " applied for leave(s)','" + descemp + ". Kindly login in App to Accept/Reject leave.','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        }
                        else
                        {
                            insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) VALUES('god123','Admin','" + form["empname"] + " applied for leave(s)','" + descemp + ". Kindly login in App to Accept/Reject leave.','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        }
                        if (db.InsertUpdateDelete(insquery))
                        {
                            //pushNotification.SendPushNotification(form["empname"] + " applied for leave(s)", descemp + " has been pending", form["manegerid"]);

                            activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            //ViewBag.AlertMessage = "Notification Send";

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            //ViewBag.AlertMessage = "Notification Sending Failed";
                        }


                        activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Saved";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Save Error";
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetEmpDetails(string Empid)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_registration where Id='" + Empid + "'";
                activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["id"] + "";
                    string empid = dt.Rows[0]["Employee_id"] + "";
                    string emptype = dt.Rows[0]["Employee_Type"] + "";
                    string empname = dt.Rows[0]["Name"] + "";
                    string empmobile = dt.Rows[0]["Mobile_no"] + "";
                    string susermail = dt.Rows[0]["Email"] + "";
                    string empdepart = dt.Rows[0]["Department_name"] + "";
                    string empdesig = dt.Rows[0]["Designation"] + "";
                    string empmanagername = dt.Rows[0]["Managername"] + "";
                    string empmanagercode = dt.Rows[0]["Managercode"] + "";
                    string pushnoti = dt.Rows[0]["Push_notification"] + "";
                    string smsnoti = dt.Rows[0]["Sms_notification"] + "";
                    string emailnoti = dt.Rows[0]["Email_notification"] + "";
                    string doj = dt.Rows[0]["Dateofjoining"] + "";

                    string personal = dt.Rows[0]["Personalleave"] + "";
                    string casual = dt.Rows[0]["Casualleave"] + "";
                    string sick = dt.Rows[0]["Sickleave"] + "";
                    string other = dt.Rows[0]["OtherLeave"] + "";
                    string Premises = dt.Rows[0]["Premises"] + "";

                    res = new string[19] { id, empid, emptype, empname, empmobile, susermail, empdepart, empdesig, empmanagername, empmanagercode, doj, pushnoti, smsnoti, emailnoti, personal, casual, sick, other,Premises };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetLeave(string Start_date, string End_date, string Department, string Empnm, string Status, string Designation, string Managercode)
        {
            string res = "", tbldata = "", tbl = "", cancelclick = "";
            try
            {
                DateTime startdate = DateTime.ParseExact(Start_date, "d/M/yyyy", null);
                string formatteStart_date = startdate.ToString("yyyy-MM-dd");
                DateTime enddate = DateTime.ParseExact(End_date, "d/M/yyyy", null);
                string formattedEnd_date = enddate.ToString("yyyy-MM-dd");

                string squery = "select * from tbl_leave where (CONVERT(DATE, Date)>='" + formatteStart_date + "' and CONVERT(DATE, Date)<='" + formattedEnd_date + "') and BranchCode='" + Session["ubrcode"] + "' and Status!='Inactive'";
                if (!string.IsNullOrEmpty(Department))
                {
                    squery += " AND Department = '" + Department + "'";
                }
                if (!string.IsNullOrEmpty(Empnm))
                {
                    squery += " AND Emprowid = '" + Empnm + "'";
                }
                if (!string.IsNullOrEmpty(Designation))
                {
                    squery += " AND Designation = '" + Designation + "'";
                }
                if (!string.IsNullOrEmpty(Status))
                {
                    squery += " AND Status = '" + Status + "'";
                }
                if (!string.IsNullOrEmpty(Managercode))
                {
                    squery += " AND Managercode = '" + Managercode + "'";
                }
                activitylog.Activitylogins("tbl_leave", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DateTime frmdate = DateTime.Parse(dt.Rows[i]["From_date"] + "");
                        DateTime currentdate = DateTime.Now.Date;
                        if (frmdate <= currentdate)
                        {
                            cancelclick = "<i class='fa fa-ellipsis-h fs-5' onclick='Getaid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i>";
                        }
                        else
                        {
                            cancelclick = "<i class='fa fa-ellipsis-h fs-5' onclick='Getcid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i>";
                        }
                        if (dt.Rows[i]["Managercode"] + "" == Session["emprid"].ToString() || dt.Rows[i]["Director"] + "" == Session["emprid"].ToString())
                        {
                            if (dt.Rows[i]["Status"] + "" == "Inactive")
                            {

                            }
                            else if (dt.Rows[i]["Status"] + "" == "Pending")
                            {
                                //res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From Date <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To Date <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'><div class='col-6'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getaid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprid"].ToString() + "\")'></i></div></div><div class='row'><div class='col-6'></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                            }
                            else if (dt.Rows[i]["Status"] + "" == "Forwarded")
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["emprid"].ToString())
                                {
                                    res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getbid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></a></div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getaid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                }

                            }
                            else if (dt.Rows[i]["Status"] + "" == "DForwarded")
                            {
                                if (dt.Rows[i]["Director"] + "" == Session["emprid"].ToString())
                                {
                                    res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getbid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></a></div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'><i class='fa fa-ellipsis-h fs-5' onclick='Getaid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                }

                            }
                            else if (dt.Rows[i]["Status"] + "" == "Approved")
                            {
                                if (dt.Rows[i]["Director"] + "" != null && dt.Rows[i]["Director"] + "" != "")
                                {
                                    if (dt.Rows[i]["Director"] + "" == Session["emprid"].ToString() || dt.Rows[i]["Managercode"] + "" == Session["emprid"].ToString())
                                    {
                                        res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'>" + cancelclick + "</div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                    }

                                    else
                                    {

                                    }
                                }
                                else
                                {
                                    if (dt.Rows[i]["Managercode"] + "" == Session["emprid"].ToString())
                                    {
                                        res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /><span class='text-info-dark'><b>Name : " + dt.Rows[i]["Name"] + "</b></span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'>" + cancelclick + " </div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                                    }
                                    else
                                    {

                                    }
                                }
                            }
                        }
                        else
                        {
                            if (dt.Rows[i]["Status"] + "" == "Inactive")
                            {

                            }
                            else if (dt.Rows[i]["Status"] + "" == "Pending")
                            {
                                res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From Date <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To Date <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'> </div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getrid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></div></div><div class='row'><div class='col-6'></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";
                            }
                            else
                            {
                                res += "<div class='col mb-2 dv'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle'><div class='card-body  m-1 p-1'><div class='row'><div class='col-8'>Leave type  <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Leave_type"] + "</span><br /></div><div class='col-4'>Request Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Date"] + "").ToString("dd/MM/yyyy") + "</span><br /></div></div><div class='row'><div class='col-8'><div class='row row-cols-2 row-cols-sm-2'><div class='col'>Total Day <br />  <span class=' text-info-emphasis'>" + dt.Rows[i]["Total_day"] + "</span></div><div class='col'></div><div class='col dotted'>From time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["From_date"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col'>To time <br />  <span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["To_date"] + "").ToString("dd/MM/yyyy") + "</span></div></div></div><div class='col-4'></div></div><div class='row'><div class='col-8'>Reason <br /> <span class=' text-info-emphasis'>" + dt.Rows[i]["Reason"] + "</span><br /></div><div class='col-4 justify-content-end d-flex'> <i class='fa fa-ellipsis-h fs-5' onclick='Getaid(\"" + dt.Rows[i]["Leave_id"].ToString() + "\",\"" + dt.Rows[i]["Emprowid"].ToString() + "\")'></i></div></div><div class='row'><div class='col-6'>Approval/Rejection Date <br /><span class=' text-info-emphasis'>" + DateTime.Parse(dt.Rows[i]["Approvaldate"] + "").ToString("dd/MM/yyyy") + "</span></div><div class='col-6 '><button disabled class='btn bbtncolor'>" + dt.Rows[i]["Status"] + "</button></div></div><div class='row'><div class='col-6'>Remark <br /><span class=' text-info-emphasis'>" + dt.Rows[i]["Remark"] + "</span></div><div class='col-6 justify-content-end d-flex'> </div></div></div></div></div>";

                            }
                        }


                    }
                }
                else
                {
                    res = "no data";
                }


                string json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            if (res == "")
            {
                res = "no data";
            }
            return Json(res, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetEmpLeaveHistory(string Empid)
        {
            string res = "";
            int ptypeleave = 0, ctypeleave = 0, stypeleave = 0, otypeleave = 0, ltypeleave = 0;
            int pcount = 0, ccount = 0, scount = 0, ocount = 0, lcount = 0;
            string query = "select * from tbl_leave where Emprowid='" + Empid + "' and Status!='Inactive'";
            DataTable dt = db.GetAllRecord(query);
            string query1 = "select * from tbl_registration where Id='" + Empid + "'";
            DataTable dt1 = db.GetAllRecord(query1);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["Status"] + "" == "Approved")
                    {
                        if (dt.Rows[i]["Leave_type"] + "" == "Personal")
                        {
                            pcount += Convert.ToInt32(dt.Rows[i]["Total_day"]);
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Casual")
                        {
                            ccount += Convert.ToInt32(dt.Rows[i]["Total_day"]);
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Sick")
                        {
                            scount += Convert.ToInt32(dt.Rows[i]["Total_day"]);
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Other")
                        {
                            ocount += Convert.ToInt32(dt.Rows[i]["Total_day"]);
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "LWP")
                        {
                            lcount += Convert.ToInt32(dt.Rows[i]["Total_day"]);
                        }
                    }
                }
            }
            if (dt1.Rows.Count > 0)
            {
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    ptypeleave = Convert.ToInt32(dt1.Rows[i]["Personalleave"] + "");
                    ctypeleave = Convert.ToInt32(dt1.Rows[i]["Casualleave"] + "");
                    stypeleave = Convert.ToInt32(dt1.Rows[i]["Sickleave"] + "");
                    otypeleave = Convert.ToInt32(dt1.Rows[i]["OtherLeave"] + "");
                    ltypeleave = 0;

                }
            }

            int pbalanceleave = ptypeleave - pcount;
            int cbalanceleave = ctypeleave - ccount;
            int sbalanceleave = stypeleave - scount;
            int obalanceleave = otypeleave - ocount;
            int lbalanceleave = ltypeleave - lcount;

            if (pbalanceleave < 0)
            {
                pbalanceleave = 0;
            }
            if (cbalanceleave < 0)
            {
                cbalanceleave = 0;
            }
            if (sbalanceleave < 0)
            {
                sbalanceleave = 0;
            }
            if (obalanceleave < 0)
            {
                obalanceleave = 0;
            }
            if (lbalanceleave < 0)
            {
                lbalanceleave = 0;
            }
            res = "<table class='table table-responsive table-bordered'><thead class='text-center theadb text-light' style='background-color: #54B4D3;'><tr><th>Leave Type</th><th>Total Leave</th><th>Approved Leave</th><th>Remaining Leave</th></tr></thead><tbody class='text-center'><tr><td>Personal Leave</td><td> " + ptypeleave + " </td><td> " + pcount + " </td><td>" + pbalanceleave + "</td></tr><tr><td>Casual Leave</td><td> " + ctypeleave + " </td><td> " + ccount + " </td><td>" + cbalanceleave + "</td></tr><tr><td>Sick Leave</td><td> " + stypeleave + " </td><td> " + scount + " </td><td>" + sbalanceleave + "</td></tr><tr><td>Other Leave</td><td> " + otypeleave + " </td><td> " + ocount + " </td><td>" + obalanceleave + "</td></tr><tr><td>LWP Leave</td><td> " + ltypeleave + " </td><td> " + lcount + " </td><td> " + lbalanceleave + " </td></tr></tbody></table>";
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllLeaveCount(string Empid)
        {
            int[] res = { };
            int ptypeleave = 0, ctypeleave = 0, stypeleave = 0, otypeleave = 0, ltypeleave = 0;
            int pcount = 0, ccount = 0, scount = 0, ocount = 0, lcount = 0;
            string query = "select * from tbl_leave where Emprowid='" + Empid + "' and Status!='Inactive'";
            DataTable dt = db.GetAllRecord(query);
            string query1 = "select * from tbl_registration where Id='" + Empid + "' ";
            DataTable dt1 = db.GetAllRecord(query1);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["Status"] + "" == "Approved")
                    {
                        if (dt.Rows[i]["Leave_type"] + "" == "Personal")
                        {
                            pcount = pcount + 1;
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Casual")
                        {
                            ccount = ccount + 1;
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Sick")
                        {
                            scount = scount + 1;
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "Other")
                        {
                            ocount = ocount + 1;
                        }
                        else if (dt.Rows[i]["Leave_type"] + "" == "LWP")
                        {
                            lcount = lcount + 1;
                        }
                    }
                }
            }
            if (dt1.Rows.Count > 0)
            {
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    ptypeleave = Convert.ToInt32(dt1.Rows[i]["Personalleave"] + "");
                    ctypeleave = Convert.ToInt32(dt1.Rows[i]["Casualleave"] + "");
                    stypeleave = Convert.ToInt32(dt1.Rows[i]["Sickleave"] + "");
                    otypeleave = Convert.ToInt32(dt1.Rows[i]["OtherLeave"] + "");
                    ltypeleave = 0;

                }
            }

            int pbalanceleave = ptypeleave - pcount;
            int cbalanceleave = ctypeleave - ccount;
            int sbalanceleave = stypeleave - scount;
            int obalanceleave = otypeleave - ocount;
            int lbalanceleave = ltypeleave - lcount;

            if (pbalanceleave < 0)
            {
                pbalanceleave = 0;
            }
            if (cbalanceleave < 0)
            {
                cbalanceleave = 0;
            }
            if (sbalanceleave < 0)
            {
                sbalanceleave = 0;
            }
            if (obalanceleave < 0)
            {
                obalanceleave = 0;
            }
            if (lbalanceleave < 0)
            {
                lbalanceleave = 0;
            }
            res = new int[5] { pbalanceleave, cbalanceleave, sbalanceleave, obalanceleave, lbalanceleave };
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetLeaveCount(string Empid, string Leavetype)
        {
            int[] res = { };
            int typeleave = 0; int count = 0;
            string query = "select * from tbl_leave where Emprowid='" + Empid + "' and Status!='Inactive'";
            DataTable dt = db.GetAllRecord(query);
            string query1 = "select * from tbl_registration where Id='" + Empid + "' ";
            DataTable dt1 = db.GetAllRecord(query1);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (Leavetype == dt.Rows[i]["Leave_type"] + "")
                    {
                        if (dt.Rows[i]["Status"] + "" == "Approved")
                        {
                            count = count + 1;
                        }
                    }
                }
            }
            if (dt1.Rows.Count > 0)
            {
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    if (Leavetype == "Personal")
                    {
                        typeleave = Convert.ToInt32(dt1.Rows[i]["Personalleave"] + "");
                    }
                    else if (Leavetype == "Casual")
                    {
                        typeleave = Convert.ToInt32(dt1.Rows[i]["Casualleave"] + "");
                    }
                    else if (Leavetype == "Sick")
                    {
                        typeleave = Convert.ToInt32(dt1.Rows[i]["Sickleave"] + "");
                    }
                    else if (Leavetype == "Other")
                    {
                        typeleave = Convert.ToInt32(dt1.Rows[i]["OtherLeave"] + "");
                    }
                    else
                    {
                        typeleave = 0;
                    }
                }
            }

            int balanceleave = typeleave - count;
            if (balanceleave < 0)
            {
                balanceleave = 0;
            }
            res = new int[3] { typeleave, count, balanceleave };
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult LeaveApproval()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult CancelLeave(string Id, string Employeeid, string Type, string Remerk)
        {
            string res = "", leavetype = "", leaveduration = "";
            int getpendingleave, gettotalleave, getbalanceleave, getapproveleave, getLPWleave, totalLWPleave, totalpendingleave, totalapproveleave, totalbalanceleave, totalDays;
            string regquery, empid = "";
            string Employeename = "", Managername = "", Managercode = "", Employeecode = "";
            if (Type == "Leave")
            {

                string selectleave = "select * from tbl_leave where Emprowid='" + Employeeid + "' and Leave_id='" + Id + "' and Status='Approved'";
                DataTable leavedt = db.GetAllRecord(selectleave);
                if (leavedt.Rows.Count > 0)
                {
                    leavetype = leavedt.Rows[0]["Leave_type"] + "";
                    leaveduration = leavedt.Rows[0]["Total_day"] + "";
                    Managername = leavedt.Rows[0]["Managername"]+"";
                    Managercode = leavedt.Rows[0]["Managercode"]+"";
                }

                string query = "update tbl_leave set Status='Cancel',Remark='" + Remerk + "',Approvaldate='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Emprowid='" + Employeeid + "' and Leave_id='" + Id + "' and Status='Approved' ";

                string selquery = "select * from tbl_registration where Id='" + Employeeid + "'";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery); ;
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    Employeename = sdt.Rows[0]["Name"].ToString();
                    
                    Employeecode = sdt.Rows[0]["Employee_id"]+"";
                    empid = sdt.Rows[0]["Id"].ToString();
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    gettotalleave = Convert.ToInt32(sdt.Rows[0]["Totalleave"]);
                    getbalanceleave = Convert.ToInt32(sdt.Rows[0]["Balanceleave"]);
                    getapproveleave = Convert.ToInt32(sdt.Rows[0]["Approveleave"]);
                    getLPWleave = Convert.ToInt32(sdt.Rows[0]["LWPleave"]);
                    DateTime date = DateTime.Parse(sdt.Rows[0]["Dateofjoining"] + "");
                    //joiningdate = date.ToString();
                    DateTime currentDate = DateTime.Now;
                    TimeSpan duration = currentDate - date;
                    totalDays = Convert.ToInt32(duration.TotalDays);
                }
                else
                {
                    getpendingleave = 0;
                    gettotalleave = 0;
                    getbalanceleave = 0;
                    getapproveleave = 0;
                    getLPWleave = 0;
                    totalDays = 0;
                }
                if (leavetype != "LWP")
                {
                    totalapproveleave = getapproveleave - Convert.ToInt32(leaveduration);
                    totalbalanceleave = getbalanceleave + Convert.ToInt32(leaveduration);


                    regquery = "update tbl_registration set Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + Employeeid + "'";
                }
                else
                {
                    totalLWPleave = getLPWleave - Convert.ToInt32(leaveduration);
                    totalapproveleave = getapproveleave - Convert.ToInt32(leaveduration);
                    regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + "  where Id='" + Employeeid + "'";
                }


                string descemp = "Leave has been Canceled by " + Managername + ".";
                if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(regquery))
                {
                    Messaging.SendPushNotification("Leave Canceled Successfully", descemp, Managercode);

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + Employeecode + "','" + Employeename + "','" + Managername + " Canceled Leave','" + descemp + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification(Managername + " Canceled Leave", descemp, Employeecode);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }


                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "The Application Has been Canceled Successfully.";
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "The Application has not been Canceled.";
                }

            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AssignLeave(int id, string Empid)
        {
            try
            {
                string url = "";
                string sid = Session["userid"] + "";
                string token = Session["gtokenid"] + "";
                if (token != null && token != "")
                {
                    url = "/Home/AppLogin?token=" + token;
                }
                else
                {
                    url = "/Home/Login";
                }
                if (sid != null && sid != "")
                {
                    string query = "select * from tbl_leave where Leave_id=" + id + " and Status!='Inactive' and Emprowid='" + Empid + "'";
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.id = dt.Rows[0]["Id"] + "";
                        ViewBag.leaveid = dt.Rows[0]["Leave_id"] + "";
                        ViewBag.emprid = dt.Rows[0]["Emprowid"] + "";
                        ViewBag.empid = dt.Rows[0]["Employeeid"] + "";
                        ViewBag.empname = dt.Rows[0]["Name"] + "";
                        ViewBag.Premise = dt.Rows[0]["Premise"] + "";
                        ViewBag.Regionid = dt.Rows[0]["Regionid"] + "";
                        ViewBag.depart = dt.Rows[0]["Department"] + "";
                        ViewBag.empmanagername = dt.Rows[0]["Managername"] + "";
                        ViewBag.empmanagerid = dt.Rows[0]["Managercode"] + "";
                        ViewBag.desig = dt.Rows[0]["Designation"] + "";
                        ViewBag.leavetype = dt.Rows[0]["Leave_type"] + "";
                        ViewBag.duratuon = dt.Rows[0]["Leaveduration"] + "";
                        ViewBag.fromdate = dt.Rows[0]["From_date"] + "";
                        ViewBag.todate = dt.Rows[0]["To_date"] + "";
                        ViewBag.totalday = dt.Rows[0]["Total_day"] + "";
                        ViewBag.logid = dt.Rows[0]["LogId"] + "";
                        ViewBag.logname = dt.Rows[0]["Logname"] + "";
                        ViewBag.reason = dt.Rows[0]["Reason"] + "";
                        DateTime date = DateTime.Parse(dt.Rows[0]["Date"] + "");
                        ViewBag.reqdate = date.ToString("yyyy-MM-dd");
                        ViewBag.attatchment = dt.Rows[0]["Attachment"] + "";
                        DateTime fdate = DateTime.Parse(dt.Rows[0]["From_date"] + "");
                        ViewBag.fromDate = fdate.ToString("yyyy-MM-dd");
                        DateTime tdate = DateTime.Parse(dt.Rows[0]["To_date"] + "");
                        ViewBag.toDate = tdate.ToString("yyyy-MM-dd");
                    }
                }
                else
                {
                    Response.Redirect(url); ;
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [HttpPost]
        public ActionResult AssignLeave(FormCollection form)
        {
            try
            {
                int getpendingleave, gettotalleave, getbalanceleave, getapproveleave, getLPWleave, totalLWPleave, totalpendingleave, totalapproveleave, totalbalanceleave, totalDays, finalappproveleave;
                string regquery, empid = "", query;
                DateTime FDT = Convert.ToDateTime(form["employeefromdate"]);
                DateTime TDT = Convert.ToDateTime(form["employeetodate"]);
                TimeSpan difference = TDT - FDT;
                var days = (difference.TotalDays) + 1;

                string descemp = "Leave applied from " + FDT.ToString("yyyy-MM-dd") + " to " + TDT.ToString("yyyy-MM-dd") + " has been " + form["employeestatus"] + "";

                if (form["employeestatus"] == "DForwarded")
                {
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Remark,Date,Status,Director,Attachment,Approvaldate,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + form["leaveid"] + "','" + form["emprid"] + "','" + form["employeeid"] + "','" + form["employeename"] + "','" + form["employeedur"] + "','" + FDT.ToString("yyyy-MM-dd") + "','" + TDT.ToString("yyyy-MM-dd") + "','" + days + "','" + form["reason"] + "','" + form["Remark"] + "','" + form["reqdate"] + "','" + form["employeestatus"] + "','Admin','" + form["attatchment"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["employeeltype"] + "','" + form["employeedepartment"] + "','" + form["employeedesig"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + form["employeemanagername"] + "','" + form["employeemanagerid"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + form["premise"] + "','" + form["regionid"] + "')";
                }
                else
                {
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Remark,Date,Status,Attachment,Approvaldate,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + form["leaveid"] + "','" + form["emprid"] + "','" + form["employeeid"] + "','" + form["employeename"] + "','" + form["employeedur"] + "','" + FDT.ToString("yyyy-MM-dd") + "','" + TDT.ToString("yyyy-MM-dd") + "','" + days + "','" + form["reason"] + "','" + form["Remark"] + "','" + form["reqdate"] + "','" + form["employeestatus"] + "','" + form["attatchment"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["employeeltype"] + "','" + form["employeedepartment"] + "','" + form["employeedesig"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + form["employeemanagername"] + "','" + form["employeemanagerid"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + form["premise"] + "','" + form["regionid"] + "')";

                }


                string upquery = "update tbl_leave set Status='Inactive' where Leave_id='" + form["leaveid"] + "'";

                string selquery = "select * from tbl_registration where Id='" + form["emprid"] + "'";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery);
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    empid = sdt.Rows[0]["Id"].ToString();
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    gettotalleave = Convert.ToInt32(sdt.Rows[0]["Totalleave"]);
                    getbalanceleave = Convert.ToInt32(sdt.Rows[0]["Balanceleave"]);
                    getapproveleave = Convert.ToInt32(sdt.Rows[0]["Approveleave"]);
                    getLPWleave = Convert.ToInt32(sdt.Rows[0]["LWPleave"]);
                    DateTime date = DateTime.Parse(sdt.Rows[0]["Dateofjoining"] + "");
                    //joiningdate = date.ToString();
                    DateTime currentDate = DateTime.Now;

                    TimeSpan duration = currentDate - date;

                    totalDays = Convert.ToInt32(duration.TotalDays);
                }
                else
                {
                    getpendingleave = 0;
                    gettotalleave = 0;
                    getbalanceleave = 0;
                    getapproveleave = 0;
                    getLPWleave = 0;
                    totalDays = 0;
                }
                if (form["employeestatus"] == "Rejected")
                {
                    //totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    totalpendingleave = getpendingleave - 1;
                    //totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + "  where Id='" + form["emprid"] + "'";
                }
                if (form["employeestatus"] == "DForwarded")
                {
                    regquery = "update tbl_registration set Pendingleave=" + getpendingleave + "  where Id='" + form["emprid"] + "'";
                }
                else
                {
                    if (form["employeeltype"] + "" != "LWP")
                    {
                        //totalLWPleave = getLPWleave + Convert.ToInt32(days);
                        totalpendingleave = getpendingleave - 1;
                        totalapproveleave = getapproveleave + Convert.ToInt32(days);
                        finalappproveleave = totalapproveleave - getLPWleave;
                        totalbalanceleave = gettotalleave - finalappproveleave;
                        totalLWPleave = getLPWleave;

                        regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + ",Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + form["emprid"] + "'";
                    }
                    else
                    {
                        totalLWPleave = getLPWleave + Convert.ToInt32(days);
                        totalpendingleave = getpendingleave - 1;
                        totalapproveleave = getapproveleave + Convert.ToInt32(days);
                        regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ", Pendingleave=" + totalpendingleave + "  where Id='" + form["emprid"] + "'";
                    }
                    //if (totalDays >= 180)
                    //{
                    //    totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    totalpendingleave = getpendingleave - 1;
                    //    totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    //    if (getbalanceleave > 0)
                    //    {
                    //        if (days >= getbalanceleave)
                    //        {
                    //            totalbalanceleave = gettotalleave - totalapproveleave;
                    //            totalLWPleave = getLPWleave;
                    //        }
                    //        else
                    //        {
                    //            totalbalanceleave = gettotalleave - totalapproveleave;
                    //            if (totalbalanceleave < 0)
                    //            {
                    //                totalLWPleave = 0 - (totalbalanceleave);
                    //                totalbalanceleave = gettotalleave;
                    //            }
                    //            else if (totalbalanceleave == 0)
                    //            {
                    //                totalLWPleave = getLPWleave;
                    //                totalbalanceleave = gettotalleave - totalapproveleave;
                    //            }
                    //            else
                    //            {
                    //                totalLWPleave = getLPWleave;
                    //                totalbalanceleave = gettotalleave - totalapproveleave;
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        totalbalanceleave = getbalanceleave;
                    //        totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    }
                    //    regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + ",LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + form["employeeid"] + "'";
                    //}
                    //else
                    //{
                    //    totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    totalpendingleave = getpendingleave - 1;
                    //    totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    //    regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ", Pendingleave=" + totalpendingleave + "  where Id='" + form["employeeid"] + "'";
                    //}
                }
                if (db.InsertUpdateDelete(regquery) && db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(query))
                {
                    Messaging.SendPushNotification("Leave " + form["employeestatus"], descemp, Session["userid"] + "");

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + form["employeeid"] + "','" + form["employeename"] + "','Leave " + form["employeestatus"] + "','" + descemp + ".','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification("Leave " + form["employeestatus"] + " by Manager", descemp, form["employeeid"]);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }

                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", form["rvid"], upquery, "Success", "Update Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    Response.Write("<script>window.location.href = '/User/LeaveApproval'</script>");
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", form["rvid"], upquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult TeamAttendance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult GetTeamAttendance(string date, string Shiftnm, string Empnm, string Managercode)
        {
            string res = "", tbldata = "", tbl = "";
            try
            {
                string daydatetime, datedatetime;
                string squery = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Id = tbl_attendance.Emprowid AND tbl_attendance.Date = '" + date + "' WHERE  tbl_registration.Status='Approved' and BranchCode='" + Session["ubrcode"] + "'";

                if (!string.IsNullOrEmpty(Shiftnm))
                {
                    squery += " AND tbl_registration.Shiftname = '" + Shiftnm + "'";
                }
                if (!string.IsNullOrEmpty(Empnm))
                {
                    squery += " AND tbl_registration.Id = '" + Empnm + "'";
                }
                if (!string.IsNullOrEmpty(Managercode))
                {
                    squery += " AND tbl_registration.Managercode = '" + Managercode + "'";
                }
                activitylog.Activitylogins("tbl_attendance", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string punchin = dt.Rows[i]["Punchin_time"] + "";
                        string punchinstatus = dt.Rows[i]["Punchinstatus"] + "";
                        string punchout = dt.Rows[i]["Punchout_time"] + "";
                        string punchoutstatus = dt.Rows[i]["Punchoutstatus"] + "";
                        string workhs = dt.Rows[i]["Working_hours"] + "";
                        string datetime = dt.Rows[i]["Date"] + "";

                        if (punchin != null && punchin != "")
                        {

                        }
                        else
                        {
                            punchin = "--:--";
                        }
                        if (punchout != null && punchout != "")
                        {

                        }
                        else
                        {
                            punchout = "--:--";
                        }
                        if (workhs != null && workhs != "")
                        {

                        }
                        else
                        {
                            workhs = "--:--";
                        }
                        if (datetime != null && datetime != "")
                        {
                            datedatetime = DateTime.Parse(datetime).ToString("dd");
                            daydatetime = DateTime.Parse(datetime).ToString("ddd");
                        }
                        else
                        {
                            daydatetime = "";
                            datedatetime = "";
                        }

                        if (punchinstatus != null && punchinstatus != "")
                        {
                            if (punchoutstatus != null && punchoutstatus != "")
                            {

                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    //res += "<a href=/Employee/TeamMemberAttendance?Id=" + dt.Rows[i]["Id"] + " ></a>";
                                    res += "<div class='row mb-1 dv dv' onclick='Getbid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getaid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }
                            }
                            else
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getbid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getaid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchinstatus + "</span></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }


                            }
                        }
                        else
                        {
                            if (punchoutstatus != null && punchoutstatus != "")
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getbid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getaid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6><span class='rounded rounded-3 bg-warning ps-1 pe-1'>" + punchoutstatus + "</span></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }


                            }
                            else
                            {
                                if (dt.Rows[i]["Managercode"] + "" == Session["userid"].ToString())
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getbid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }
                                else
                                {
                                    res += "<div class='row mb-1 dv' onclick='Getaid(\"" + dt.Rows[i]["Id"] + "\")'><div class='card dashcard success border rounded-3 border-success-subtle bg-dark-subtle text-center m-0 p-0 pt-1 pb-1'><div class='card-body  m-1 p-1'><div class='row mb-1 justify-content-center'><div class='col-sm-1 col-2'><img src='https://attendance.winaxis.in/" + dt.Rows[i]["Employeeimage"] + "' onerror=\"this.src='/Content/Img/defaultprofile1.png'\" class='img img-circle img-responsive rounded-circle mb-2' style='height:50px;width:50px;'></div><div class='col-sm-11 col-10 m-0 p-0'><div class='row p-2 text-start'><h6>" + dt.Rows[i]["Name"] + "</h6></div><div class='row row-cols-3 row-cols-sm-3 m-0 p-0 justify-content-center'><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-success'></i><br /><span>Punch In</span><h6 class='mt-1'>" + punchin + "</h6></div><div class='col m-0 p-0 dotted'><i class='fa fa-clock fs-4 text-primary'></i><br /><span>Punch Out</span><h6 class='mt-1'>" + punchout + "</h6></div><div class='col'><i class='fa fa-clock fs-4 text-danger'></i><br /><span class='text-truncate'>Work Hours</span><h6 class='mt-1'>" + workhs + "</h6></div></div></div></div></div></div></div>";
                                }


                            }

                        }

                    }
                }
                else
                {
                    //res = "no Data";

                }
                string json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Getpunchincheckinimage(string Up, string Tblnm)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select * from " + Tblnm + " where Id='" + Up + "'";

                activitylog.Activitylogins(Tblnm, "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult TeamMemberAttendance(string Id)
        {
            ViewBag.id = Id;
            DataTable dt = db.GetAllRecord("Select Name from tbl_registration where Id='" + Id + "'");
            ViewBag.name = dt.Rows[0]["Name"];
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult TeamMember(string id)
        {
            string url = "";
            string lid = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (lid != null && lid != "")
            {
                ViewBag.empid = id;
                DataTable dt = db.GetAllRecord("select Name from tbl_registration where Id='" + id + "'");
                ViewBag.name = dt.Rows[0]["Name"];
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        private string random(int numlength)
        {
            var random = new Random();
            var number = string.Empty;
            var possibleChar = "1234567890";

            for (var i = 0; i < numlength; i++)
            {
                var randomIndex = random.Next(0, possibleChar.Length - 1);
                number += possibleChar[randomIndex];
            }
            return number;
        }
        private string arandom(int numlength)
        {
            var random = new Random();
            var number = string.Empty;
            var possibleChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";

            for (var i = 0; i < numlength; i++)
            {
                var randomIndex = random.Next(0, possibleChar.Length - 1);
                number += possibleChar[randomIndex];
            }
            return number;
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Advance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Advance(FormCollection form)
        {
            string reqid = random(5);
            string query = "select * from tbl_advance where Reqid='" + reqid + "'";
            DataTable dt = db.GetAllRecord(query);
            if (dt.Rows.Count > 0)
            {
                ViewBag.msg = "Request Id Already Exist";
            }
            else
            {
                string query1 = "select * from tbl_registration where Id='" + Session["emprid"] + "'";
                DataTable dt1 = db.GetAllRecord(query1);
                if (dt1.Rows.Count > 0)
                {
                    string iquery = "INSERT INTO tbl_advance(Reqid,Employeeid,Name,Department,Designation,Advanceamount,Reason,Status,application_status,Logid,Logname,Datetime,BranchName,BranchCode)VALUES('" + reqid + "','" + dt1.Rows[0]["Employee_id"] + "','" + dt1.Rows[0]["Name"] + "','" + dt1.Rows[0]["Department_name"] + "','" + dt1.Rows[0]["Designation"] + "','" + form["amount"] + "','" + form["reason"] + "','Pending','Pending','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(iquery))
                    {
                        ViewBag.msg = "Request Send";
                    }
                    else
                    {
                        ViewBag.msg = "Request Not Send";
                    }
                }

            }

            return View();
        }
        public JsonResult UploadadvanceApplication()
        {
            string res = "";
            try
            {
                if (Request.Files[0].ContentLength > 0)
                {
                    var file = Request.Files[0];
                    string filepath = APIs.LoanApplication(file);
                    
                    var requestid = Request.Form["requestid"];
                    var requeststatus = Request.Form["requeststatus"];

                    string squery = "select * from tbl_advance where Reqid='" + requestid + "' and Status='" + requeststatus + "'";
                    DataTable sdt = db.GetAllRecord(squery);
                    if (sdt.Rows.Count > 0)
                    {
                        string upquery = "update tbl_advance set Status='Inactive' where Reqid='" + requestid + "' and Status='" + requeststatus + "'";
                        string iquery = "INSERT INTO tbl_advance(Reqid,Employeeid,Name,Department,Designation,Advanceamount,Reason,Status,application_status,Approvedbyname,Approvedbyid,Remark,Logid,Logname,Datetime,Downloaddocument,Uploaddocument,BranchName,BranchCode)VALUES('" + requestid + "','" + sdt.Rows[0]["Employeeid"] + "','" + sdt.Rows[0]["Name"] + "','" + sdt.Rows[0]["Department"] + "','" + sdt.Rows[0]["Designation"] + "','" + sdt.Rows[0]["Advanceamount"] + "','" + sdt.Rows[0]["Reason"] + "','In Process','In Process','" + sdt.Rows[0]["Approvedbyname"] + "','" + sdt.Rows[0]["Approvedbyid"] + "','" + sdt.Rows[0]["Remark"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + sdt.Rows[0]["Downloaddocument"] + "','" + filepath + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(iquery))
                        {
                            res = "Application form send";
                        }
                        else
                        {
                            res = "Application form not send";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Expence()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Loan()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Loan(FormCollection form)
        {
            string reqid = random(5);
            string query = "select * from tbl_loan where Reqid='" + reqid + "'";
            DataTable dt = db.GetAllRecord(query);
            if (dt.Rows.Count > 0)
            {
                ViewBag.msg = "Request Id Already Exist";
            }
            else
            {
                string query1 = "select * from tbl_registration where Id='" + Session["emprid"] + "'";
                DataTable dt1 = db.GetAllRecord(query1);
                if (dt1.Rows.Count > 0)
                {
                    string iquery = "INSERT INTO tbl_loan(Reqid,Employeeid,Name,Department,Designation,Loanamount,Reason,Status,application_status,Logid,Logname,Datetime,BranchName,BranchCode)VALUES('" + reqid + "','" + dt1.Rows[0]["Employee_id"] + "','" + dt1.Rows[0]["Name"] + "','" + dt1.Rows[0]["Department_name"] + "','" + dt1.Rows[0]["Designation"] + "','" + form["amount"] + "','" + form["reason"] + "','Pending','Pending','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(iquery))
                    {
                        ViewBag.msg = "Request Send";
                    }
                    else
                    {
                        ViewBag.msg = "Request Not Send";
                    }
                }

            }

            return View();
        }
        public JsonResult UploadloanApplication()
        {
            string res = "";
            try
            {
                var file = Request.Files[0]; // Assuming only one file is uploaded
                if (file != null && file.ContentLength > 0)
                {
                    string filepath = APIs.LoanApplication(file);
                    // Get the requestid from the form data
                    var requestid = Request.Form["requestid"];
                    var requeststatus = Request.Form["requeststatus"];

                    string squery = "select * from tbl_loan where Reqid='" + requestid + "' and Status='" + requeststatus + "'";
                    DataTable sdt = db.GetAllRecord(squery);
                    if (sdt.Rows.Count > 0)
                    {
                        string upquery = "update tbl_loan set Status='Inactive' where Reqid='" + requestid + "' and Status='" + requeststatus + "'";
                        string iquery = "INSERT INTO tbl_loan(Reqid,Employeeid,Name,Department,Designation,Loanamount,Reason,Status,application_status,Approvedbyname,Approvedbyid,Remark,Logid,Logname,Datetime,Downloaddocument,Uploaddocument,BranchName,BranchCode)VALUES('" + requestid + "','" + sdt.Rows[0]["Employeeid"] + "','" + sdt.Rows[0]["Name"] + "','" + sdt.Rows[0]["Department"] + "','" + sdt.Rows[0]["Designation"] + "','" + sdt.Rows[0]["Loanamount"] + "','" + sdt.Rows[0]["Reason"] + "','In Process','In Process','" + sdt.Rows[0]["Approvedbyname"] + "','" + sdt.Rows[0]["Approvedbyid"] + "','" + sdt.Rows[0]["Remark"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + sdt.Rows[0]["Downloaddocument"] + "','" + filepath + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(iquery))
                        {
                            res = "Application form send";
                        }
                        else
                        {
                            res = "Application form not send";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult PaySlip()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ChangePassword()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ChangePassword(string opass, string npass, string cnpass)
        {
            try
            {
                if (npass == opass)
                {
                    ViewBag.msg = "New Password and Old Password Can not be Same.";
                }
                else if (npass != cnpass)
                {
                    ViewBag.msg = "New Password and Confirm Password Not matched.";
                }
                else
                {
                    string query = "Update tbl_login set Password='" + npass + "' where Password='" + opass + "' and Emailid='" + Session["usermail"].ToString() + "' ";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_login", db.getrowid("select Id from tbl_login where Emailid='" + Session["usermail"].ToString() + "'").ToString(), query, "Success", "Password Update", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());


                        string query1 = "Update tbl_registration set pass='" + npass + "' where Email='" + Session["usermail"].ToString() + "' ";
                        if (db.InsertUpdateDelete(query1))
                        {
                            DataTable sdt = db.GetAllRecord("select Mobile_no,Email from tbl_registration where Email='" + Session["usermail"].ToString() + "'");

                            string bodytext = "Your password has been updated By Admin. Your nepassword is " + npass + "";

                            //Messaging.SendMailEmployee("",sdt.Rows[0]["Email"]+"", "Registration Successfully", bodytext);
                            

                            activitylog.Activitylogins("tbl_registration", "", query1, "Success", "Password Update", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Password Updated";
                            return RedirectToAction("Logout", "User");
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_registration", "", query1, "Failed", "Password Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Password Update Failed";
                        }
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_login", db.getrowid("select Id from tbl_login where Emailid='" + Session["usermail"].ToString() + "'").ToString(), query, "Failed", "Password Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Password Update Failed";
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Logout()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                if (token != null && token != "")
                {
                    //activitylog.Activitylogins("", "", "", "Success", "Logout Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    db.InsertUpdateDelete("update tbl_login set Loginstatus='" + 0 + "',Logoutdatetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Userid='" + Session["userid"] + "'");
                }
                else
                {
                    //activitylog.Activitylogins("", "", "", "Success", "Logout Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                Session.Clear();
                Session.Abandon();
                Session.RemoveAll();
                Response.Redirect(url);
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult Statuschangetive(string id, string status, string tblnm)
        {
            string msg = "";
            try
            {
                string squery = "select Status from " + tblnm + " where Id='" + id + "'";
                DataTable dt = db.GetAllRecord(squery);
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["Status"] + "" == "Active")
                    {
                        string query = "Update " + tblnm + " set Status='Inactive' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Inactive";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Failed";
                        }
                    }
                    else if (dt.Rows[0]["Status"] + "" == "Inactive")
                    {
                        string query = "Update " + tblnm + " set Status='Active' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Active";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Failed";
                        }
                    }
                }



            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetAllNotification(string Type)
        {
            string res = Notifications.notification(Type, Session["userid"].ToString());

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ClearAllNotification()
        {
            string res = Notifications.clearnotification(Session["userid"].ToString());

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReadNotification(string Nid)
        {
            string res = Notifications.readnotification(Nid);

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Notification()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Notification(string empid, string title, string description)
        {
            string subquery = ""; string query = "", Employeeid = "", Employeename = "", inssubquery = "";


            if (empid != null && empid != "")
            {
                string[] empArray = empid.Split(',');
                foreach (string id in empArray)
                {
                    subquery += " Employee_id='" + id + "' or";
                }
            }
            else
            {
                subquery += " Managercode='" + Session["userid"] + "' or";
            }

            if (subquery.EndsWith(" or"))
            {
                subquery = subquery.Substring(0, subquery.Length - 3);
            }
            if (subquery != null && subquery != "")
            {
                subquery = " and (" + subquery + ")";
            }
            query = "select Employee_id,Name from tbl_registration where BranchCode='" + Session["ubrcode"] + "' " + subquery + "";

            ViewBag.msg = query;
            activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            DataTable dt = db.GetAllRecord(query);
            activitylog.Activitylogupd("Success", "");
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Employeeid += dt.Rows[i]["Employee_id"] + ",";
                    Employeename += dt.Rows[i]["Name"] + ",";
                }
                Employeeid = Employeeid.Substring(0, Employeeid.Length - 1);
                Employeename = Employeename.Substring(0, Employeename.Length - 1);
                string[] Employeearray = Employeeid.Split(',');
                string[] Employeenmarray = Employeename.Split(',');

                for (int i = 0; i < Employeearray.Length; i++)
                {
                    inssubquery += "('" + Employeearray[i] + "','" + Employeenmarray[i] + "','" + title + "','" + description + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["username"] + "','" + Session["userid"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "'),";
                }

                if (inssubquery.EndsWith(","))
                {
                    inssubquery = inssubquery.Substring(0, inssubquery.Length - 1);
                }
                string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,logname,logid,BranchName,BranchCode) values " + inssubquery + "";
                if (db.InsertUpdateDelete(insquery))
                {
                    for (int i = 0; i < Employeearray.Length; i++)
                    {
                        Messaging.SendPushNotification(title, description, Employeearray[i]);
                    }

                    activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.AlertMessage = "Notification Send";

                }
                else
                {
                    activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.AlertMessage = "Notification Sending Failed";
                }
            }
            else
            {
                ViewBag.AlertMessage = "No Employee Found";
            }
            return View();
        }


        ///  Inventry Module  Open ///
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult RowMeterial()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult RowMeterial(string hid, string row, string status, string rowid, string unittype)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_rowmeterial set RowMeterial='" + row + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName= '" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_rowmeterial", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_rowmeterial", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_rowmeterial where RowMeterial='" + row + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Row Meterial Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_rowmeterial(RowMeterial,UnitType,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + row + "','" + unittype + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            string query2 = "SELECT id FROM tbl_rowmeterial where RowMeterial='" + row + "' and UnitType='" + unittype + "' and BranchCode='" + Session["ubrcode"] + "'";
                            DataTable dt10 = db.GetAllRecord(query2);
                            string row_id = dt10.Rows[0][0].ToString();

                            string query1 = "insert into tbl_rowmeterialstock(RowMeterialId,RowMeterial,UnitType,Cr,Dr,Balance,BranchName,BranchCode) values('" + row_id + "','" + row + "','" + unittype + "','0','0','0','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_rowmeterial", db.getmaxid("tbl_rowmeterial").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Raw Material Added";
                            }
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_rowmeterial", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Raw Material Not Added";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public JsonResult UpdateRowMeterial(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_rowmeterial where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_rowmeterial", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["RowMeterial"] + "";
                    string unittype = dt.Rows[0]["UnitType"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[8] { id, name, unittype, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult RowMeterialTRStock(string Id, string Type)
        {
            string res = "";
            try
            {
                string type = "";

                if (Type == "CR")
                {
                    type = "Cr.";
                }
                else
                {
                    type = "Dr.";
                }
                string query = "select * from tbl_row_transeaction where RowMeterialId='" + Id + "' and Ttype='" + type + "' and logid='" + Session["userid"] + "'";
                activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductName()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductName(string jh)
        {
            // Access FormData values
            string msg = "";
            var restableObjectJson = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var pron = Request.Form["pron"];
            var status = Request.Form["status"];
            string resxmlString = JsontoXML(restableObjectJson);
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_product_creation set ProductName='" + pron + "',XML='" + resxmlString + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName= '" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_product_creation", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product_creation", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Updated Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_product_creation where ProductName='" + pron + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        msg = "This Product Name Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_product_creation(ProductName,XML,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + pron + "','" + resxmlString + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_product_creation", db.getmaxid("tbl_product_creation").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_product_creation", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        private string JsontoXML(string TableObject)
        {
            // Parse the JSON string into a JObject
            JObject jsonData = JObject.Parse(TableObject);
            // Create an XML document
            XDocument xmlDoc = new XDocument();
            // Create the root element
            XElement rootElement = new XElement("Data");
            // Create the tableHeadings element
            XElement headingsElement = new XElement("tableHeadings");
            foreach (string heading in jsonData["tableHeadings"])
            {
                headingsElement.Add(new XElement("heading", heading));
            }
            // Create the tableData element
            XElement dataElement = new XElement("tableData");
            foreach (JArray row in jsonData["tableData"])
            {
                XElement rowElement = new XElement("row");
                foreach (string value in row)
                {
                    rowElement.Add(new XElement("column", value));
                }
                dataElement.Add(rowElement);
            }
            // Build the XML structure
            rootElement.Add(headingsElement);
            rootElement.Add(dataElement);
            xmlDoc.Add(rootElement);
            // Convert the XML document to string
            string xmlString = xmlDoc.ToString();
            return xmlString;
        }
        public JsonResult UpdateProductName(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product_creation where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product_creation", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProductName"] + "";
                    string xml = dt.Rows[0]["XML"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[8] { id, name, xml, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateProductDetails(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Name = dt.Rows[0]["Name"] + "";
                    string Price = dt.Rows[0]["Price"] + "";
                    string Description = dt.Rows[0]["Description"] + "";
                    string Discount = dt.Rows[0]["Discount"] + "";
                    string TaxPercent = dt.Rows[0]["TaxPercent"] + "";
                    string Pimage = dt.Rows[0]["Pimage"] + "";
                    string Oimage = dt.Rows[0]["Oimage"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Baserice = dt.Rows[0]["Baserice"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string ProductSubCategory = dt.Rows[0]["ProductSubCategory"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";


                    res = new string[17] { id, Name, Price, Description, Discount, TaxPercent, Pimage, Oimage, Status, Ptype, Baserice, ProductCategory, ProductSubCategory, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetProductStock(string Productid, string branchid)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_pro_price_circlar.Id,tbl_pro_price_circlar.Brand,tbl_pro_price_circlar.Quantity,tbl_pro_price_circlar.ProductCategory,tbl_pro_price_circlar.punit,tbl_pro_price_circlar.Balance_stock,tbl_pro_price_circlar.Ptype,tbl_pro_price_circlar.Productname,tbl_productstock.BranchCode,tbl_productstock.BranchName,tbl_productstock.Yardid,tbl_productstock.Credit,tbl_productstock.Debit,tbl_productstock.Balance from tbl_pro_price_circlar Left join tbl_productstock on tbl_pro_price_circlar.Id=tbl_productstock.Productid where tbl_productstock.Yardid='" + branchid + "' and tbl_pro_price_circlar.Id='" + Productid + "'";

                string pquery = "select * from tbl_pro_price_circlar where Id='" + Productid + "'";
                DataTable pdt = db.GetAllRecord(pquery);

                activitylog.Activitylogins("tbl_pro_price_circlar", Productid, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Yardid = dt.Rows[0]["Yardid"] + "";
                    if (Yardid == branchid)
                    {

                    }
                    else
                    {
                        dt.Rows[0]["Credit"] = 0;
                        dt.Rows[0]["Debit"] = 0;
                        dt.Rows[0]["Balance"] = 0;
                    }
                    string id = dt.Rows[0]["Id"] + "";
                    string Brand = dt.Rows[0]["Brand"] + "";
                    string Quantity = dt.Rows[0]["Quantity"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string punit = dt.Rows[0]["punit"] + "";
                    string Balance_stock = dt.Rows[0]["Balance_stock"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string Balance = dt.Rows[0]["Balance"] + "";

                    res = new string[12] { id, Brand, Productname, Quantity, ProductCategory, punit, Balance_stock, Ptype, Credit, Debit, Balance, Yardid };

                }
                else if (pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Brand = pdt.Rows[0]["Brand"] + "";
                    string Quantity = pdt.Rows[0]["Quantity"] + "";
                    string ProductCategory = pdt.Rows[0]["ProductCategory"] + "";
                    string punit = pdt.Rows[0]["punit"] + "";
                    string Balance_stock = pdt.Rows[0]["Balance_stock"] + "";
                    string Ptype = pdt.Rows[0]["Ptype"] + "";
                    string Productname = pdt.Rows[0]["Productname"] + "";
                    string Credit = "0";
                    string Debit = "0";
                    string Balance = "0";
                    string Yardid = "";

                    res = new string[12] { id, Brand, Productname, Quantity, ProductCategory, punit, Balance_stock, Ptype, Credit, Debit, Balance, Yardid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetProductStock_old(string Productid, string branchid)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_pro_price_circlar.Id,tbl_pro_price_circlar.Ptype,tbl_pro_price_circlar.Productname,tbl_productstock.BranchCode,tbl_productstock.BranchName,tbl_productstock.Credit,tbl_productstock.Debit,tbl_productstock.Balance from tbl_pro_price_circlar Left join tbl_productstock on tbl_pro_price_circlar.Id=tbl_productstock.Productid where tbl_productstock.BranchCode='" + branchid + "' and tbl_pro_price_circlar.Id='" + Productid + "'";

                string pquery = "select Id,Ptype,Productname from tbl_pro_price_circlar where Id='" + Productid + "'";
                DataTable pdt = db.GetAllRecord(pquery);

                activitylog.Activitylogins("tbl_pro_price_circlar", Productid, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string BranchCode = dt.Rows[0]["BranchCode"] + "";
                    if (BranchCode == branchid)
                    {

                    }
                    else
                    {
                        dt.Rows[0]["Credit"] = 0;
                        dt.Rows[0]["Debit"] = 0;
                        dt.Rows[0]["Balance"] = 0;
                    }
                    string id = dt.Rows[0]["Id"] + "";
                    string Name = dt.Rows[0]["Productname"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string Balance = dt.Rows[0]["Balance"] + "";

                    res = new string[7] { id, Name, Ptype, Credit, Debit, Balance, BranchCode };

                }
                else if (pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Name = pdt.Rows[0]["Productname"] + "";
                    string Ptype = pdt.Rows[0]["Ptype"] + "";
                    string Credit = "0";
                    string Debit = "0";
                    string Balance = "0";
                    string BranchCode = "";

                    res = new string[7] { id, Name, Ptype, Credit, Debit, Balance, BranchCode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetProductDesrequest(string Id)
        {
            string json = "";
            try
            {
                string attquery = "SELECT * from tbl_product_distribution where Id='" + Id + "'";
                activitylog.Activitylogins("tbl_product_distribution", "", attquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                if (attdt.Rows.Count > 0)
                {
                    json = JsonConvert.SerializeObject(attdt, Formatting.None);
                }
                else
                {
                    json = "Data Not Found";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReceiveProductStock()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var productid = Request.Form["productid"];
            var productbrandname = Request.Form["productbrandname"];
            var productname = Request.Form["productname"];
            var quantity = Request.Form["quantity"];
            var unittype = Request.Form["unittype"];
            var addstock = Request.Form["addstock"];
            var remark = Request.Form["remark"];
            try
            {
                string reqquery = "select * from tbl_product_distribution where Requestid='" + requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    string reqiquery = "INSERT INTO [dbo].[tbl_product_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Received','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";

                    db.InsertUpdateDelete("update tbl_product_distribution set Status='Inactive' where Requestid='" + requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_product_distribution", db.getmaxid("tbl_product_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReturnProductStock()
        {
            string res = "";
            var productid = Request.Form["productid"];
            var productbrandname = Request.Form["productbrandname"];
            var productname = Request.Form["productname"];
            var quantity = Request.Form["quantity"];
            var unittype = Request.Form["unittype"];
            var addstock = Request.Form["addstock"];
            var remark = Request.Form["remark"];
            try
            {
                DateTime currentDate = DateTime.Now;
                // Extract the year and month from the current date
                string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                string requestid = "R" + currentYearmonth + "" + arandom(5);
                string query = "INSERT INTO [dbo].[tbl_product_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid) VALUES ('" + requestid + "','" + productid + "','" + productbrandname + "','" + productname + "','" + quantity + "','" + unittype + "','" + addstock + "','" + remark + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Return','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "')";

                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_product_distribution", db.getmaxid("tbl_product_distribution").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Sent";
                }
                else
                {
                    activitylog.Activitylogins("tbl_product_distribution", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Not Sent";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult GodownName()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult GodownName(string hid, string go, string status)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_godown set GodownName='" + go + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName= '" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_godown", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_godown", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_godown where GodownName='" + go + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Godown Name Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_godown(GodownName,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + go + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_godown", db.getmaxid("tbl_godown").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_godown", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateGodownName(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_godown where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_godown", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["GodownName"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[7] { id, name, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult RowMeterialStock()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult RowMeterialStock(string hid, string crbal, string totalbal, FormCollection form)
        {
            try
            {
                if (hid != "" && hid != null)
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where Id='" + form["hid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["unittype"] + "','" + form["cr"] + "','Cr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
                else
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where RowMeterialId='" + form["rowmeterialid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["crbal"] + "','" + form["totalbal"] + "','cr','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateRowMeterialStock(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_rowmeterialstock where Id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string rowmeterialid = dt.Rows[0]["RowMeterialId"] + "";
                    string name = dt.Rows[0]["RowMeterial"] + "";
                    string cr = dt.Rows[0]["Cr"] + "";
                    string dr = dt.Rows[0]["Dr"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string UnitType = dt.Rows[0]["UnitType"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, rowmeterialid, name, cr, dr, balance, UnitType, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateProductStock(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_productstock.Id,tbl_productstock.Productid,tbl_productstock.Productname,tbl_productstock.Credit,tbl_productstock.Debit,tbl_productstock.Balance,tbl_product.Ptype from tbl_productstock left join tbl_Product on tbl_productstock.Productid=tbl_Product.Id  where Productid='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Productid = dt.Rows[0]["Productid"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllProductStock(string Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_productstock  where id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = dt.Rows[0]["Id"] + "";
                    string Productid = dt.Rows[0]["Productid"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string BranchName = dt.Rows[0]["BranchName"] + "";
                    string BranchCode = dt.Rows[0]["BranchCode"] + "";
                    string GodownName = dt.Rows[0]["Godownname"] + "";
                    string GodownCode = dt.Rows[0]["GodownCode"] + "";
                    string Ptype = dt2.Rows[0]["Ptype"] + "";

                    res = new string[11] { id, Productid, Productname, Credit, Debit, balance, Ptype, BranchName, BranchCode, GodownName, GodownCode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductDetails()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductDetails(string hid, FormCollection form, HttpPostedFileBase productprimg, IEnumerable<HttpPostedFileBase> productothimg)
        {
            string pimgpth = "", oimgpth = "";

            try
            {
                if (hid != "" && hid != null)
                {
                    if (form["selproductnm"] != "Other")
                    {
                        form["selproductnm"] = "Self";
                    }
                    if (productprimg != null)
                    {
                        //string primage = Path.Combine(Server.MapPath("~/Content/ProductImage"), productprimg.FileName);
                        //productprimg.SaveAs(primage);
                        //pimgpth = "Content/ProductImage/" + productprimg.FileName;
                        pimgpth = APIs.ProductImage(productprimg);

                    }
                    else
                    {
                        pimgpth = form["pimage"];
                    }

                    foreach (var file in productothimg)
                    {
                        if (file != null && file.ContentLength > 0)
                        {
                            //string otimage = Path.Combine(Server.MapPath("~/Content/ProductImage"), file.FileName);
                            //file.SaveAs(otimage);
                            //oimgpth += "Content/ProductImage/" + file.FileName + ",";
                            oimgpth += APIs.ProductImage(file)+",";
                        }
                        else
                        {
                            oimgpth = form["oimage"];
                        }
                    }
                    string query = "update tbl_product set Ptype='" + form["selproductnm"] + "',Name='" + form["productnm"] + "',Description='" + form["description"] + "',Price='" + form["productprice"] + "',Baserice='" + form["baseprice"] + "',Discount='" + form["productdisc"] + "',TaxPercent='" + form["taxpercent"] + "',ProductCategory='" + form["category"] + "',ProductSubCategory='" + form["subcategory"] + "',Pimage='" + pimgpth + "',Oimage='" + oimgpth + "',Status='" + form["status"] + "',logid='" + Session["userid"] + "',logname='" + Session["username"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_product", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        string squery = "update tbl_productstock set Productname='" + form["productnm"] + "',logid='" + Session["userid"] + "',logname='" + Session["username"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Productid='" + hid + "' and BranchCode='" + Session["ubrcode"] + "'";

                        if (db.InsertUpdateDelete(squery))
                        {
                            activitylog.Activitylogins("tbl_productstock", hid, squery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Updated";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_productstock", hid, squery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Update Failed";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_product where Name='" + form["productnm"] + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Already Exist";
                    }
                    else
                    {
                        if (form["selproductnm"] != "Other")
                        {
                            form["selproductnm"] = "Self";
                        }
                        if (productprimg != null)
                        {
                            //string primage = Path.Combine(Server.MapPath("~/Content/ProductImage"), productprimg.FileName);
                            //productprimg.SaveAs(primage);
                            //pimgpth = "Content/ProductImage/" + productprimg.FileName;
                            pimgpth = APIs.ProductImage(productprimg);

                        }
                        foreach (var file in productothimg)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                //string otimage = Path.Combine(Server.MapPath("~/Content/ProductImage"), file.FileName);
                                //file.SaveAs(otimage);
                                //oimgpth += "Content/ProductImage/" + file.FileName + ",";

                                oimgpth = APIs.ProductImage(file);
                            }
                        }
                        string query = "insert into tbl_product(Ptype,Name,Description,Price,Discount,TaxPercent,ProductCategory,ProductSubCategory,Pimage,Oimage,Status,logid,logname,Datetime,Baserice,BranchName,BranchCode) values('" + form["selproductnm"] + "','" + form["productnm"] + "','" + form["description"] + "','" + form["productprice"] + "','" + form["productdisc"] + "','" + form["taxpercent"] + "','" + form["category"] + "','" + form["subcategory"] + "','" + pimgpth + "','" + oimgpth + "','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["baseprice"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";

                        if (db.InsertUpdateDelete(query))
                        {
                            //string squery = "insert into tbl_productstock(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname,BranchName,BranchCode) values('" + db.getmaxid("tbl_product") + "','" + form["productnm"] + "','0','0','0','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";

                            ViewBag.msg = "Data Saved";

                            activitylog.Activitylogins("tbl_product", db.getmaxid("tbl_product").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            //if (db.InsertUpdateDelete(squery))
                            //{
                            //    activitylog.Activitylogins("tbl_productstock", db.getmaxid("tbl_productstock").ToString(), squery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            //    ViewBag.msg = "Data Saved";
                            //}
                            //else
                            //{
                            //    activitylog.Activitylogins("tbl_productstock", "", squery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            //    ViewBag.msg = "Data Save Failed";
                            //}

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_product", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetProductSubCategory(string Category)
        {
            string res = "";
            try
            {
                res = "<option selected disabled value=''>Select one</option>";
                string query = "select * from tbl_pro_subcategory where ProCategory='" + Category + "' and Status='Active'";
                activitylog.Activitylogins("tbl_pro_subcategory", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Status"] + "" == "Active")
                        {
                            res += "<option value='" + dt.Rows[i]["ProSubCategory"] + "'>" + dt.Rows[i]["ProSubCategory"] + "</option>";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductStock()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductStock(FormCollection form)
        {
            string xmlData = "";
            try
            {
                if (Session["CGroupid"] + "" != "")
                {
                    DateTime currentDate = DateTime.Now;
                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                    string requestid = "R" + currentYearmonth + "" + arandom(5);
                    string query = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid) VALUES ('" + requestid + "','" + form["productid"] + "','" + form["productbrandname"] + "','" + form["productname"] + "','" + form["quantity"] + "','" + form["unittype"] + "','" + form["addstock"] + "','" + form["remark"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Requested','Active','" + Session["username"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "','" + Session["CGroupname"] + "','" + Session["CGroupid"] + "')";

                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_product_distribution").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Sent";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Sent";
                    }
                }
                else
                {

                }
                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetGroupProductStock(string Productid, string branchid)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_pro_price_circlar.Id,tbl_pro_price_circlar.Brand,tbl_pro_price_circlar.Quantity,tbl_pro_price_circlar.ProductCategory,tbl_pro_price_circlar.punit,tbl_pro_price_circlar.Balance_stock,tbl_pro_price_circlar.Ptype,tbl_pro_price_circlar.Productname,tbl_diliverypointstock.BranchCode,tbl_diliverypointstock.BranchName,tbl_diliverypointstock.Yardid,tbl_diliverypointstock.Credit,tbl_diliverypointstock.Debit,tbl_diliverypointstock.Balance,tbl_diliverypointstock.Groupid from tbl_pro_price_circlar Left join tbl_diliverypointstock on tbl_pro_price_circlar.Id=tbl_diliverypointstock.Productid where tbl_diliverypointstock.Groupid='" + Session["CGroupid"] + "' and tbl_pro_price_circlar.Id='" + Productid + "'  and tbl_diliverypointstock.Month_Year='" + DateTime.Now.Month + "-" + DateTime.Now.Year + "'";

                string pquery = "select * from tbl_pro_price_circlar where Id='" + Productid + "'";
                DataTable pdt = db.GetAllRecord(pquery);

                activitylog.Activitylogins("tbl_pro_price_circlar", Productid, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Groupid = dt.Rows[0]["Groupid"] + "";
                    if (Groupid == Session["CGroupid"] +"")
                    {

                    }
                    else
                    {
                        dt.Rows[0]["Credit"] = 0;
                        dt.Rows[0]["Debit"] = 0;
                        dt.Rows[0]["Balance"] = 0;
                    }
                    string id = dt.Rows[0]["Id"] + "";
                    string Brand = dt.Rows[0]["Brand"] + "";
                    string Quantity = dt.Rows[0]["Quantity"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string punit = dt.Rows[0]["punit"] + "";
                    string Balance_stock = dt.Rows[0]["Balance_stock"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string Balance = dt.Rows[0]["Balance"] + "";

                    res = new string[12] { id, Brand, Productname, Quantity, ProductCategory, punit, Balance_stock, Ptype, Credit, Debit, Balance, Groupid };

                }
                else if (pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Brand = pdt.Rows[0]["Brand"] + "";
                    string Quantity = pdt.Rows[0]["Quantity"] + "";
                    string ProductCategory = pdt.Rows[0]["ProductCategory"] + "";
                    string punit = pdt.Rows[0]["punit"] + "";
                    string Balance_stock = pdt.Rows[0]["Balance_stock"] + "";
                    string Ptype = pdt.Rows[0]["Ptype"] + "";
                    string Productname = pdt.Rows[0]["Productname"] + "";
                    string Credit = "0";
                    string Debit = "0";
                    string Balance = "0";
                    string Yardid = "";

                    res = new string[12] { id, Brand, Productname, Quantity, ProductCategory, punit, Balance_stock, Ptype, Credit, Debit, Balance, Yardid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult changequantity(string Requestid,string newquantity,string remark)
        {
            string res = "";
            try
            {
                string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + Requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid) VALUES ('" + Requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + newquantity + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + reqdt.Rows[0]["RequestStatus"] + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "')";

                    db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + Requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", Requestid, reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }



            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult VerifyRejectProductStock()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var Status = Request.Form["Status"];
            var remark = Request.Form["remark"];
            var vrcaddstock = Request.Form["vrcaddstock"];
            var Approveids = Request.Form["Approveids"];
            try
            {
                string[] Approveidsarry = Approveids.Split(',');
                foreach (string Approveid in Approveidsarry)
                {
                    string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + Approveid + "' and Status='Active'";
                    DataTable reqdt = db.GetAllRecord(reqquery);
                    if (reqdt.Rows.Count > 0)
                    {
                        string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid) VALUES ('" + Approveid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + Status + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "')";

                        db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + Approveid + "'");

                        if (db.InsertUpdateDelete(reqiquery))
                        {
                            activitylog.Activitylogins("tbl_diliverypoint_distribution", Approveid, reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Request Approved";

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Request Not Approved";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Request Not Found";
                    }
                }
                


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllProductFinishStock(string Proid, string quantity,string yardid)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_productstock  where Productid='" + Proid + "' and Yardid='" + yardid + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    //DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = "";
                    string Productid = "";
                    string Productname = "";
                    string Credit = "";
                    string Debit = "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string Ptype = "";
                    //string Ptype = dt2.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
                else
                {
                    res = new string[7] { "", "", "", "", "", "", "" };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetGroupProductDesrequest(string Id)
        {
            string json = "";
            try
            {
                string attquery = "SELECT * from tbl_diliverypoint_distribution where Id='" + Id + "' and Status='Active'";
                activitylog.Activitylogins("tbl_product_distribution", "", attquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                if (attdt.Rows.Count > 0)
                {
                    json = JsonConvert.SerializeObject(attdt, Formatting.None);
                }
                else
                {
                    json = "Data Not Found";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReceiveGroupProductStock()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var productid = Request.Form["productid"];
            var productbrandname = Request.Form["productbrandname"];
            var productname = Request.Form["productname"];
            var quantity = Request.Form["quantity"];
            var unittype = Request.Form["unittype"];
            var addstock = Request.Form["addstock"];
            var remark = Request.Form["remark"];
            try
            {
                string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    //string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Received','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + reqdt.Rows[0]["transactionid"]+"')";

                    string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Received','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + reqdt.Rows[0]["transactionid"] + "','" + reqdt.Rows[0]["Drivername"] + "','" + reqdt.Rows[0]["Driverid"] + "','" + reqdt.Rows[0]["Drivermobile"] + "','" + reqdt.Rows[0]["Vehiclename"] + "','" + reqdt.Rows[0]["Vehicletype"] + "','" + reqdt.Rows[0]["Vehicleid"] + "','" + reqdt.Rows[0]["Vehiclenumber"] + "')";

                    db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReturnGroupProductStock()
        {
            string res = "";
            var productid = Request.Form["productid"];
            var productbrandname = Request.Form["productbrandname"];
            var productname = Request.Form["productname"];
            var quantity = Request.Form["quantity"];
            var unittype = Request.Form["unittype"];
            var addstock = Request.Form["addstock"];
            var remark = Request.Form["remark"];
            try
            {
                DateTime currentDate = DateTime.Now;
                // Extract the year and month from the current date
                string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                string requestid = "R" + currentYearmonth + "" + arandom(5);
                string query = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid) VALUES ('" + requestid + "','" + productid + "','" + productbrandname + "','" + productname + "','" + quantity + "','" + unittype + "','" + addstock + "','" + remark + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Return','Active','" + Session["username"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "','" + Session["Groupname"] + "','" + Session["Groupid"] + "')";

                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_product_distribution").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Sent";
                }
                else
                {
                    activitylog.Activitylogins("tbl_diliverypoint_distribution", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Not Sent";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult VerifyRejectReturnProductStock()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var Status = Request.Form["Status"];
            var remark = Request.Form["remark"];
            var rvehicleid = Request.Form["rvehicleid"];
            var rdriverid = Request.Form["rdriverid"];

            string vehiclename = "", Vehicletype = "", Vehicleid = "", Vehiclenumber = "", drivername = "", drivermob = "", driverid = "";
            string queryv = "select * from tbl_vehicle where Vehicleid='" + rvehicleid + "'";
            activitylog.Activitylogins("tbl_vehicle", rvehicleid + "", queryv, "Failed", "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
            DataTable dtv = db.GetAllRecord(queryv);
            activitylog.Activitylogupd("Success", "");
            if (dtv.Rows.Count > 0)
            {
                vehiclename = dtv.Rows[0]["Vehicle_name"] + "";
                Vehicleid = rvehicleid;
                Vehiclenumber = dtv.Rows[0]["Registration_no"] + "";
                Vehicletype = dtv.Rows[0]["Vehicletype"] + "";

            }

            string queryd = "select * from tbl_registration where Employee_id='" + rdriverid + "'";
            activitylog.Activitylogins("tbl_registration", rdriverid + "", queryv, "Failed", "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
            DataTable dtd = db.GetAllRecord(queryd);
            activitylog.Activitylogupd("Success", "");
            if (dtd.Rows.Count > 0)
            {
                driverid = rdriverid;
                drivername = dtd.Rows[0]["Name"] + "";
                drivermob = dtd.Rows[0]["Mobile_no"] + "";
            }

            try
            {
                string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + Status + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','','" + drivername + "','" + driverid + "','" + drivermob + "','" + vehiclename + "','" + Vehicletype + "','" + Vehicleid + "','" + Vehiclenumber + "')";

                    db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult ReturnProductStockSent()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var Status = Request.Form["Status"];
            var remark = Request.Form["remark"];
            try
            {
                string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    //string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Received','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + reqdt.Rows[0]["transactionid"]+"')";

                    string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','"+ Status + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + reqdt.Rows[0]["transactionid"] + "','" + reqdt.Rows[0]["Drivername"] + "','" + reqdt.Rows[0]["Driverid"] + "','" + reqdt.Rows[0]["Drivermobile"] + "','" + reqdt.Rows[0]["Vehiclename"] + "','" + reqdt.Rows[0]["Vehicletype"] + "','" + reqdt.Rows[0]["Vehicleid"] + "','" + reqdt.Rows[0]["Vehiclenumber"] + "')";

                    db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReceiveReturnProductStock()
        {
            string res = "";
            var requestid = Request.Form["requestid"];
            var Status = Request.Form["Status"];
            var remark = Request.Form["remark"];
            try
            {
                string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + requestid + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    string transactionid = "T" + random(6);
                    string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + requestid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + remark + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','"+ Status + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + transactionid + "','" + reqdt.Rows[0]["Drivername"] + "','" + reqdt.Rows[0]["Driverid"] + "','" + reqdt.Rows[0]["Drivermobile"] + "','" + reqdt.Rows[0]["Vehiclename"] + "','" + reqdt.Rows[0]["Vehicletype"] + "','" + reqdt.Rows[0]["Vehicleid"] + "','" + reqdt.Rows[0]["Vehiclenumber"] + "')";

                    db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + requestid + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Approved";


                        string upquery = "";
                        //Stock Transaction query Stock table
                        string query2 = "insert into tbl_diliverypointtransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid,[transactionid] ,[Groupname] ,[Groupid]) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','Rt.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + transactionid + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "')";

                        //Stock Transaction query
                        string query = "select * from tbl_diliverypointstock where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Productquantity='" + reqdt.Rows[0]["Quntity"] + "' and Groupid='" + reqdt.Rows[0]["Groupid"] + "'";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            string debit = dt.Rows[0]["Debit"] + "";
                            string balance = dt.Rows[0]["Balance"] + "";
                            double alldebit = Convert.ToDouble(debit) + Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]);
                            double allbalance = Convert.ToDouble(balance) - Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]);
                            upquery = "update tbl_diliverypointstock set Debit='" + alldebit + "', Balance='" + allbalance + "' where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Productquantity='" + reqdt.Rows[0]["Quntity"] + "' and Groupid='" + reqdt.Rows[0]["Groupid"] + "'";

                            //Update product Stock

                        }
                        else
                        {
                            //Insert product Stock
                            upquery = "insert into tbl_diliverypointstock([Productid] ,Brandname,[Productname] ,[Credit] ,[Debit] ,[Balance] ,[Datetime] ,[logid] ,[logname] ,[BranchName] ,[BranchCode] ,[Status],Productquantity,unittype,Yardid,Yardname,Yardrowid,Groupname,Groupid) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductBName"] + "','0','"+ reqdt.Rows[0]["RequestProductQuantity"] + "','-"+ reqdt.Rows[0]["RequestProductQuantity"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Active','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "')";
                        }

                        if (db.InsertUpdateDelete(upquery))
                        {
                            activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock").ToString(), upquery, "Success", "Insert/Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Request Approved";
                            db.InsertUpdateDelete(query2);

                            string proquery = "select * from tbl_productstock where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";
                            DataTable prodt = db.GetAllRecord(proquery);
                            if (prodt.Rows.Count > 0)
                            {
                                string prodebit = prodt.Rows[0]["Debit"] + "";
                                string probalance = prodt.Rows[0]["Balance"] + "";
                                double proalldebit = Convert.ToDouble(prodebit) - Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]);
                                double proallbalance = Convert.ToDouble(probalance) + Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]);
                                string proupquery = "update tbl_productstock set Debit='" + proalldebit + "', Balance='" + proallbalance + "' where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";
                                if (db.InsertUpdateDelete(proupquery))
                                {
                                    string query21 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','Rt.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";

                                    db.InsertUpdateDelete(query21);
                                    activitylog.Activitylogins("tbl_productstock", reqdt.Rows[0]["ProductId"]+"", proupquery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Request Approved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_productstock", reqdt.Rows[0]["ProductId"]+"", proupquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Request Not Approved";
                                }
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock").ToString(), upquery, "Failed", "Insert/Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Request Not Approved";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult BProductStock()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult BProductStock(FormCollection form)
        {
            string xmlData = "";
            try
            {
                DateTime currentDate = DateTime.Now;
                // Extract the year and month from the current date
                string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                string requestid = "R" + currentYearmonth + "" + arandom(5);
                string query = "INSERT INTO [dbo].[tbl_product_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid) VALUES ('" + requestid + "','" + form["productid"] + "','" + form["productbrandname"] + "','" + form["productname"] + "','" + form["quantity"] + "','" + form["unittype"] + "','" + form["addstock"] + "','" + form["remark"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Requested','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "')";

                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_product_distribution", db.getmaxid("tbl_product_distribution").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Sent";
                    ModelState.Clear();
                }
                else
                {
                    activitylog.Activitylogins("tbl_product_distribution", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Request Not Sent";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult BProductStock_old(FormCollection form)
        {
            string xmlData = "";
            try
            {
                if (form["hid"] != "" && form["hid"] != null)
                {
                    if (form["protype"] == "Self")
                    {
                        double ocredit = Convert.ToDouble(form["credit"]);
                        double oavailbal = Convert.ToDouble(form["availbal"]);
                        double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
                        double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);
                        string query = "update tbl_productstock_all set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

                        if (db.InsertUpdateDelete(query))
                        {
                            string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','','" + form["godownname"] + "','" + form["godownid"] + "')";
                            if (db.InsertUpdateDelete(query2))
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Stock Added";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_producttransaction", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Stock not Added";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        double multiqua = 0;
                        // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                        DataTable dataTable = new DataTable();
                        dataTable.Columns.Add("Dr", typeof(decimal));
                        dataTable.Columns.Add("Balance", typeof(decimal));
                        dataTable.Columns.Add("RowMaterial", typeof(string));

                        string query = "select * from tbl_Product_name where Productname='" + form["productname"] + "'";
                        DataTable dt = db.GetAllRecord(query);

                        if (dt.Rows.Count > 0)
                        {
                            xmlData = dt.Rows[0]["XML"].ToString();
                            //DataTable dataTable = ConvertXmlToDataTable(xmlData);
                            string jsonString = ConvertXmlToJson(xmlData);

                            JObject jsonObject = JObject.Parse(jsonString);
                            // Count the number of rows in the "row" array
                            int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                            for (int i = 0; i < rowCount; i++)
                            {
                                // Access specific values in the JSON object
                                string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                                string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                                int quantity = (int)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                                multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

                                string querys = "select * from tbl_rowmeterialstock where RowMeterial='" + rowMaterial + "'";
                                DataTable dts = db.GetAllRecord(querys);
                                if (dts.Rows.Count > 0)
                                {
                                    double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                                    double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                                    if (Balance < multiqua)
                                    {
                                        ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
                                        return View();
                                    }
                                    else
                                    {
                                        Dr = Dr + multiqua;
                                        Balance = Balance - multiqua;
                                        string rowMaterialname = rowMaterial;
                                        // Add some sample data to the DataTable
                                        dataTable.Rows.Add(Dr, Balance, rowMaterialname);

                                    }
                                }

                            }
                            //// Access specific values in the JSON object
                            //string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][0];
                            //string unitType = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][1];
                            //int quantity = (int)jsonObject["Data"]["tableData"]["row"][1]["column"][2];


                            double ocredit = Convert.ToDouble(form["credit"]);
                            double oavailbal = Convert.ToDouble(form["availbal"]);
                            double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
                            double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);

                            string upsquery = "update tbl_productstock_all set Credit = '" + Add_stock + "',Balance = '" + Add_balance + "' where id = '" + form["hid"] + "'";

                            if (db.InsertUpdateDelete(upsquery))
                            {
                                string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                                if (db.InsertUpdateDelete(query2))
                                {
                                    activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                                    for (int ri = 0; ri < dataTable.Rows.Count; ri++)
                                    {
                                        string ruquery = "update tbl_rowmeterialstock set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'";

                                        if (db.InsertUpdateDelete(ruquery))
                                        {
                                            DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'");

                                            string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + multiqua + "','Dr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                            if (db.InsertUpdateDelete(query2r))
                                            {
                                                activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                                                ViewBag.msg = "Stock Added";
                                            }
                                            else
                                            {
                                                activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                                                ViewBag.msg = "Stock not Added";
                                            }
                                        }
                                        else
                                        {
                                            ViewBag.msg = "Stock not Added";
                                        }
                                    }
                                    ViewBag.msg = "Stock Added";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Stock not Added";
                                }
                            }
                            else
                            {
                                ViewBag.msg = "Stock not Added";
                            }

                        }
                    }
                }
                else
                {
                    if (form["protype"] == "Self")
                    {
                        //double ocredit = Convert.ToDouble(form["credit"]);
                        //double oavailbal = Convert.ToDouble(form["availbal"]);
                        //double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
                        //double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);
                        //string query = "update tbl_productstock set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

                        string query = "insert into tbl_productstock_all(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','0','" + form["addstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "')";

                        if (db.InsertUpdateDelete(query))
                        {
                            string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                            if (db.InsertUpdateDelete(query2))
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Stock Added";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Stock not Added";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                        DataTable dataTable = new DataTable();
                        dataTable.Columns.Add("Dr", typeof(decimal));
                        dataTable.Columns.Add("Balance", typeof(decimal));
                        dataTable.Columns.Add("RowMaterial", typeof(string));

                        string query = "select * from tbl_Product_name where Productname='" + form["productname"] + "'";
                        DataTable dt = db.GetAllRecord(query);

                        if (dt.Rows.Count > 0)
                        {
                            xmlData = dt.Rows[0]["XML"].ToString();
                            //DataTable dataTable = ConvertXmlToDataTable(xmlData);
                            string jsonString = ConvertXmlToJson(xmlData);

                            JObject jsonObject = JObject.Parse(jsonString);
                            // Count the number of rows in the "row" array
                            int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                            for (int i = 0; i < rowCount; i++)
                            {
                                // Access specific values in the JSON object
                                string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                                string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                                int quantity = (int)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                                double multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

                                string querys = "select * from tbl_rowmeterialstock where RowMeterial='" + rowMaterial + "'";
                                DataTable dts = db.GetAllRecord(querys);
                                if (dts.Rows.Count > 0)
                                {
                                    double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                                    double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                                    if (Balance < multiqua)
                                    {
                                        ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
                                        return View();
                                    }
                                    else
                                    {
                                        Dr = Dr + multiqua;
                                        Balance = Balance - multiqua;
                                        string rowMaterialname = rowMaterial;
                                        // Add some sample data to the DataTable
                                        dataTable.Rows.Add(Dr, Balance, rowMaterialname);

                                    }
                                }

                            }
                            //// Access specific values in the JSON object
                            //string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][0];
                            //string unitType = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][1];
                            //int quantity = (int)jsonObject["Data"]["tableData"]["row"][1]["column"][2];


                            //double ocredit = Convert.ToDouble(form["credit"]);
                            //double oavailbal = Convert.ToDouble(form["availbal"]);
                            //double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
                            //double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);

                            //string upsquery = "update tbl_productstock set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

                            string upsquery = "insert into tbl_productstock_all(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','0','" + form["addstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "')";

                            if (db.InsertUpdateDelete(upsquery))
                            {
                                string query2 = "insert into tbl_producttransaction_all(ProductId, ProductName, Quntity, Ttype, logname, logid, Date_time) values('" + form["productid"] + "', '" + form["productname"] + "', '" + form["addstock"] + "', 'Cr.', '" + Session["username"] + "', '" + Session["userid"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                                if (db.InsertUpdateDelete(query2))
                                {
                                    activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                                    for (int ri = 0; ri < dataTable.Rows.Count; ri++)
                                    {
                                        string ruquery = "update tbl_rowmeterialstock set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'";

                                        if (db.InsertUpdateDelete(ruquery))
                                        {
                                            DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'");

                                            string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + dataTable.Rows[ri]["Dr"] + "','Dr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                            if (db.InsertUpdateDelete(query2r))
                                            {
                                                activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                                                ViewBag.msg = "Stock Added";
                                            }
                                            else
                                            {
                                                activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                                ViewBag.msg = "Stock not Added";
                                            }
                                        }
                                        else
                                        {
                                            ViewBag.msg = "Stock not Added";
                                        }
                                    }
                                    ViewBag.msg = "Stock Added";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_producttransaction", "", query2, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Stock not Added";
                                }
                            }
                            else
                            {
                                ViewBag.msg = "Stock not Added";
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetProductStockall(string Productid)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_pro_price_circlar.Id,tbl_pro_price_circlar.Ptype,tbl_pro_price_circlar.Productname,tbl_productstock_all.Credit,tbl_productstock_all.Debit,tbl_productstock_all.Balance from tbl_pro_price_circlar Left join tbl_productstock_all on tbl_pro_price_circlar.Id=tbl_productstock_all.Productid where tbl_pro_price_circlar.Id='" + Productid + "'";

                string pquery = "select Id,Ptype,Productname from tbl_pro_price_circlar where  Id='" + Productid + "'";
                DataTable pdt = db.GetAllRecord(pquery);

                activitylog.Activitylogins("tbl_pro_price_circlar", Productid, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Name = dt.Rows[0]["Productname"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string Balance = dt.Rows[0]["Balance"] + "";

                    res = new string[6] { id, Name, Ptype, Credit, Debit, Balance };

                }
                else if (pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Name = pdt.Rows[0]["Productname"] + "";
                    string Ptype = pdt.Rows[0]["Ptype"] + "";
                    string Credit = "0";
                    string Debit = "0";
                    string Balance = "0";

                    res = new string[6] { id, Name, Ptype, Credit, Debit, Balance };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllProductStockall(string Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_productstock_all  where id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = dt.Rows[0]["Id"] + "";
                    string Productid = dt.Rows[0]["Productid"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string Ptype = dt2.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public DataTable ConvertXmlToDataTable(string xmlString)
        {
            DataTable dataTable = new DataTable();

            using (XmlReader reader = XmlReader.Create(new System.IO.StringReader(xmlString)))
            {
                string currentElementName = null;

                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        currentElementName = reader.Name;

                        if (currentElementName == "heading")
                        {
                            string columnName = reader.ReadElementContentAsString();
                            dataTable.Columns.Add(columnName);
                        }
                        else if (currentElementName == "row")
                        {
                            DataRow row = dataTable.NewRow();
                            int columnIndex = 0;

                            while (reader.ReadToFollowing("column"))
                            {
                                if (reader.NodeType == XmlNodeType.Element)
                                {
                                    string columnValue = reader.ReadElementContentAsString();
                                    if (columnIndex < dataTable.Columns.Count)
                                    {
                                        row[columnIndex] = columnValue;
                                    }
                                    columnIndex++;
                                }
                            }
                            dataTable.Rows.Add(row);
                        }
                    }
                }
            }
            return dataTable;
        }
        public string ConvertXmlToJson(string xmlString)
        {
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xmlString);

            // Convert XML to JSON using Newtonsoft.Json
            string jsonText = JsonConvert.SerializeXmlNode(doc, Newtonsoft.Json.Formatting.Indented);

            // Convert the JSON string to JObject and extract the relevant part
            JObject jsonObject = JObject.Parse(jsonText);
            JToken dataToken = jsonObject["Data"]["tableData"]["row"];

            // If there are multiple rows, we want it as an array
            if (dataToken is JArray)
            {
                jsonObject["Data"]["tableData"]["row"] = dataToken;
            }
            else
            {
                // If there's only one row, wrap it in an array
                JArray jsonArray = new JArray();
                jsonArray.Add(dataToken);
                jsonObject["Data"]["tableData"]["row"] = jsonArray;
            }

            return jsonObject.ToString();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductCategory()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductCategory(string hid, FormCollection form)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_product_category set ProductCategory='" + form["category"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_product_category", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product_category", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_product_category where ProductCategory='" + form["category"] + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Category Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_product_category(ProductCategory,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + form["category"] + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_product_category", db.getmaxid("tbl_product_category").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_product_category", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateProductCategory(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product_category where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product_category", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProductCategory"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[7] { id, name, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductSubCategory()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductSubCategory(string hid, FormCollection form)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_pro_subcategory set ProCategory='" + form["category"] + "',ProCategoryid='" + form["categoryid"] + "',ProSubCategory='" + form["subcategory"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='" + Session["ubrname"] + "',BranchCode='" + Session["ubrcode"] + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_pro_subcategory", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_pro_subcategory", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_pro_subcategory where ProCategory='" + form["category"] + "' and  ProSubCategory='" + form["subcategory"] + "' and BranchCode='" + Session["ubrcode"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Sub Category Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_pro_subcategory(ProCategory,ProCategoryid,ProSubCategory,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + form["category"] + "','" + form["categoryid"] + "','" + form["subcategory"] + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_pro_subcategory", db.getmaxid("tbl_pro_subcategory").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_pro_subcategory", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateProSubCategory(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_pro_subcategory where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_pro_subcategory", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProCategory"] + "";
                    string catid = dt.Rows[0]["ProCategoryid"] + "";
                    string subcate = dt.Rows[0]["ProSubCategory"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, name, catid, subcate, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }



        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult StockDistribution()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult StockDistribution(FormCollection form)
        {
            string xmlData = "";
            try
            {
                if(form["status"]== "Rejected")
                {
                    string[] Approveidsarry = form["Approveids"].Split(',');
                    foreach (string Approveid in Approveidsarry)
                    {
                        string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + Approveid + "' and Status='Active' and RequestStatus='Verified'";
                        DataTable reqdt = db.GetAllRecord(reqquery);
                        if (reqdt.Rows.Count > 0)
                        {
                            string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + Approveid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + form["remark"] + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + form["status"] + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','','','','','','','','')";

                            db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + Approveid + "'");

                            if (db.InsertUpdateDelete(reqiquery))
                            {
                                activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Request Rejected";


                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Request Not Approved";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Request Not Found";
                        }
                    }
                        
                }
                else
                {
                    
                    string vehiclename = "", Vehicletype = "", Vehicleid = "", Vehiclenumber = "", drivername = "", drivermob = "", driverid = "";
                    string queryv = "select * from tbl_vehicle where Vehicleid='" + form["vehicleid"] + "'";
                    activitylog.Activitylogins("tbl_vehicle", form["vehicleid"] + "", queryv, "Failed", "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                    DataTable dtv = db.GetAllRecord(queryv);
                    activitylog.Activitylogupd("Success", "");
                    if (dtv.Rows.Count > 0)
                    {
                        vehiclename = dtv.Rows[0]["Vehicle_name"] + "";
                        Vehicleid = form["vehicleid"];
                        Vehiclenumber = dtv.Rows[0]["Registration_no"] + "";
                        Vehicletype = dtv.Rows[0]["Vehicletype"] + "";

                    }
                    if (form["driverid"] == "Other")
                    {
                        driverid = form["driverid"];
                        drivername = form["drivername"];
                        drivermob = form["drivercontact"];
                    }
                    else
                    {
                        string queryd = "select * from tbl_registration where Employee_id='" + form["driverid"] + "'";
                        activitylog.Activitylogins("tbl_registration", form["driverid"] + "", queryv, "Failed", "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                        DataTable dtd = db.GetAllRecord(queryd);
                        activitylog.Activitylogupd("Success", "");
                        if (dtd.Rows.Count > 0)
                        {
                            driverid = form["driverid"];
                            drivername = dtd.Rows[0]["Name"] + "";
                            drivermob = dtd.Rows[0]["Mobile_no"] + "";
                        }
                    }

                    string[] Approveidsarry = form["Approveids"].Split(',');
                    foreach (string Approveid in Approveidsarry)
                    {
                        string reqquery = "select * from tbl_diliverypoint_distribution where Requestid='" + Approveid + "' and Status='Active' and RequestStatus='Verified'";
                        DataTable reqdt = db.GetAllRecord(reqquery);
                        if (reqdt.Rows.Count > 0)
                        {
                            string transactionid = "T" + random(6);
                            string reqiquery = "INSERT INTO [dbo].[tbl_diliverypoint_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,Requestbyname,Requestbyid,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid,Groupname,Groupid,transactionid,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicletype],[Vehicleid],Vehiclenumber) VALUES ('" + Approveid + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + form["remark"] + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + form["status"] + "','Active','" + reqdt.Rows[0]["Requestbyname"] + "','" + reqdt.Rows[0]["Requestbyid"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + transactionid + "','" + drivername + "','" + driverid + "','" + drivermob + "','" + vehiclename + "','" + Vehicletype + "','" + Vehicleid + "','" + Vehiclenumber + "')";

                            db.InsertUpdateDelete("update tbl_diliverypoint_distribution set Status='Inactive' where Requestid='" + Approveid + "'");

                            if (db.InsertUpdateDelete(reqiquery))
                            {
                                activitylog.Activitylogins("tbl_diliverypoint_distribution", db.getmaxid("tbl_diliverypoint_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Request Approved";

                                string upquery = "";
                                //Stock Transaction query Stock table
                                string query2 = "insert into tbl_diliverypointtransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid,[transactionid] ,[Groupname] ,[Groupid]) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','Cr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + transactionid + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "')";

                                //Stock Transaction query
                                string query = "select * from tbl_diliverypointstock where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Productquantity='" + reqdt.Rows[0]["Quntity"] + "' and Groupid='" + reqdt.Rows[0]["Groupid"] + "' and Month_Year='" + DateTime.Now.Month + "-" + DateTime.Now.Year + "'";
                                DataTable dt = db.GetAllRecord(query);
                                if (dt.Rows.Count > 0)
                                {
                                    string credit = dt.Rows[0]["Credit"] + "";
                                    string balance = dt.Rows[0]["Balance"] + "";
                                    double allcredit = Convert.ToDouble(credit) + Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"] + "");
                                    double allbalance = Convert.ToDouble(balance) + Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"] + "");
                                    upquery = "update tbl_diliverypointstock set Credit='" + allcredit + "', Balance='" + allbalance + "' where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Productquantity='" + reqdt.Rows[0]["Quntity"] + "' and Groupid='" + reqdt.Rows[0]["Groupid"] + "' and Month_Year='" + DateTime.Now.Month + "-" + DateTime.Now.Year + "'";

                                    //Update product Stock

                                }
                                else
                                {
                                    //Insert product Stock
                                    upquery = "insert into tbl_diliverypointstock([Productid] ,Brandname,[Productname] ,[Credit] ,[Debit] ,[Balance] ,[Datetime] ,[logid] ,[logname] ,[BranchName] ,[BranchCode] ,[Status],Productquantity,unittype,Yardid,Yardname,Yardrowid,Groupname,Groupid,Month,Year,Month_Year) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','0','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','Active','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "','" + reqdt.Rows[0]["Groupname"] + "','" + reqdt.Rows[0]["Groupid"] + "','" + DateTime.Now.Month + "','" + DateTime.Now.Year + "','" + DateTime.Now.Month + "-" + DateTime.Now.Year + "')";
                                   
                                }

                                if (db.InsertUpdateDelete(upquery))
                                {
                                    activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock").ToString(), upquery, "Success", "Insert/Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Request Approved";
                                    db.InsertUpdateDelete(query2);

                                    string proquery = "select * from tbl_productstock where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";
                                    DataTable prodt = db.GetAllRecord(proquery);
                                    if (prodt.Rows.Count > 0)
                                    {
                                        string proused = prodt.Rows[0]["Debit"] + "";
                                        string probalance = prodt.Rows[0]["Balance"] + "";
                                        double proallused = Convert.ToDouble(proused) + Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]+"");
                                        double proallbalance = Convert.ToDouble(probalance) - Convert.ToDouble(reqdt.Rows[0]["RequestProductQuantity"]+"");
                                        string proupquery = "update tbl_productstock set Debit='" + proallused + "', Balance='" + proallbalance + "' where Productid='" + reqdt.Rows[0]["ProductId"] + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";
                                        if (db.InsertUpdateDelete(proupquery))
                                        {
                                            string query21 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','Dr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["BranchName"] + "','" + reqdt.Rows[0]["BranchCode"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";

                                            db.InsertUpdateDelete(query21);
                                            activitylog.Activitylogins("tbl_productstock", reqdt.Rows[0]["ProductId"]+"", proupquery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                            ViewBag.msg = "Request Approved";
                                        }
                                        else
                                        {
                                            activitylog.Activitylogins("tbl_productstock", reqdt.Rows[0]["ProductId"]+"", proupquery, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                            ViewBag.msg = "Request Not Approved";
                                        }
                                    }


                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock").ToString(), upquery, "Failed", "Insert/Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Request Not Approved";
                                }


                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_diliverypoint_distribution", "", reqiquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Request Not Approved";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Request Not Found";
                        }
                    }


                }
                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }


        public JsonResult GetBranch(string Id)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_branch where Branchid='" + Id + "'";
                activitylog.Activitylogins("tbl_branch", Id.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Branch"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    string State = dt.Rows[0]["State"] + "";
                    string City = dt.Rows[0]["City"] + "";
                    string Cityid = dt.Rows[0]["Cityid"] + "";
                    string Stateid = dt.Rows[0]["Stateid"] + "";
                    string Branchid = dt.Rows[0]["Branchid"] + "";

                    res = new string[10] { id, name, status, companyname, companyid, State, City, Cityid, Stateid, Branchid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetBranchEMP(string employeeid)
        {
            string res = "";
            try
            {
                string squery = "select * from tbl_registration where Employee_id='" + employeeid + "'";
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    string query = "select * from tbl_branch where Branchid='" + sdt.Rows[0]["BranchCode"] + "'";
                    activitylog.Activitylogins("tbl_branch", sdt.Rows[0]["BranchCode"]+"", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        res = JsonConvert.SerializeObject(dt, Formatting.None);

                    }
                }

                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        ///  Inventry Module  Close ///











        ///  Sales Module  Open ///
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult VDknocks()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult VDemo()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult VBSA()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult VOrder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Dknocks()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url);
            }
            return View();
        }
        [HttpPost]
        public ActionResult Dknocks(FormCollection form)
        {
            try
            {
                // Create a JObject to store data
                JObject jsonObject = new JObject();
                jsonObject["Location"] = form["loc"]; ;
                jsonObject["Latitude"] = form["latitude"];
                jsonObject["Longitude"] = form["longitude"]; ;

                // Convert JObject to JSON string
                string jsonlocation = jsonObject.ToString();

                string res = "";
                string query = "";
                string hid = form["support"];
                string query1 = "SELECT * FROM tbl_customer AS c LEFT JOIN tbl_login AS l ON c.Mobile = l.Mobile WHERE c.Mobile = '" + form["mobile"] + "'";
                activitylog.Activitylogins("tbl_customer,tbl_login", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query1);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.AlertMessage = "Dk's Done Of this Customer You Redirected to demo process.";
                }
                else
                {

                    string nextstatus = "";
                    if (form["irrigation"] == "Agriculture")
                    {
                        nextstatus = "Open";
                    }
                    else
                    {
                        nextstatus = "Close";
                    }
                    DateTime currentDate = DateTime.Now;
                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                    string customerid = "C" + currentYearmonth + "" + arandom(5);
                    string leadid = "L" + currentYearmonth + "" + arandom(5);
                    string address = form["address"] + "," + form["tahsil"] + "," + form["block"] + "," + form["Cityname"] + "," + form["Statename"] + "," + form["pincode"];
                    if (hid == "Yes")
                    {
                        leadid = Session["Leadid"] + "";
                        query = "Update [tbl_leadnew] Set [Customerid]='" + customerid + "' ,[Name]='" + form["name"] + "' ,[Mobile]='" + form["mobile"] + "' ,[Email]='" + form["email"] + "' ,[Statename]='" + form["Statename"] + "' ,[Cityname]='" + form["Cityname"] + "' ,[Address]='" + address + "' ,[Pincode]='" + form["pincode"] + "' ,[Occupation]='" + form["occupation"] + "' ,[Land_Irrigation]='" + form["irrigation"] + "' ,[Taken_time]='" + form["stopwatchinp"] + "' ,[Lead_status]='Done',Nextstatus='" + nextstatus + "',[Status]='Active' ,[BranchName]='" + Session["ubrname"] + "' ,[BranchCode]='" + Session["ubrcode"] + "' ,[Logid]='" + Session["userid"] + "' ,[Logname]='" + Session["username"] + "' ,[releavedatetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where id='" + Session["Rowid"] + "'";

                    }
                    else
                    {
                        
                        query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus) VALUES('" + leadid + "','" + customerid + "','" + form["name"] + "','" + form["mobile"] + "','" + form["email"] + "','" + form["Statename"] + "','" + form["Cityname"] + "','" + address + "','" + form["pincode"] + "','" + form["occupation"] + "','" + form["irrigation"] + "','Close','XML','" + form["support"] + "','" + jsonlocation + "','','','','','','" + form["stopwatchinp"] + "','DKS','Done','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+nextstatus+"')";

                    }

                    string pass = random(5);
                    
                    string cquery = "insert into tbl_customer(Customer_id ,Name ,Mobile ,Email ,Password ,Full_address,Address ,State ,City ,Postal_code ,Tahsil,Block ,Profile_pic ,Status,Datetime,Log_ID ,Log_name ,Log_Email,BranchName,BranchCode,RegistrationType,Groupname,Groupid) values('" + customerid + "','" + form["name"] + "','" + form["mobile"] + "','" + form["email"] + "','" + pass + "','"+ address + "','" + form["address"] + "','" + form["Statename"] + "','" + form["Cityname"] + "','" + form["pincode"] + "','" + form["tahsil"] + "','" + form["block"] + "','pic','Lead','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"].ToString() + "', '" + Session["username"].ToString() + "', '" + Session["usermail"].ToString() + "','" + Session["ubrname"].ToString() + "', '" + Session["ubrcode"].ToString() + "','Lead','"+ Session["CGroupname"] + "','"+Session["CGroupid"]+"')";

                    string lquery = "insert into tbl_login(Username,Userid,Emailid,Mobile,Password,Type,Status,Datetime,OTP_Time,Branchname,Branchcode) values('" + form["name"] + "','" + customerid + "','" + form["email"] + "','" + form["mobile"] + "','" + pass + "','Customer','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("HH:mm:ss") + "','" + Session["ubrname"].ToString() + "', '" + Session["ubrcode"].ToString() + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_lead", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        if (db.InsertUpdateDelete(cquery) && db.InsertUpdateDelete(lquery))
                        {
                            res = leadid;
                            
                            activitylog.Activitylogins("tbl_customer", db.getmaxid("tbl_customer").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            activitylog.Activitylogins("tbl_login", db.getmaxid("tbl_login").ToString(), lquery, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            if (form["email"] != "")
                            {
                                //Messaging.SendMailEmployee("", form["email"], "Registration Successfully", bodytext);
                            }
                            string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                            //Messaging.SendWhatsappSMSNew1(mobile, "OTP Login", Session["username"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);

                            if (form["irrigation"] == "Agriculture")
                            {
                                ViewBag.AlertMessage = "Success";
                                Response.Redirect("/User/BSA?customerid=" + customerid + "&leadid=" + leadid);
                            }


                        }
                        else
                        {
                            
                            activitylog.Activitylogins("tbl_login", "", lquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.AlertMessage = customerid + " Registration Failed";
                            activitylog.Activitylogins("tbl_lead", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        }
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_customer", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    }
                    
                }

                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetCustomer(string Mobile)
        {
            string msg = "";
            try
            {
                string query1 = "SELECT * FROM tbl_customer WHERE Mobile='" + Mobile + "'";
                activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                DataTable dt = db.GetAllRecord(query1);
                activitylog.Activitylogupd("Success", "");

                string query2 = "SELECT * FROM tbl_login WHERE Mobile='" + Mobile + "'";
                activitylog.Activitylogins("tbl_login", "", query2, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt2 = db.GetAllRecord(query2);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    msg = "Mobile Already Exist";
                }
                else if (dt2.Rows.Count > 0)
                {
                    msg = "Mobile Already Exist";
                }
                else
                {
                    msg = "";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult BSA(string customerid, string leadid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
                ViewBag.leadid = leadid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult BSA(FormCollection form)
        {
            try
            {
                // Create a JObject to store data
                JObject jsonObject = new JObject();
                jsonObject["Location"] = form["loc"]; ;
                jsonObject["Latitude"] = form["latitude"];
                jsonObject["Longitude"] = form["longitude"]; ;

                // Convert JObject to JSON string
                string jsonlocation = jsonObject.ToString();

                string res = "";
                string query = "";
                string hid = form["support"];
                string customerid = form["hid"];
                string leadid = form["leadid"];
                string nextstatus = "";
                string Status = "";
                JObject jsonObject1 = new JObject();
                if (form["crfrd"] == "Know")
                {
                    jsonObject1["Crop_ferti_details"] = form["crfrd"];
                    jsonObject1["Land_arc"] = form["irrigationc"];
                    jsonObject1["Irrigation_Eqp"] = form["irrieq"];
                    jsonObject1["Cropdetail"] = form["cropnm"];
                    jsonObject1["Fertilizerdetail"] = form["fertilizernm"];
                    jsonObject1["Nextmeetdate"] = "";
                    jsonObject1["Nextmeettime"] = "";

                    jsonObject1["Intrestedarea"] = form["interested"];
                    jsonObject1["Facing_Problems"] = form["problems"];
                    jsonObject1["Commercial_planting"] = form["commercial"];
                    jsonObject1["Profitable"] = form["profitable"];

                    nextstatus = "Open";
                    Status = "Done";
                }
                else
                {
                    jsonObject1["Crop_ferti_details"] = form["crfrd"];
                    jsonObject1["OPersontname"] = form["pername"];
                    jsonObject1["OPersontcontact"] = form["permobile"];
                    jsonObject1["Nextmeetdate"] = form["meetdate"];
                    jsonObject1["Nextmeettime"] = form["meettime"];
                    nextstatus = "Open";
                    Status = "Follow Up";
                    //query = "update tbl_lead set Crop_ferti_details='" + form["crfrd"] + "', OPersontname= '" + form["pername"] + "',OPersontcontact= '" + form["permobile"] + "',Demostatus='Follow Up',Nextmeetdate='" + form["meetdate"] + "',Nextmeettime='" + form["meettime"] + "',Demotime='" + form["stopwatchinp"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Customerid='" + form["hid"] + "'";
                }

                // Convert JObject to JSON string
                string jsondata1 = jsonObject1.ToString();

                string query1 = "SELECT * FROM tbl_customer  WHERE Customer_id = '" + customerid + "'";
                activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query1);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    if (hid == "Yes")
                    {
                        query = "Update [tbl_leadnew] Set [Customerid]='" + customerid + "' ,[Name]='" + dt.Rows[0]["Name"] + "' ,[Mobile]='" + dt.Rows[0]["Mobile"] + "' ,[Email]='" + dt.Rows[0]["Email"] + "' ,[Statename]='" + dt.Rows[0]["State"] + "' ,[Cityname]='" + dt.Rows[0]["City"] + "' ,[Address]='" + dt.Rows[0]["Full_address"] + "' ,[Pincode]='" + dt.Rows[0]["Postal_code"] + "' ,[Occupation]='' ,[Land_Irrigation]='" + form["irrigation"] + "' ,[Taken_time]='" + form["stopwatchinp"] + "' ,[Lead_status]='Done',Nextstatus='" + nextstatus + "',[Status]='Active' ,[BranchName]='" + Session["ubrname"] + "' ,[BranchCode]='" + Session["ubrcode"] + "' ,[Logid]='" + Session["userid"] + "' ,[Logname]='" + Session["username"] + "' ,[releavedatetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',XML='" + jsondata1 + "',Crop_ferti_details='" + form["crfrd"] + "' where id='" + Session["Rowid"] + "'";

                    }
                    else
                    {
                        query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,Crop_ferti_details) VALUES('" + leadid + "','" + customerid + "','" + dt.Rows[0]["Name"] + "','" + dt.Rows[0]["Mobile"] + "','" + dt.Rows[0]["Email"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["City"] + "','" + dt.Rows[0]["Full_address"] + "','" + dt.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','" + form["support"] + "','" + jsonlocation.Replace("'","") + "','','','','','','" + form["stopwatchinp"] + "','BSA','" + Status + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + nextstatus + "','" + form["crfrd"] + "')";

                    }

                    if (db.InsertUpdateDelete(query))
                    {
                        res = leadid;
                        activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_leadnew").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        if(form["crfrd"] == "Know")
                        {
                            ViewBag.AlertMessage = "Success";
                            Response.Redirect("/User/Demo?customerid=" + customerid + "&leadid=" + leadid);
                        }
                        else
                        {
                            ViewBag.AlertMessage = "Success";
                            Response.Redirect("/User/VDknocks");
                        }
                        

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    }
                }
                else
                {
                    
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Demo(string customerid, string leadid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
                ViewBag.leadid = leadid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Demo(FormCollection form)
        {
            try
            {

                // Create a JObject to store data
                JObject jsonObject = new JObject();
                jsonObject["Location"] = form["loc"]; 
                jsonObject["Latitude"] = form["latitude"];
                jsonObject["Longitude"] = form["longitude"];
                jsonObject["typeproduct"] = form["typeproduct"];
                // Convert JObject to JSON string
                string jsonlocation = jsonObject.ToString();

                string res = "";
                string query = "";
                string hid = form["support"];
                string customerid = form["hid"];
                string leadid = form["leadid"];
                string nextstatus = "";
                string Status = "";
                JObject jsonObject1 = new JObject();
                if (form["doubtname"] == "No Doubts")
                {
                    jsonObject1["Productid"] = form["pproductid"];
                    jsonObject1["Productname"] = form["pproductname"];
                    jsonObject1["Brandname"] = form["pbrandname"];
                    jsonObject1["Productcategory"] = form["pproductcategory"];
                    jsonObject1["Productunittype"] = form["pproductunittype"];
                    jsonObject1["Doubts"] = form["doubtname"];

                    nextstatus = "Open";
                    Status = "Done";
                    // query = "update tbl_lead set Crop_ferti_details='" + form["crfrd"] + "', Land_arc='" + form["irrigationc"] + "',Irrigation_Eqp='" + form["irrieq"] + "',Cropdetail='" + form["cropnm"] + "',Fertilizerdetail='" + form["fertilizernm"] + "',Doubts='" + form["doubtname"] + "',Demostatus='Done',Demotime='" + form["stopwatchinp"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Customerid='" + form["hid"] + "'";
                }
                else if(form["doubtname"] == "Follow Up")
                {
                    jsonObject1["Productid"] = form["pproductid"];
                    jsonObject1["Productname"] = form["pproductname"];
                    jsonObject1["Brandname"] = form["pbrandname"];
                    jsonObject1["Productcategory"] = form["pproductcategory"];
                    jsonObject1["Productunittype"] = form["pproductunittype"];
                    jsonObject1["Doubts"] = form["doubtname"];
                    jsonObject1["Nextmeetdate"] = form["meetdate"];
                    jsonObject1["Nextmeettime"] = form["meettime"];
                    jsonObject1["doubtReason"] = form["doubtReason"];
                    nextstatus = "Open";
                    Status = "Follow Up";
                    // query = "update tbl_lead set Crop_ferti_details='" + form["crfrd"] + "', Land_arc='" + form["irrigationc"] + "',Irrigation_Eqp='" + form["irrieq"] + "',Cropdetail='" + form["cropnm"] + "',Fertilizerdetail='" + form["fertilizernm"] + "',Doubts='" + form["doubtname"] + "',Demostatus='Done',Demotime='" + form["stopwatchinp"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Customerid='" + form["hid"] + "'";
                }
                else 
                {
                    jsonObject1["Productid"] = form["pproductid"];
                    jsonObject1["Productname"] = form["pproductname"];
                    jsonObject1["Brandname"] = form["pbrandname"];
                    jsonObject1["Productcategory"] = form["pproductcategory"];
                    jsonObject1["Productunittype"] = form["pproductunittype"];
                    jsonObject1["Doubts"] = form["doubtname"];

                    nextstatus = "Close";
                    Status = "Done";
                }

                // Convert JObject to JSON string
                string jsondata1 = jsonObject1.ToString();

                string query1 = "SELECT * FROM tbl_customer  WHERE Customer_id = '" + customerid + "'";
                activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query1);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    if (hid == "Yes")
                    {
                        query = "Update [tbl_leadnew] Set [Customerid]='" + customerid + "' ,[Name]='" + dt.Rows[0]["Name"] + "' ,[Mobile]='" + dt.Rows[0]["Mobile"] + "' ,[Email]='" + dt.Rows[0]["Email"] + "' ,[Statename]='" + dt.Rows[0]["State"] + "' ,[Cityname]='" + dt.Rows[0]["City"] + "' ,[Address]='" + dt.Rows[0]["Full_address"] + "' ,[Pincode]='" + dt.Rows[0]["Postal_code"] + "' ,[Occupation]='' ,[Land_Irrigation]='" + form["irrigation"] + "' ,[Taken_time]='" + form["stopwatchinp"] + "' ,[Lead_status]='"+ Status + "',Nextstatus='" + nextstatus + "',[Status]='Active' ,[BranchName]='" + Session["ubrname"] + "' ,[BranchCode]='" + Session["ubrcode"] + "' ,[Logid]='" + Session["userid"] + "' ,[Logname]='" + Session["username"] + "' ,[releavedatetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',XML='" + jsondata1 + "',OrderDetails='" + form["Order"] + "',protype='"+ form["typeproduct"] + "' where id='" + Session["Rowid"] + "'";

                    }
                    else
                    {
                        query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,OrderDetails,protype) VALUES('" + leadid + "','" + customerid + "','" + dt.Rows[0]["Name"] + "','" + dt.Rows[0]["Mobile"] + "','" + dt.Rows[0]["Email"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["City"] + "','" + dt.Rows[0]["Full_address"] + "','" + dt.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','" + form["support"] + "','" + jsonlocation + "','','','','','','" + form["stopwatchinp"] + "','Demo','" + Status + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + nextstatus + "','" + form["Order"] + "','" + form["typeproduct"] + "')";

                    }

                    if (db.InsertUpdateDelete(query))
                    {
                        res = leadid;
                        activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_leadnew").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        if (form["doubtname"] == "No Doubts")
                        {
                            ViewBag.AlertMessage = "Success";
                            Session["typeproduct"] = form["typeproduct"];
                            Response.Redirect("/User/Order?customerid=" + customerid + "&leadid=" + leadid+"&pt=" + form["typeproduct"]);
                        }
                        else
                        {
                            ViewBag.AlertMessage = "Success";
                            Response.Redirect("/User/VBSA");
                        }
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    }
                }
                else
                {

                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Order(int? page, int? pageSize, string customerid, string leadid, string category, string proid,string pt)
        {
            List<productCls> products = new List<productCls>();
            IPagedList<productCls> pagedProducts = null;
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
                ViewBag.leadid = leadid;
                ViewBag.page = page;
                ViewBag.category = category;
                if(pt!="")
                {
                    Session["typeproduct"] = pt;
                }
               
                try
                {
                    int defaultPageSize = 5; // Default number of items per page
                    int pageNumber = (page ?? 1);
                    int selectedPageSize = pageSize ?? defaultPageSize;

                    if (proid != null)
                    {
                        ViewBag.proid = proid;
                    }
                    else
                    {
                        ViewBag.proid = "";
                    }
                    products = GetAll_Products(category, proid);
                    pagedProducts = products.ToPagedList(pageNumber, selectedPageSize);

                    string Query = @"SELECT ProductCategory, COUNT(*) AS count FROM [tbl_pro_price_circlar] where Status='Active' and PType='"+ Session["typeproduct"] + "' GROUP BY ProductCategory";
                    DataTable dt = db.GetAllRecord(Query);
                    var data = dt;
                    ViewBag.category_group = dt;
                }
                catch (Exception ex)
                {
                    pagedProducts = new PagedList<productCls>(new List<productCls>(), 1, 5);
                }

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View(pagedProducts);
        }
        [HttpPost]
        public ActionResult Order(FormCollection form)
        {
            try
            {
                string hid = form["hid"];
                if (hid != null && hid != "")
                {
                    string query = "update tbl_lead set Irrigation_Eqp='" + form["irrigation"] + "',Cropdetail='" + form["cropnm"] + "',Fertilizerdetail='" + form["fertilizernm"] + "',Interestedarea='" + form["intrestedareanm"] + "',Demostatus='Done',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Customerid='" + form["hid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_lead", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        if (form["irrigation"] == "Agriculture")
                        {
                            ViewBag.msg = "Success";
                            //Response.Redirect("/User/Demo?customerid=" + customerid);
                        }

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_customer", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        ViewBag.msg = "Failed";
                    }
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Followup()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult View_product_in_modal(string productID)
        {
            string[] res = { };
            productCls products = new productCls();
            try
            {
                string Query = @"select [Id],[Ptype],[Brand],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname], CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar]  where Status='Active' and Id='" + productID + "' order by Id desc";
                DataTable dt = db.GetAllRecord(Query);

                if (dt.Rows.Count > 0)
                {
                    ViewBag.modalDt = dt;

                    string id = dt.Rows[0]["Id"].ToString() + "";
                    string encryId = Encryption.Encrypt(dt.Rows[0]["Id"].ToString()) + "";
                    string Name = dt.Rows[0]["Productname"].ToString() + "";
                    string Brand = dt.Rows[0]["Brand"].ToString() + "";
                    string Ptype = dt.Rows[0]["Ptype"].ToString() + "";
                    string Price = dt.Rows[0]["Sellprice"].ToString() + "";
                    string Discount = dt.Rows[0]["Discountpercent"].ToString() + "";
                    string TaxPercent = "";
                    string Description = dt.Rows[0]["Description"].ToString() + "";
                    string Pimage = dt.Rows[0]["Pimage"].ToString() + "";
                    string Baserice = dt.Rows[0]["Offerprice"].ToString() + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"].ToString() + "";
                    string[] otherImagePaths1 = dt.Rows[0]["Oimage"].ToString().Split(',');
                    int lastIndex1 = otherImagePaths1.Length - 1;
                    while (lastIndex1 >= 0 && string.IsNullOrEmpty(otherImagePaths1[lastIndex1]))
                    {
                        lastIndex1--;
                    }
                    string[] OtherImg1 = otherImagePaths1.Take(Math.Min(5, lastIndex1 + 1)).ToArray();

                    string otherImg1String = string.Join(",", OtherImg1);

                    res = new string[13] { id, Name, Ptype, Price, Discount, TaxPercent, Description, Pimage, Baserice, ProductCategory, otherImg1String, encryId, Brand };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Addtocart_old(string id, string Customer)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_cart_details where Customer_id='" + Customer + "' and ProductId='" + id + "' and logid='" + Session["userid"] + "'";
                activitylog.Activitylogins("tbl_state", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {

                }
                else
                {
                    string cquery = "select * from tbl_customer where Customer_id='" + Customer + "'";
                    activitylog.Activitylogins("tbl_customer", "", cquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable cdt = db.GetAllRecord(cquery);
                    activitylog.Activitylogupd("Success", "");

                    string pquery = "select * from tbl_product where Id='" + id + "'";
                    activitylog.Activitylogins("tbl_product", "", pquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable pdt = db.GetAllRecord(pquery);
                    activitylog.Activitylogupd("Success", "");

                    string insertQuery = "insert into tbl_cart_details(Customer_id,Name,ProductId,ProductName,ProductQuantity,status,[Datetime],[logid],[logname],price,total_price) values('" + cdt.Rows[0]["Customer_id"] + "','" + cdt.Rows[0]["Name"] + "','" + pdt.Rows[0]["Id"] + "','" + pdt.Rows[0]["Name"] + "','1','Add In Cart','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Userid"] + "','" + Session["username"] + "','" + pdt.Rows[0]["Price"] + "','" + pdt.Rows[0]["Price"] + "')";

                    if (db.InsertUpdateDelete(insertQuery))
                    {
                        activitylog.Activitylogins("tbl_cart_details", cdt.Rows[0]["Customer_id"] + "", insertQuery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        res = "Data Inserted";

                        DataTable resdt = db.GetAllRecord("select * from tbl_cart_details where Customer_id='" + Customer + "' and ProductId='" + id + "' and logid='" + Session["userid"] + "'");

                        res = JsonConvert.SerializeObject(resdt, Formatting.None);
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_cart_details", cdt.Rows[0]["Customer_id"] + "", insertQuery, "Fail", "Insert Fail", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        res = "Data Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Addtocart(string id, string Customer)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_cart_details where Customer_id='" + Customer + "' and ProductId='" + id + "' and logid='" + Session["userid"] + "'";
                activitylog.Activitylogins("tbl_state", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {

                }
                else
                {
                    string cquery = "select * from tbl_customer where Customer_id='" + Customer + "'";
                    activitylog.Activitylogins("tbl_customer", "", cquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable cdt = db.GetAllRecord(cquery);
                    activitylog.Activitylogupd("Success", "");

                    string pquery = "select * from tbl_pro_price_circlar where Id='" + id + "'";
                    activitylog.Activitylogins("tbl_pro_price_circlar", "", pquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable pdt = db.GetAllRecord(pquery);
                    activitylog.Activitylogupd("Success", "");
                    Double total_quantity =1;

                    string insertQuery = "";
                    if (pdt.Rows.Count > 0)
                    {
                        if (pdt.Rows[0]["Ptype"] + "" == "Plant")
                        {
                            total_quantity = 10;
                            insertQuery = "insert into tbl_cart_details(Customer_id,Name,ProductId,ProductName,ProductQuantity,status,[Datetime],[logid],[logname],price,total_price,total_quantity,Producttype,offerprice,bulkprice) values('" + cdt.Rows[0]["Customer_id"] + "','" + cdt.Rows[0]["Name"] + "','" + pdt.Rows[0]["Id"] + "','" + pdt.Rows[0]["Productname"] + "','1','Add In Cart','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Userid"] + "','" + Session["username"] + "','" + pdt.Rows[0]["Offerprice"] + "','" + pdt.Rows[0]["Offerprice"] + "','" + total_quantity + "','" + pdt.Rows[0]["Ptype"] + "','" + pdt.Rows[0]["Sellprice"] + "','" + pdt.Rows[0]["Bulkprice"] + "')";
                        }
                        else
                        {
                            insertQuery = "insert into tbl_cart_details(Customer_id,Name,ProductId,ProductName,ProductQuantity,status,[Datetime],[logid],[logname],price,total_price,total_quantity,Producttype,offerprice) values('" + cdt.Rows[0]["Customer_id"] + "','" + cdt.Rows[0]["Name"] + "','" + pdt.Rows[0]["Id"] + "','" + pdt.Rows[0]["Productname"] + "','1','Add In Cart','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["Userid"] + "','" + Session["username"] + "','" + pdt.Rows[0]["Offerprice"] + "','" + pdt.Rows[0]["Sellprice"] + "','" + total_quantity + "','" + pdt.Rows[0]["Ptype"] + "','" + pdt.Rows[0]["Sellprice"] + "')";
                        }
                    }
                    
                    if (db.InsertUpdateDelete(insertQuery))
                    {
                        activitylog.Activitylogins("tbl_cart_details", cdt.Rows[0]["Customer_id"] + "", insertQuery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        res = "Data Inserted";

                        DataTable resdt = db.GetAllRecord("select * from tbl_cart_details where Customer_id='" + Customer + "' and ProductId='" + id + "' and logid='" + Session["userid"] + "'");

                        res = JsonConvert.SerializeObject(resdt, Formatting.None);
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_cart_details", cdt.Rows[0]["Customer_id"] + "", insertQuery, "Fail", "Insert Fail", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        res = "Data Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ViewSelectedProduct(string customerid, string proid, string leadid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
                ViewBag.productid = proid;
                ViewBag.leadid = leadid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult Increment_InCart(string customerid, int ProductId, int cartId, int ProductQty, string Price, string offerprice, string bulkprice, string Ptype)
        {
            try
            {
                if (customerid != "")
                {
                    Double total_quantity = 1;
                    if (Ptype == "Plant")
                    {
                        total_quantity = Convert.ToDouble(ProductQty) * 10;

                        if (Convert.ToInt32(total_quantity) < 99 && Convert.ToInt32(total_quantity) > 0)
                        {
                            
                        }
                        else if (Convert.ToInt32(total_quantity) < 199 && Convert.ToInt32(total_quantity) > 99)
                        {
                            Price = offerprice;
                        }
                        else if (Convert.ToInt32(total_quantity) > 199)
                        {
                            Price = bulkprice;
                        }


                    }
                    else
                    {
                        total_quantity = ProductQty;
                        Price = offerprice;
                    }

                    int Count_quantity = Convert.ToInt32(ProductQty);

                    decimal Count_price = Convert.ToDecimal(Price);
                    decimal total_price = Count_quantity * Count_price;

                    string updateQuery = "update tbl_cart_details set ProductQuantity='" + Count_quantity + "',total_price='" + total_price + "',total_quantity='" + total_quantity + "' where Customer_id='" + customerid + "' and ProductId='" + ProductId + "' and id='" + cartId + "'";
                    if (db.InsertUpdateDelete(updateQuery))
                    {
                        getCart(customerid, ProductId + "");

                        string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_details", hid, updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_details", hid, updateQuery, "Success", "Update Success", Session["usreid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Failed";
                    }
                }
                else
                {
                    int Count_quantity = Convert.ToInt32(ProductQty);
                    decimal Count_price = Convert.ToDecimal(Price);
                    decimal total_price = Count_quantity * Count_price;

                    string updateQuery = "update tbl_cart_sales set ProductQuantity='" + Count_quantity + "',total_price='" + total_price + "' where ProductId='" + ProductId + "' and id='" + cartId + "'";
                    if (db.InsertUpdateDelete(updateQuery))
                    {
                        //getCart(customerid, ProductId + "");

                        //string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        //string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["usreid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(new { success = true });
        }
        public JsonResult Decrement_InCart(string customerid, int ProductId, int cartId, int ProductQty, string Price, string offerprice, string bulkprice, string Ptype)
        {
            var dateee = "";
            try
            {
                if (customerid != "")
                {
                    Double total_quantity = 1;
                    if (Ptype == "Plant")
                    {
                        total_quantity = Convert.ToDouble(ProductQty) * 10;

                        if (Convert.ToInt32(total_quantity) < 99 && Convert.ToInt32(total_quantity) > 0)
                        {

                        }
                        else if (Convert.ToInt32(total_quantity) < 199 && Convert.ToInt32(total_quantity) > 99)
                        {
                            Price = offerprice;
                        }
                        else if (Convert.ToInt32(total_quantity) > 199)
                        {
                            Price = bulkprice;
                        }
                    }
                    else
                    {
                        total_quantity = ProductQty;
                        Price = offerprice;
                    }
                    int Count_quantity = Convert.ToInt32(ProductQty);

                    decimal Count_price = Convert.ToDecimal(Price);
                    decimal total_price = Count_quantity * Count_price;

                    string updateQuery = "update tbl_cart_details set ProductQuantity='" + Count_quantity + "',total_price='" + total_price + "',total_quantity='"+ total_quantity + "' where Customer_id='" + customerid + "' and ProductId='" + ProductId + "' and id='" + cartId + "'";
                    if (db.InsertUpdateDelete(updateQuery))
                    {
                        getCart(customerid, ProductId + "");

                        string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_details", hid, updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_details", hid, updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Failed";
                    }
                }
                else
                {
                    int Count_quantity = Convert.ToInt32(ProductQty);

                    decimal Count_price = Convert.ToDecimal(Price);
                    decimal total_price = Count_quantity * Count_price;

                    string updateQuery = "update tbl_cart_sales set ProductQuantity='" + Count_quantity + "',total_price='" + total_price + "' where  ProductId='" + ProductId + "' and id='" + cartId + "'";
                    if (db.InsertUpdateDelete(updateQuery))
                    {
                        //getCart(customerid, ProductId + "");

                        //string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        //string hid = customerid.ToString();
                        activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(new { success = true, updatedValue = dateee });

        }
        public JsonResult GetProductprice(int ProductId,int ProductQty,string Ptype)
        {
            var dateee = "";
            string[] res1 = { };
            try
            {
                string Price = "";
                string squery = "select * from tbl_pro_price_circlar where Status='Active' and Id='" + ProductId + "' and PType='" + Ptype + "'";
                DataTable pdt = db.GetAllRecord(squery);
                if (pdt.Rows.Count>0)
                {
                    Double total_quantity = 1;
                    if (Ptype == "Plant")
                    {
                        total_quantity = Convert.ToDouble(ProductQty) * 10;

                        if (Convert.ToInt32(total_quantity) < 99 && Convert.ToInt32(total_quantity) > 0)
                        {
                            Price = pdt.Rows[0]["Offerprice"] + "";
                        }
                        else if (Convert.ToInt32(total_quantity) < 199 && Convert.ToInt32(total_quantity) > 99)
                        {
                            Price = pdt.Rows[0]["Sellprice"] + "";
                        }
                        else if (Convert.ToInt32(total_quantity) > 199)
                        {
                            Price = pdt.Rows[0]["Bulkprice"] + "";
                        }
                    }
                    else
                    {
                        total_quantity = ProductQty;
                        Price = pdt.Rows[0]["Sellprice"]+"";
                    }
                    int Count_quantity = Convert.ToInt32(ProductQty);
                    decimal Count_price = Convert.ToDecimal(Price);
                    decimal total_price = Count_quantity * Count_price;
                    double points= Convert.ToDouble(pdt.Rows[0]["Points"] + "")* Count_quantity;
                    var gg=GetOrderquantity(ProductId+"", total_quantity + "");
                    if (gg.Data == "Success")
                    {
                        res1 = new string[6] { "Success", Count_quantity + "", Count_price.ToString("0.00"), total_price.ToString("0.00"), total_quantity+"", points.ToString("0.0") };
                    }
                    else
                    {
                        res1 = new string[4] { "Failed", "", "", "" };
                    }
                    
                }
                else
                {
                    res1 = new string[4] { "Failed","", "", "" };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);

        }
        public void getCart(string customerid, string productid)
        {
            try
            {
                string query = "";
                if (productid != null && productid != "")
                {
                    query = "select * from tbl_cart_details where Customer_id='" + customerid + "' and ProductId='" + productid + "' and status='Add In Cart'";
                }
                else
                {
                    query = "select * from tbl_cart_details where Customer_id='" + customerid + "' and status='Add In Cart'";
                }
                DataTable seldt1 = db.GetAllRecord(query);
                if (seldt1.Rows.Count > 0)
                {
                    string sql = @"SELECT SUM(CAST(ProductQuantity AS INT)) AS totalQuantity
                FROM tbl_cart_details";
                    DataTable tbl = db.GetAllRecord(sql);
                    if (tbl.Rows.Count > 0)
                    {
                        Session["Card"] = tbl.Rows[0]["totalQuantity"].ToString();
                    }
                    else
                    {
                        Session["Card"] = null;
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
        }
        [HttpPost]
        public ActionResult ViewSelectedProduct(FormCollection form)
        {
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Checkout(string customerid, string proid, string leadid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
                ViewBag.productid = proid;
                ViewBag.leadid = leadid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Checkout()
        {
            string msg = "";
            try
            {
                var restableObject = Request.Form["restableObject"];
                var cname = Request.Form["cname"];
                var customerid = Request.Form["customerid"];
                var leadid = Request.Form["leadid"];
                var cnmailuid = Request.Form["cnmailuid"];
                var cnmobile = Request.Form["cnmobile"];
                var shippingaddr = Request.Form["shippingaddr"];
                var shippingpostal = Request.Form["shippingpostal"];
                var shippingblock = Request.Form["shippingblock"];
                var shippingtahsil = Request.Form["shippingtahsil"];
                var shippingdist = Request.Form["shippingdist"];
                var shippingstate = Request.Form["shippingstate"];
                var mail = Request.Form["mail"];
                var totalprice = Request.Form["totalprice"];
                var paymentmethod = Request.Form["paymentmethod"];
                var utrcheck = Request.Form["utrcheck"];
                var chequedate = Request.Form["chequedate"];
                //var payslip = Request.Files["payslip"];

                var loc = Request.Form["loc"];
                var latitude = Request.Form["latitude"];
                var longitude = Request.Form["longitude"];
                var fullshippingaddress = shippingaddr + "," + shippingblock + "," + shippingtahsil + "," + shippingdist + "," + shippingstate + "," + shippingpostal;
                //var paidamount = Request.Form["paidamount"];
                //string productxml = JsontoXML(restableObject);
                string upcusquery = "";
                //string payslippath = "";
                string cashamount = "0";
                //if (!Directory.Exists(Path.Combine(Server.MapPath("~/Content/PayslipUpload/"))))
                //    Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/PayslipUpload/")));

                //string path = Path.Combine(Server.MapPath("~/Content/PayslipUpload"), payslip.FileName);
                //payslip.SaveAs(path);
                //payslippath = "Content/PayslipUpload/" + payslip.FileName;
                //if (payslip != null)
                //{
                //    payslippath = APIs.PayslipUpload(payslip);
                //}
                //else
                //{
                //    cashamount = "0";
                //}
                if (cashamount == "")
                {
                    cashamount = "0";
                }
                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                string productxml = Encryption.ConvertDatatableTo_XML(dtres);
                //DataTable dtxml = encryption.ConvertXmlTo_Datatable(xmlstr);

                string Query34 = @"select * from tbl_customer where Customer_id='" + customerid + "'";
                string Full_address = "",Tahsil = "", Block = "", Address = "", State = "", City = "", Postal_code = "";
                DataTable tbll = db.GetAllRecord(Query34);
                if (tbll.Rows.Count > 0)
                {
                    if (tbll.Rows[0]["Status"] + "" == "Lead")
                    {
                         upcusquery = "update tbl_customer set Status='Active' where Customer_id='" + customerid + "'";
                    }
                    Full_address = tbll.Rows[0]["Full_address"] + "";
                    Tahsil = tbll.Rows[0]["Tahsil"] + "";
                    Block = tbll.Rows[0]["Block"] + "";
                    Address = tbll.Rows[0]["Address"] + "";
                    State = tbll.Rows[0]["State"] + "";
                    City = tbll.Rows[0]["City"] + "";
                    Postal_code = tbll.Rows[0]["Postal_code"] + "";
                }

                DateTime currentDate = DateTime.Now;

                string squery = "select Top(1) * from tbl_order_summary where logid = '"+ Session["userid"] + "'  order by id desc";
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    string datetime = sdt.Rows[0]["Datetime"] + "";
                    
                    string currenttime = DateTime.Now.ToString();
                    DateTime time = DateTime.Parse(DateTime.Parse(datetime).ToString());
                    // the time span in string format
                    DateTime checktime = time.AddMinutes(5);
                    DateTime sjhd = DateTime.Parse(checktime.ToString());
                    DateTime kkj = DateTime.Parse(currenttime);
                    if (sjhd < kkj)
                    {

                        // Extract the year and month from the current date
                        string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                        string orderid = "O" + currentYearmonth + "" + arandom(5);
                        string query = "INSERT INTO tbl_order_summary(Order_id,Product_xml,Customer_name,Customer_id,Customer_mobile,Customer_address,Pincode,Total_amount,Payment_method,Payment_upload,Payment_status,logid,logname,Datetime,Membertype,Orderby,Paid_amount,Utr_Check,[BranchName],[BranchCode])VALUES('" + orderid + "','" + productxml + "','" + cname + "','" + customerid + "','" + cnmobile + "','" + fullshippingaddress + "','" + Postal_code + "','" + totalprice + "','" + paymentmethod + "','','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','" + cashamount + "','" + utrcheck + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            if (dtres.Rows.Count > 0)
                            {
                                string transactionid = "t" + currentYearmonth + "" + arandom(5);
                                string order2 = "";
                                for (int i = 0; i < dtres.Rows.Count; i++)
                                {
                                    string Query = @"select * from [tbl_pro_price_circlar] where Id='" + dtres.Rows[i]["Product_Id"] + "' order by Id desc";
                                    DataTable dt = db.GetAllRecord(Query);
                                    if (dt.Rows.Count > 0)
                                    {
                                        string orderid2 = arandom(5) + i;

                                        string randomres = checkrandom(orderid2, order2);

                                        string orderid22 = randomres;

                                        string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + orderid + "','" + productxml + "','" + cname + "','" + customerid + "','" + cnmobile + "','" + fullshippingaddress + "','" + Postal_code + "','0','Active','','','0','Due','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + dtres.Rows[i]["Product_Img"] + "','" + dtres.Rows[i]["Product_Id"] + "','" + dtres.Rows[i]["Product"] + "','" + dtres.Rows[i]["Price"] + "','" + dtres.Rows[i]["Quantity"] + "','" + dtres.Rows[i]["Total"] + "','" + dtres.Rows[i]["Product_type"] + "','','','','" + orderid22 + "','" + dtres.Rows[i]["Points"] + "','" + Full_address + "','" + Tahsil + "','" + Block + "','" + Address + "','" + State + "','" + City + "')";
                                        if (db.InsertUpdateDelete(iquery))
                                        {
                                            order2 = orderid2;
                                            //string query1 = "update tbl_lead set Orderstatus='Done' where Customerid='" + customerid + "'";
                                            //db.InsertUpdateDelete(query1);
                                            msg = "Success";
                                        }
                                        else
                                        {
                                            msg = "Fail";
                                        }
                                    }
                                }

                                string tquery = "INSERT INTO [dbo].[tbl_order_transaction]([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip,Payment_method,Utr_Check,checkdate) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + customerid + "','" + orderid + "','0','0','0','" + transactionid + "','" + Session["userid"] + "','Due','Requested','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','','" + paymentmethod + "','" + utrcheck + "','" + chequedate + "')";
                                db.InsertUpdateDelete(tquery);





                                // Create a JObject to store data
                                JObject jsonObject = new JObject();
                                jsonObject["Location"] = loc.Replace("'", "");
                                jsonObject["Latitude"] = latitude;
                                jsonObject["Longitude"] = longitude;

                                // Convert JObject to JSON string
                                string jsonlocation = jsonObject.ToString();

                                string res = "";
                                string querylead = "";
                                string hid = Session["support"] + "";
                                string nextstatus = "Close";
                                string Status = "Done";
                                JObject jsonObject1 = new JObject();
                                jsonObject1["Productdetail"] = productxml;
                                // Convert JObject to JSON string
                                string jsondata1 = jsonObject1.ToString();

                                string query1 = "SELECT * FROM tbl_customer  WHERE Customer_id = '" + customerid + "'";
                                activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                DataTable dtlead = db.GetAllRecord(query1);
                                activitylog.Activitylogupd("Success", "");
                                if (dtlead.Rows.Count > 0)
                                {
                                    if (hid == "Yes")
                                    {
                                        querylead = "Update [tbl_leadnew] Set [Customerid]='" + customerid + "' ,[Name]='" + dtlead.Rows[0]["Name"] + "' ,[Mobile]='" + dtlead.Rows[0]["Mobile"] + "' ,[Email]='" + dtlead.Rows[0]["Email"] + "' ,[Statename]='" + dtlead.Rows[0]["State"] + "' ,[Cityname]='" + dtlead.Rows[0]["City"] + "' ,[Address]='" + dtlead.Rows[0]["Full_address"] + "' ,[Pincode]='" + dtlead.Rows[0]["Postal_code"] + "' ,[Occupation]='' ,[Land_Irrigation]='' ,[Taken_time]='' ,[Lead_status]='" + Status + "',Nextstatus='" + nextstatus + "',[Status]='Active' ,[BranchName]='" + Session["ubrname"] + "' ,[BranchCode]='" + Session["ubrcode"] + "' ,[Logid]='" + Session["userid"] + "' ,[Logname]='" + Session["username"] + "' ,[releavedatetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',XML='" + jsondata1 + "',OrderDetails='' where id='" + Session["Rowid"] + "'";


                                    }
                                    else
                                    {
                                        querylead = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,OrderDetails) VALUES('" + leadid + "','" + customerid + "','" + dtlead.Rows[0]["Name"] + "','" + dtlead.Rows[0]["Mobile"] + "','" + dtlead.Rows[0]["Email"] + "','" + dtlead.Rows[0]["State"] + "','" + dtlead.Rows[0]["City"] + "','" + dtlead.Rows[0]["Full_address"] + "','" + dtlead.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','No','" + jsonlocation + "','','','','','','','Order','" + Status + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + nextstatus + "','')";

                                    }

                                    if (db.InsertUpdateDelete(querylead))
                                    {
                                        msg = "Success";
                                        Session["Rowid"] = "";
                                        Session["support"] = "";
                                        Session["Leadid"] = "";
                                        if (tbll.Rows[0]["Status"] + "" == "Lead")
                                        {
                                            db.InsertUpdateDelete(upcusquery);
                                        }

                                    }
                                    else
                                    {
                                        activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    }
                                }
                                else
                                {

                                }

                            }
                            else
                            {
                                msg = "";
                            }

                            string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                            Messaging.SendSMSNew(cnmobile, replacementValues, "Booking Message", cname, Session["userid"] + "", Session["username"] + "");
                            //Messaging.SendWhatsappSMSNew(cnmobile, replacementValues, "Booking Message", cname, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                            Messaging.SendWhatsappSMSNew1(cnmobile, "booking_message1", cname, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);
                        }
                    }
                    else
                    {
                        msg = "Your Preious order is already in Process Please wait "+ checktime.Subtract(DateTime.Parse(currenttime)) +" min";
                    }
                }
                else
                {

                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                    string orderid = "O" + currentYearmonth + "" + arandom(5);
                    string query = "INSERT INTO tbl_order_summary(Order_id,Product_xml,Customer_name,Customer_id,Customer_mobile,Customer_address,Pincode,Total_amount,Payment_method,Payment_upload,Payment_status,logid,logname,Datetime,Membertype,Orderby,Paid_amount,Utr_Check,[BranchName],[BranchCode])VALUES('" + orderid + "','" + productxml + "','" + cname + "','" + customerid + "','" + cnmobile + "','" + fullshippingaddress + "','" + Postal_code + "','" + totalprice + "','" + paymentmethod + "','','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','" + cashamount + "','" + utrcheck + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        if (dtres.Rows.Count > 0)
                        {
                            string transactionid = "t" + currentYearmonth + "" + arandom(5);
                            string order2 = "";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                string Query = @"select * from [tbl_pro_price_circlar] where Id='" + dtres.Rows[i]["Product_Id"] + "' order by Id desc";
                                DataTable dt = db.GetAllRecord(Query);
                                if (dt.Rows.Count > 0)
                                {
                                    string orderid2 = arandom(5) + i;

                                    string randomres = checkrandom(orderid2, order2);

                                    string orderid22 = randomres;

                                    string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + orderid + "','" + productxml + "','" + cname + "','" + customerid + "','" + cnmobile + "','" + fullshippingaddress + "','" + Postal_code + "','0','Active','','','0','Due','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + dtres.Rows[i]["Product_Img"] + "','" + dtres.Rows[i]["Product_Id"] + "','" + dtres.Rows[i]["Product"] + "','" + dtres.Rows[i]["Price"] + "','" + dtres.Rows[i]["Quantity"] + "','" + dtres.Rows[i]["Total"] + "','" + dtres.Rows[i]["Product_type"] + "','','','','" + orderid22 + "','" + dtres.Rows[i]["Points"] + "','" + Full_address + "','" + Tahsil + "','" + Block + "','" + Address + "','" + State + "','" + City + "')";
                                    if (db.InsertUpdateDelete(iquery))
                                    {
                                        order2 = orderid2;
                                        //string query1 = "update tbl_lead set Orderstatus='Done' where Customerid='" + customerid + "'";
                                        //db.InsertUpdateDelete(query1);
                                        msg = "Success";
                                    }
                                    else
                                    {
                                        msg = "Fail";
                                    }
                                }
                            }

                            string tquery = "INSERT INTO [dbo].[tbl_order_transaction]([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip,Payment_method,Utr_Check,checkdate) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + customerid + "','" + orderid + "','0','0','0','" + transactionid + "','" + Session["userid"] + "','Due','Requested','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','','" + paymentmethod + "','" + utrcheck + "','" + chequedate + "')";
                            db.InsertUpdateDelete(tquery);





                            // Create a JObject to store data
                            JObject jsonObject = new JObject();
                            jsonObject["Location"] = loc.Replace("'", "");
                            jsonObject["Latitude"] = latitude;
                            jsonObject["Longitude"] = longitude;

                            // Convert JObject to JSON string
                            string jsonlocation = jsonObject.ToString();

                            string res = "";
                            string querylead = "";
                            string hid = Session["support"] + "";
                            string nextstatus = "Close";
                            string Status = "Done";
                            JObject jsonObject1 = new JObject();
                            jsonObject1["Productdetail"] = productxml;
                            // Convert JObject to JSON string
                            string jsondata1 = jsonObject1.ToString();

                            string query1 = "SELECT * FROM tbl_customer  WHERE Customer_id = '" + customerid + "'";
                            activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            DataTable dtlead = db.GetAllRecord(query1);
                            activitylog.Activitylogupd("Success", "");
                            if (dtlead.Rows.Count > 0)
                            {
                                if (hid == "Yes")
                                {
                                    querylead = "Update [tbl_leadnew] Set [Customerid]='" + customerid + "' ,[Name]='" + dtlead.Rows[0]["Name"] + "' ,[Mobile]='" + dtlead.Rows[0]["Mobile"] + "' ,[Email]='" + dtlead.Rows[0]["Email"] + "' ,[Statename]='" + dtlead.Rows[0]["State"] + "' ,[Cityname]='" + dtlead.Rows[0]["City"] + "' ,[Address]='" + dtlead.Rows[0]["Full_address"] + "' ,[Pincode]='" + dtlead.Rows[0]["Postal_code"] + "' ,[Occupation]='' ,[Land_Irrigation]='' ,[Taken_time]='' ,[Lead_status]='" + Status + "',Nextstatus='" + nextstatus + "',[Status]='Active' ,[BranchName]='" + Session["ubrname"] + "' ,[BranchCode]='" + Session["ubrcode"] + "' ,[Logid]='" + Session["userid"] + "' ,[Logname]='" + Session["username"] + "' ,[releavedatetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',XML='" + jsondata1 + "',OrderDetails='' where id='" + Session["Rowid"] + "'";


                                }
                                else
                                {
                                    querylead = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,OrderDetails) VALUES('" + leadid + "','" + customerid + "','" + dtlead.Rows[0]["Name"] + "','" + dtlead.Rows[0]["Mobile"] + "','" + dtlead.Rows[0]["Email"] + "','" + dtlead.Rows[0]["State"] + "','" + dtlead.Rows[0]["City"] + "','" + dtlead.Rows[0]["Full_address"] + "','" + dtlead.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','No','" + jsonlocation + "','','','','','','','Order','" + Status + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + nextstatus + "','')";

                                }

                                if (db.InsertUpdateDelete(querylead))
                                {
                                    msg = "Success";
                                    Session["Rowid"] = "";
                                    Session["support"] = "";
                                    Session["Leadid"] = "";
                                    if (tbll.Rows[0]["Status"] + "" == "Lead")
                                    {
                                        db.InsertUpdateDelete(upcusquery);
                                    }

                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                }
                            }
                            else
                            {

                            }

                        }
                        else
                        {
                            msg = "";
                        }

                        string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                        Messaging.SendSMSNew(cnmobile, replacementValues, "Booking Message", cname, Session["userid"] + "", Session["username"] + "");
                        //Messaging.SendWhatsappSMSNew(cnmobile, replacementValues, "Booking Message", cname, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                        Messaging.SendWhatsappSMSNew1(cnmobile, "booking_message1", cname, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        //[HttpPost]
        //public ActionResult Checkout(FormCollection form)
        //{
        //    try
        //    {
        //        var restableObject = Request.Form["restableObject"];
        //        var cname = Request.Form["cname"];
        //        var customerid = Request.Form["customerid"];
        //        var leadid = Request.Form["leadid"];
        //        var cnmailuid = Request.Form["cnmailuid"];
        //        var cnmobile = Request.Form["cnmobile"];
        //        var shippingaddr = Request.Form["shippingaddr"];
        //        var shippingpostal = Request.Form["shippingpostal"];
        //        var mail = Request.Form["mail"];
        //        var totalprice = Request.Form["totalprice"];
        //        var paymentmethod = Request.Form["paymentmethod"];
        //        var payslip = Request.Files["payslip"];
        //        //string productxml = JsontoXML(restableObject);

        //        Encryption encryption = new Encryption();
        //        DataTable dtres=encryption.ConvertJSONToDataTable(restableObject);
        //        string productxml = encryption.ConvertDatatableTo_XML(dtres);
        //        //DataTable dtxml = encryption.ConvertXmlTo_Datatable(xmlstr);

        //        string payslippath = "";
        //        string path = Path.Combine(Server.MapPath("~/Content/PayslipUpload"), payslip.FileName);
        //        payslip.SaveAs(path);
        //        payslippath = "Content/PayslipUpload/" + payslip.FileName;

        //        DateTime currentDate = DateTime.Now;
        //        // Extract the year and month from the current date
        //        string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
        //        string orderid = "O" + currentYearmonth + "" + arandom(5);
        //        string query = "INSERT INTO tbl_order(Order_id,Product_xml,Customer_name,Customer_id,Customer_mobile,Customer_address,Pincode,Total_amount,Order_status,Payment_method,Payment_upload,Payment_status,logid,logname,Datetime,Membertype,Orderby)VALUES('" + orderid + "','" + productxml + "','" + cname + "','" + customerid + "','" + cnmobile + "','" + shippingaddr + "','" + shippingpostal + "','" + totalprice + "','Active','" + paymentmethod + "','" + payslippath + "','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")')";
        //        if (db.InsertUpdateDelete(query))
        //        {

        //            string query1 = "update tbl_lead set Orderstatus='Done' where Customerid='" + customerid + "'";
        //            db.InsertUpdateDelete(query1);
        //            return Content("Success");
        //        }
        //        else
        //        {
        //            return Content("Fail");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        try
        //        {
        //            Error_15_16 error_15_16 = new Error_15_16();
        //            string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
        //            // Get the page URL, if available
        //            pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
        //            // Get the module name
        //            moduleName = ex.TargetSite.Module.Name;
        //            // Get the error line number, if available
        //            var stackTrace = ex.StackTrace;
        //            if (!string.IsNullOrEmpty(stackTrace))
        //            {
        //                var lineNumberIndex = stackTrace.LastIndexOf(":line ");
        //                if (lineNumberIndex >= 0)
        //                {
        //                    var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
        //                    var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
        //                    if (newLineIndex >= 0)
        //                    {
        //                        errorLine = lineNumber.Substring(0, newLineIndex);
        //                    }
        //                    else
        //                    {
        //                        errorLine = lineNumber;
        //                    }
        //                }
        //            }
        //            // Get the error message and name
        //            if (ex.Message.ToString().Length >= 1000)
        //            {
        //                errorMessage = ex.Message.Substring(1, 500);
        //            }
        //            else
        //            {
        //                errorMessage = ex.Message;
        //            }
        //            errorName = ex.GetType().FullName;
        //            // Get the error trace
        //            errorTrace = ex.StackTrace;
        //            error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
        //        }

        //        catch
        //        {

        //        }
        //        return Content("Error");
        //    }
        //    finally
        //    {
        //        db.connectionstate();
        //    }
        //}
        private string checkrandom(string orderid22, string order2)
        {
            if(order2== orderid22)
            {
                string orderid2 = arandom(6);
                checkrandom(orderid2, order2);
            }
            else
            {
                
            }
            return orderid22;
        }
        public JsonResult GetStatedetail(string State)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_state where Statecode='" + State + "'";
                activitylog.Activitylogins("tbl_state", State, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Statecode = dt.Rows[0]["Statecode"] + "";
                    string Statename = dt.Rows[0]["Statename"] + "";

                    res = new string[2] { Statecode, Statename };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetCitydetail(string City)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_city where Id='" + City + "'";
                activitylog.Activitylogins("tbl_city", City, query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Citycode = dt.Rows[0]["Id"] + "";
                    string Cityname = dt.Rows[0]["Cityname"] + "";

                    res = new string[2] { Citycode, Cityname };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetCity(string State)
        {
            string res = "";
            try
            {
                res = "<option selected disabled value=''>Select one</option>";
                string query = "select * from tbl_city where Statecode='" + State + "'";
                activitylog.Activitylogins("tbl_city", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        res += "<option value='" + dt.Rows[i]["Id"] + "'>" + dt.Rows[i]["Cityname"] + "</option>";
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Customer()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Customer(FormCollection form)
        {
            //try
            //{
            //    string fileName = ""; string str = "", str2 = ""; string fpth = ""; string qrpth = "";
            //    string acode = Session["userid"] + "";
            //    string aname = Session["username"] + "";
            //    GenQRCode qr = new GenQRCode();

            //    string hid = form["hid"];

            //    if (hid != null && hid != "")
            //    {

            //    }
            //    else
            //    {
            //        string customerid = "C_" + random(5);
            //        string query1 = "SELECT * FROM tbl_customer WHERE (Customer_id='" + customerid + "' OR Mobile='" + form["mobile"] + "' OR Email='" + form["email"] + "')";
            //        activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //        DataTable dt = db.GetAllRecord(query1);
            //        activitylog.Activitylogupd("Success", "");
            //        string query2 = "SELECT * FROM tbl_login WHERE Emailid='" + form["mail"] + "' OR Mobile='" + form["mobile"] + "'";
            //        activitylog.Activitylogins("tbl_login", "", query2, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //        DataTable dt2 = db.GetAllRecord(query2);
            //        activitylog.Activitylogupd("Success", "");
            //        if (dt.Rows.Count > 0)
            //        {
            //            for (int i = 0; i < dt.Rows.Count; i++)
            //            {
            //                str += dt.Rows[i]["Email"] + ",";
            //                str += dt.Rows[i]["Customer_id"] + ",";
            //                str += dt.Rows[i]["Mobile"] + ",";
            //            }
            //            string[] strArray = str.Split(',');

            //            if (strArray.Contains(form["mail"]) && strArray.Contains(form["mobile"]) && strArray.Contains(customerid))
            //            {
            //                ViewBag.msg = "Customer id, Email, Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(form["mobile"]) && strArray.Contains(customerid))
            //            {
            //                ViewBag.msg = "Customer id, Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(form["mail"]) && strArray.Contains(customerid))
            //            {
            //                ViewBag.msg = "Customer id, Email Already Exist";
            //            }
            //            else if (strArray.Contains(form["mail"]) && strArray.Contains(form["mobile"]))
            //            {
            //                ViewBag.msg = "Email, Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(customerid))
            //            {
            //                ViewBag.msg = "Customer id Already Exist";
            //            }
            //            else if (strArray.Contains(form["mobile"]))
            //            {
            //                ViewBag.msg = "Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(form["mail"]))
            //            {
            //                ViewBag.msg = "Email Already Exist";
            //            }
            //        }
            //        else if (dt2.Rows.Count > 0)
            //        {
            //            for (int i = 0; i < dt.Rows.Count; i++)
            //            {
            //                str2 += dt2.Rows[i]["Email"] + ",";
            //                str2 += dt2.Rows[i]["Mobile"] + ",";
            //            }
            //            string[] strArray = str.Split(',');

            //            if (strArray.Contains(form["mail"]) && strArray.Contains(form["mobile"]))
            //            {
            //                ViewBag.msg = "Email, Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(form["mobile"]))
            //            {
            //                ViewBag.msg = "Mobile Already Exist";
            //            }
            //            else if (strArray.Contains(form["mail"]))
            //            {
            //                ViewBag.msg = "Email Already Exist";
            //            }
            //        }
            //        else
            //        {
            //            string pass = random(5);
            //            string bodytext = "Welcome To 'GROWFAST ORGANIC DIAMOND', dear " + form["name"] + ", your Registration has been Successfully.Your Loginid is : Email = " + form["email"] + " or Mobile : " + form["mobile"] + " and Password is : " + pass + ". To Login This Portal <a href='http://growfastgroups.com/'> Click Here </a>";

            //            string query = "insert into tbl_customer(Customer_id ,Name ,Mobile ,Email ,Password ,Address ,State ,City ,Postal_code ,Profile_pic ,Status,Datetime,Log_ID ,Log_name ,Log_Email) values('" + customerid + "','" + form["name"] + "','" + form["mobile"] + "','" + form["email"] + "','" + pass + "','" + form["address"] + "','" + form["state"] + "','" + form["city"] + "','" + form["postal_code"] + "','pic','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"].ToString() + "', '" + Session["username"].ToString() + "', '" + Session["usermail"].ToString() + "')";

            //            string lquery = "insert into tbl_login(Username,Userid,Emailid,Mobile,Password,Type,Status,Datetime,OTP_Time) values('" + form["name"] + "','" + customerid + "','" + form["email"] + "','" + form["mobile"] + "','" + pass + "','customer','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("HH:mm:ss") + "')";

            //            if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(lquery))
            //            {
            //                activitylog.Activitylogins("tbl_customer", db.getmaxid("tbl_customer").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //                activitylog.Activitylogins("tbl_login", db.getmaxid("tbl_login").ToString(), lquery, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

            //                //sendmail.SendMailEmployee(acode, form["mail"], "Registration Successfully", bodytext);

            //                ViewBag.AlertMessage = customerid + " Registration Success";
            //            }
            //            else
            //            {
            //                activitylog.Activitylogins("tbl_customer", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //                activitylog.Activitylogins("tbl_login", "", lquery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //                ViewBag.AlertMessage = customerid + " Registration Failed";
            //            }
            //        }

            //    }
            //}
            //catch (Exception ex)
            //{
            //    try
            //    {
            //        Error_15_16 error_15_16 = new Error_15_16();
            //        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
            //        // Get the page URL, if available
            //        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
            //        // Get the module name
            //        moduleName = ex.TargetSite.Module.Name;
            //        // Get the error line number, if available
            //        var stackTrace = ex.StackTrace;
            //        if (!string.IsNullOrEmpty(stackTrace))
            //        {
            //            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
            //            if (lineNumberIndex >= 0)
            //            {
            //                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
            //                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
            //                if (newLineIndex >= 0)
            //                {
            //                    errorLine = lineNumber.Substring(0, newLineIndex);
            //                }
            //                else
            //                {
            //                    errorLine = lineNumber;
            //                }
            //            }
            //        }
            //        // Get the error message and name
            //        if (ex.Message.ToString().Length >= 1000)
            //        {
            //            errorMessage = ex.Message.Substring(1, 500);
            //        }
            //        else
            //        {
            //            errorMessage = ex.Message;
            //        }
            //        errorName = ex.GetType().FullName;
            //        // Get the error trace
            //        errorTrace = ex.StackTrace;
            //        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //    }

            //    catch
            //    {

            //    }
            //    ViewBag.msg = "Error";
            //}
            //finally
            //{
            //    db.connectionstate();
            //}

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SearchCustomer(string m)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.mobile = m;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Products()
        {
            List<productCls> products = new List<productCls>();
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

                try
                {
                    products = GetAll_Products();
                }
                catch (Exception ex)
                { }

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View(products);
        }
        private List<productCls> GetAll_Products_old()
        {
            List<productCls> productsList = new List<productCls>();

            try
            {
                string Query = @"select [Id],[Ptype],[Name],[Description],CAST(price AS DECIMAL(18, 2)) AS price
      ,[Discount],[TaxPercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname], CAST([Baserice] AS DECIMAL(18, 2)) AS[Baserice],
	  [BranchName],[BranchCode] from[tbl_product] where Status='Active' and BranchCode='" + Session["ubrcode"] + "' order by Id desc";

                DataTable dt = db.GetAllRecord(Query);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        productCls products = new productCls
                        {

                            ID = Convert.ToString(row["Id"]),
                            Ptype = Convert.ToString(row["Ptype"]),
                            Name = Convert.ToString(row["Name"]),
                            Description = Convert.ToString(row["Description"]),
                            Price = Convert.ToString(row["Price"]),
                            Discount = Convert.ToString(row["Discount"]),
                            TaxPercent = Convert.ToString(row["TaxPercent"]),
                            Pimage = "~/" + Convert.ToString(row["Pimage"]),
                            ProductCategory = Convert.ToString(row["ProductCategory"]),
                            Baserice = Convert.ToString(row["Baserice"]),
                        };

                        productsList.Add(products);
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return productsList;
        }
        private List<productCls> GetAll_Products_old(string category)
        {
            List<productCls> productsList = new List<productCls>();

            try
            {
                string Query = "";
                if (category != null && category != "")
                {
                    Query = @"select [Id],[Ptype],[Name],[Description],CAST(price AS DECIMAL(18, 2)) AS price
      ,[Discount],[TaxPercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname], CAST([Baserice] AS DECIMAL(18, 2)) AS[Baserice],
	  [BranchName],[BranchCode] from[tbl_product] where Status='Active' and ProductCategory='" + category + "' and BranchCode='" + Session["ubrcode"] + "' order by Id desc";
                }
                else
                {
                    Query = @"select [Id],[Ptype],[Name],[Description],CAST(price AS DECIMAL(18, 2)) AS price
      ,[Discount],[TaxPercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname], CAST([Baserice] AS DECIMAL(18, 2)) AS[Baserice],
	  [BranchName],[BranchCode] from[tbl_product] where Status='Active' and BranchCode='" + Session["ubrcode"] + "' order by Id desc";
                }

                DataTable dt = db.GetAllRecord(Query);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        productCls products = new productCls
                        {

                            ID = Convert.ToString(row["Id"]),
                            Ptype = Convert.ToString(row["Ptype"]),
                            Name = Convert.ToString(row["Name"]),
                            Description = Convert.ToString(row["Description"]),
                            Price = Convert.ToString(row["Price"]),
                            Discount = Convert.ToString(row["Discount"]),
                            TaxPercent = Convert.ToString(row["TaxPercent"]),
                            Pimage = "~/" + Convert.ToString(row["Pimage"]),
                            ProductCategory = Convert.ToString(row["ProductCategory"]),
                            Baserice = Convert.ToString(row["Baserice"]),
                        };

                        productsList.Add(products);
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return productsList;
        }
        private List<productCls> GetAll_Products()
        {
            List<productCls> productsList = new List<productCls>();

            try
            {
                string Query= @"select [Id],[Ptype],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname], CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar] where Status='Active'' and PType='" + Session["typeproduct"] + "' order by Id desc";

                DataTable dt = db.GetAllRecord(Query);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        productCls products = new productCls
                        {

                            ID = Convert.ToString(row["Id"]),
                            Ptype = Convert.ToString(row["Ptype"]),
                            Name = Convert.ToString(row["Productname"]),
                            Description = Convert.ToString(row["Description"]),
                            Price = Convert.ToString(row["Sellprice"]),
                            Discount = Convert.ToString(row["Discountpercent"]),
                            //TaxPercent = Convert.ToString(row["TaxPercent"]),
                            Pimage = "~/" + Convert.ToString(row["Pimage"]),
                            ProductCategory = Convert.ToString(row["ProductCategory"]),
                            Baserice = Convert.ToString(row["Offerprice"]),
                        };

                        productsList.Add(products);
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return productsList;
        }
        private List<productCls> GetAll_Products(string category,string proid)
        {
            List<productCls> productsList = new List<productCls>();

            try
            {
                string Query = "";
                if (category != null && category != "" && proid != null && proid != "")
                {
                    Query = @"select [Id],[Brand],[Ptype],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname],packaging_material, CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar] where Status='Active' and (ProductCategory='" + category + "' or proid='" + proid + "')' and PType='" + Session["typeproduct"] + "' order by Id desc";
                }
                else if (category != null && category != "")
                {
                    Query = @"select [Id],[Brand],[Ptype],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname],packaging_material, CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar] where Status='Active' and ProductCategory='" + category + "' and PType='" + Session["typeproduct"] + "' order by Id desc";
                }
                else if (proid != null && proid != "")
                {
                    Query = @"select [Id],[Brand],[Ptype],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname],packaging_material, CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar] where Status='Active' and proid='" + proid + "' and PType='" + Session["typeproduct"] + "' order by Id desc";
                }
                else
                {
                    Query = @"select [Id],[Brand],[Ptype],[Productname],[Description],CAST(Sellprice AS DECIMAL(18, 2)) AS Sellprice
      ,[Discountpercent],[Pimage],[Oimage],[ProductCategory],[Status]
      ,[Datetime],[logid],[logname],packaging_material, CAST([Offerprice] AS DECIMAL(18, 2)) AS[Offerprice] from[tbl_pro_price_circlar] where Status='Active' and PType='" + Session["typeproduct"] + "'  order by Id desc";
                }

                DataTable dt = db.GetAllRecord(Query);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        productCls products = new productCls
                        {

                            ID = Convert.ToString(row["Id"]),
                            Ptype = Convert.ToString(row["Ptype"]),
                            Name = Convert.ToString(row["Productname"]),
                            Description = Convert.ToString(row["Description"]),
                            Price = Convert.ToString(row["Sellprice"]),
                            Discount = Convert.ToString(row["Discountpercent"]),
                            //TaxPercent = Convert.ToString(row["TaxPercent"]),
                            Pimage = URL.ApiURL()+"" +Convert.ToString(row["Pimage"]),
                            ProductCategory = Convert.ToString(row["ProductCategory"]),
                            Brand = Convert.ToString(row["Brand"]),
                            Baserice = Convert.ToString(row["Offerprice"]),
                            packaging_material = Convert.ToString(row["packaging_material"]),
                        };

                        productsList.Add(products);
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return productsList;
        }
        public JsonResult AddToCarts(string productId, string PName, string Price)
        {
            try
            {
                //string payslippath = "";

                //if (!Directory.Exists(Path.Combine(Server.MapPath("~/Content/PayslipUpload/"))))
                //Directory.CreateDirectory(Path.Combine(Server.MapPath("~/Content/PayslipUpload/")));

                decimal Price_p = 0;
                if (!string.IsNullOrEmpty(Price.ToString()))
                {
                    Price_p = Convert.ToDecimal(Price);
                }
                else
                {
                    Price_p = 0;
                }
                List<productCls> ShoppingCart = new List<productCls>();
                try
                {
                    string selquery = @"select [id],[ProductId],[ProductName]
      ,[ProductQuantity],[status],[Datetime],[logid],[logname]
      , CAST(price AS DECIMAL(18, 2)) AS price
       , CAST([total_price] AS DECIMAL(18, 2)) AS[total_price]

      from[tbl_cart_sales] where logid='" + Session["userid"] + "' and status='Add In Cart' and ProductId='" + productId + "'";
                    DataTable seldt = db.GetAllRecord(selquery);
                    if (seldt.Rows.Count > 0)
                    {
                        int Count_quantity = Convert.ToInt32(seldt.Rows[0]["ProductQuantity"]);
                        int total = Count_quantity + 1;

                        decimal Count_price = Convert.ToDecimal(seldt.Rows[0]["Price"]);
                        decimal total_price = Count_price + Price_p;

                        string updateQuery = "update tbl_cart_sales set ProductQuantity='" + total + "',total_price='" + total_price + "' where logid='" + Session["userid"] + "' and ProductId='" + productId + "' and id='" + seldt.Rows[0]["id"].ToString() + "'";
                        if (db.InsertUpdateDelete(updateQuery))
                        {

                            activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Updated";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_cart_sales", "", updateQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Failed";
                        }
                    }
                    else
                    {
                        decimal totalPrice = 1 * Price_p;
                        string insertQuery = "insert into tbl_cart_sales(ProductId,ProductName,ProductQuantity,status,[Datetime],[logid],[logname],price,total_price) values('" + productId + "','" + PName + "','1','Add In Cart','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + Price + "','" + totalPrice + "')";

                        if (db.InsertUpdateDelete(insertQuery))
                        {
                            activitylog.Activitylogins("tbl_cart_sales", "", insertQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Inserted";
                        }
                        else
                        {

                            activitylog.Activitylogins("tbl_cart_sales", "", insertQuery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Failed";
                        }
                    }

                }
                catch (Exception ex)
                {
                    try
                    {
                        Error_15_16 error_15_16 = new Error_15_16();
                        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                        // Get the page URL, if available
                        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                        // Get the module name
                        moduleName = ex.TargetSite.Module.Name;
                        // Get the error line number, if available
                        var stackTrace = ex.StackTrace;
                        if (!string.IsNullOrEmpty(stackTrace))
                        {
                            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                            if (lineNumberIndex >= 0)
                            {
                                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                                if (newLineIndex >= 0)
                                {
                                    errorLine = lineNumber.Substring(0, newLineIndex);
                                }
                                else
                                {
                                    errorLine = lineNumber;
                                }
                            }
                        }
                        // Get the error message and name
                        if (ex.Message.ToString().Length >= 1000)
                        {
                            errorMessage = ex.Message.Substring(1, 500);
                        }
                        else
                        {
                            errorMessage = ex.Message;
                        }
                        errorName = ex.GetType().FullName;
                        // Get the error trace
                        errorTrace = ex.StackTrace;
                        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    }

                    catch
                    {

                    }
                    ViewBag.msg = "Error";
                }
                finally
                {
                    db.connectionstate();
                }
            }
            catch (Exception ex)
            { }

            return Json("added", JsonRequestBehavior.AllowGet);
        }
        public JsonResult DeletefromCart(string Customerid, int ProductId, int cartId)
        {
            string msg = "";
            try
            {
                string deleteQuery = "delete from tbl_cart_details where id='" + cartId + "' and ProductId='" + ProductId + "' and Customer_id='" + Customerid + "'";
                if (db.InsertUpdateDelete(deleteQuery))
                {
                    string hid = Customerid;
                    activitylog.Activitylogins("tbl_cart_details", hid, deleteQuery, "Success", "Delete Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    msg = "Data Deleted";
                }
                else
                {
                    string hid = Customerid;
                    activitylog.Activitylogins("tbl_cart_details", hid, deleteQuery, "Success", "Delete Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    msg = "Data Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ViewProductS(string proid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.productid = proid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult OrderProduct(string customerid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.customerid = customerid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult OrderProductS(string proid)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.productid = proid;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult MyOrders()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult MyOrders(FormCollection form, HttpPostedFileBase payslip,string customerid,string orderid,string payment,string utrcheck)
        {
            try
            {
                string query = "";
                string hid = form["hid"];

                if (hid != null && hid != "")
                {
                    //string pthpatslip = APIs.PayslipUpload(payslip);
                    DateTime currentDate = DateTime.Now;
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                    string transactionid = "t" + currentYearmonth + "" + arandom(5);

                    string tquery = "INSERT INTO [dbo].[tbl_order_transaction]([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip,Payment_method,Utr_Check,checkdate) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + customerid + "','" + orderid + "','0','0','0','" + transactionid + "','" + Session["userid"] + "','Due','Requested','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','','"+ payment + "','" + utrcheck + "','"+ form["chequedate"] + "')";
                    
                    if (db.InsertUpdateDelete(tquery))
                    {
                        activitylog.Activitylogins("tbl_order_transaction", form["hid"], query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Payment Success wait for Confirmation";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_order_transaction", form["hid"], query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        ViewBag.msg = "Failed";
                    }
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        public JsonResult LoadMore(string from, string tablename,string Searchby,string Buttontype,string Searchid)
             {
            string res = "", data1 = "";
            try
            {
                string query = "";
                
                if (!string.IsNullOrEmpty(Searchby))
                {
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
                    {
                        query = "SELECT * FROM " + tablename + " where (Mobile='" + Searchby + "' or Name LIKE '%" + Searchby + "%') and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'  and Log_ID='" + Session["userid"] + "'  and Status in ('Active','Lead')  ORDER BY Id DESC";
                    }
                    else
                    {
                        //query = "SELECT * FROM " + tablename + " where (Mobile='" + Searchby + "' or Name LIKE '%" + Searchby + "%') and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' " + subquery + "  and Status='Active'  ORDER BY Id DESC";
                        query = "SELECT * FROM " + tablename + " where (Mobile='" + Searchby + "' or Name LIKE '%" + Searchby + "%') and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'  and Log_ID='" + Session["userid"] + "'  and Status in ('Active','Lead')  ORDER BY Id DESC";
                    }
                    
                }
                else
                {
                    if (Buttontype == "btnload")
                    {
                        if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
                        {
                            query = "SELECT TOP 5 * FROM " + tablename + " where Id<'" + from + "' and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'   and Status in ('Active','Lead')  ORDER BY Id DESC";
                        }
                        else
                        {
                                //query = "SELECT TOP 5 * FROM " + tablename + " where Id<'" + from + "' and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'  " + subquery + "   and Status='Active'  ORDER BY Id DESC";
                                query = "SELECT TOP 5 * FROM " + tablename + " where Id<'" + from + "' and RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'   and Status in ('Active','Lead')  ORDER BY Id DESC";
                            }
                        
                    }
                    else
                    {
                        if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
                        {
                            query = "SELECT TOP 5 * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status in ('Active','Lead') ORDER BY Id DESC";
                        }
                        else
                        {
                            //query = "SELECT TOP 5 * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'  " + subquery + "   and Status='Active' ORDER BY Id DESC";
                            query = "SELECT TOP 5 * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status in ('Active','Lead') ORDER BY Id DESC";
                        }
                        
                    }
                }
                DataTable dt = db.GetAllRecord(query);

                res = JsonConvert.SerializeObject(dt, formatting: Formatting.None);

            }
            catch (Exception ex)
            { }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetOrder(string Orderid)
        {
            string res = "", data1 = "";
            try
            {
                string query = "select * from tbl_order where Order_id='" + Orderid + "' and Status='Active' ORDER BY Id DESC";
                //string query = "select Id,Title,Video_poster_img,Vid_formate,Datetime,Views,Likes,Description,Video_url from tbl_content where Id<'" + from + "' and Category='" + Category + "' ORDER BY Id DESC  LIMIT 5";
                DataTable dt = db.GetAllRecord(query);

                res = JsonConvert.SerializeObject(dt, formatting: Formatting.None);

            }
            catch (Exception ex)
            { }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetMyOrder(string month, string year,string searchby, string status)
        {

            string res = "";
            string Query = "";
            string subs = "";
            if (status != "" && status != null)
            {
                subs = " and Payment_status='" + status + "'";
            }
            string subquery = "";
            string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + month + "-" + year + "' ";
            DataTable dt1 = db.GetAllRecord(query1);
            if (dt1.Rows.Count > 0)
            {
                //for (int i = 0; i < dt1.Rows.Count; i++)
                //{
                //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                //}
                //if (subquery.EndsWith(" or"))
                //{
                //    subquery = subquery.Substring(0, subquery.Length - 3);
                //}
                //if (subquery != "")
                //{
                //    subquery = "and (" + subquery + ")";
                //}
                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                }
                if (subquery.EndsWith(" or"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 3);
                }
                if (subquery != "")
                {
                    subquery = "and (" + subquery + ")";
                }
            }
            string query = "";
            if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
            {
                query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status in('Active','Lead') ORDER BY Id DESC";
            }
            else
            {
                query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'   and Status in('Active','Lead') ORDER BY Id DESC";
            }
            DataTable cusdt = db.GetAllRecord(query);
            string cussubquery = "";
            if (cusdt.Rows.Count > 0)
            {
                //for (int i = 0; i < cusdt.Rows.Count; i++)
                //{
                //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";

                //}
                //if (cussubquery.EndsWith(" or"))
                //{
                //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                //}
                //if (cussubquery != "")
                //{
                //    cussubquery = "and (" + cussubquery + ")";
                //}
            }
            if (searchby != "")
            {
                if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
                {
                    Query = @"select * from [tbl_order_summary] where  MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%') " + subs + " and logid='"+Session["userid"]+"' order by Id desc";
                }
                else
                {
                    Query = @"select * from [tbl_order_summary] where  MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%') " + subquery + " " + subs + " order by Id desc";
                }

            }
            else
            {
                if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE" || Session["designation"] + "" == "GROUP LEADER" || Session["designation"] + "" == "TEAM LEADER")
                {
                    Query = @"select * from [tbl_order_summary] where MONTH(Datetime)='" + month + "' and logid='" + Session["Userid"] + "' and Year(Datetime)='" + year + "'  " + subs + " and logid='" + Session["userid"] + "' order by Id desc";
                }
                else
                {
                    Query = @"select * from [tbl_order_summary] where MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' " + subquery + "  " + subs + " order by Id desc";
                }

            }

            DataTable dt = db.GetAllRecord(Query);
            if (dt.Rows.Count > 0)
            {
                int count = 1;
                for (int jj = 0; jj < dt.Rows.Count; jj++)
                {
                    DataTable dtxml = Encryption.ConvertXmlTo_Datatable(dt.Rows[jj]["Product_xml"] + "");
                    res += "<div class='card card-body shadow mb-2'> <a href='/User/ViewOrder?Order_id=" + Encryption.Encrypt(dt.Rows[jj]["Order_id"].ToString()) + "'> <div class='row '> <div class='col-8 col-sm-6 text-dark'> <span style='display:none'>" + (count + jj) + "</span><div style='margin: 2px; padding: 2px; margin-left:0px;padding-left:0px'><label>Order Id : </label><b class='text-blue'>" + dt.Rows[jj]["Order_id"] + "</b></div></div><div class='col-4 col-sm-6 text-end text-dark'>";
                    if (dt.Rows[jj]["Payment_status"] + "" == "Active")
                    {
                        res += " <i class='fa fa fa-square text-success'></i> <b>" + dt.Rows[jj]["Payment_status"] + "</b> <br /> <b>" + ((Convert.ToDateTime(dt.Rows[jj]["Datetime"])).ToString("dd/MM/yyyy")) + "</b>";
                    }
                    else
                    {
                        res += "<i class='fa fa fa-square text-success'></i> <b>" + dt.Rows[jj]["Payment_status"] + "</b> <br /> <b> " + ((Convert.ToDateTime(dt.Rows[jj]["Datetime"])).ToString("dd/MM/yyyy")) + "</b>";
                    }

                    res += "</div> <div class='col-12 col-sm-12 text-dark'> <Label><b>" + dt.Rows[jj]["Customer_name"] + " , +91 " + dt.Rows[jj]["Customer_mobile"] + "</b></Label><br /> " + dt.Rows[jj]["Customer_address"] + " - " + dt.Rows[jj]["Pincode"] + "<br /> <span><b>Order By :</b> </span> " + dt.Rows[jj]["Orderby"] + "</div> </div> </a> <div class='row'> <div class='col'>";

                    if (dtxml.Rows.Count > 0)
                    {
                        res += "<div class='table table-responsive'><table class='table table-bordered table-hover' style='width:100%;'><thead class='theadb text-start text-center'><tr><th style='width:10%; text-align:center;'>Image</th><th style='width:50%; text-align: center'>Product</th><th style='width:15%; text-align: center'>Price</th><th style='width:15%; text-align: center'>Quantity</th><th style='width:15%; text-align: center'>Total</th></tr></thead><tbody>";
                        for (int i = 0; i < dtxml.Rows.Count; i++)
                        {
                            //res += "<tr><td class='text-center'><img src='" + URL.ApiURL() + "" + dtxml.Rows[i]["Product_Img"] + "' style='height:50px;width:60px' /></td><td class='text-start fw-bold'>" + dtxml.Rows[i]["Product"] + "</td><td class='text-end'>" + Convert.ToDouble(dtxml.Rows[i]["Price"]).ToString("0.00") + "</td><td class='text-center'>" + dtxml.Rows[i]["Quantity"] + "</td><td class='text-end'>" + Convert.ToDouble(dtxml.Rows[i]["Total"]).ToString("0.00")  + "</td></tr>";

                            res += "<tr><td class='text-center'><img src='" + URL.ApiURL() + "" + dtxml.Rows[i]["Product_Img"] + "' style='height:50px;width:60px' onerror=\"this.src='/Content/Img/defaultimg1.png'\"/></td><td class='text-start fw-bold'>" + dtxml.Rows[i]["Product"] + "</td><td class='text-end'>" + dtxml.Rows[i]["Price"] + "</td><td class='text-center'>" + dtxml.Rows[i]["Quantity"] + "</td><td class='text-end'>" + Convert.ToDouble(dtxml.Rows[i]["Total"]).ToString("0.00") + "</td></tr>";

                        }
                        res += "</tbody></table></div>";
                    }
                    res += "</div></div> <div class='row'><div class='col text-end'><label><b>Total Amount : Rs. " + dt.Rows[jj]["Total_amount"] + "</b></label></div></div></div>";
                }
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ViewOrder()
        {
            try
            {
                string url = "";
                string id = Session["userid"] + "";
                string token = Session["gtokenid"] + "";
                if (token != null && token != "")
                {
                    url = "/Home/AppLogin?token=" + token;
                }
                else
                {
                    url = "/Home/Login";
                }
                if (id != null && id != "")
                {

                }
                else
                {
                    Response.Redirect(url); ;
                }
                return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        //[HttpPost]
        //public ActionResult ViewOrder(string OrderId, string OrderId2)
        //{
        //    try
        //    {
        //        if (Session["customerid"] + "" != null && Session["customerid"] + "" != "")
        //        {
        //            //string UpdateQuery = "update tbl_order_summary set  Payment_status='Cancelled' where Order_id='" + OrderId + "' and Customer_id='" + Session["customerid"] + "'";


        //            // if (db.InsertUpdateDelete(UpdateQuery))
        //            //  {
        //            string sql = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Customer_id='" + Session["customerid"] + "'";
        //            DataTable tbl = db.GetAllRecord(sql);
        //            if (tbl.Rows.Count > 0)
        //            {
        //                string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[OTP],[ExpDelivery_date],[Remark],OrderID2)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','0','Cancelled','','','0','Due','" + Session["customerid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["customerid"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["customerid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','','" + tbl.Rows[0]["ExpDelivery_date"] + "','','" + tbl.Rows[0]["OrderID2"] + "')";
        //                if (db.InsertUpdateDelete(iquery))
        //                {
        //                    string UpdateQuery22 = "update tbl_order set  Status='Inactive' where Order_id='" + OrderId + "' and Customer_id='" + Session["customerid"] + "' and OrderID2='" + OrderId2 + "' and Id='" + tbl.Rows[0]["Id"] + "'";
        //                    if (db.InsertUpdateDelete(UpdateQuery22))
        //                    {
        //                        string hid = Session["customerid"].ToString();
        //                        activitylog.Activitylogins("tbl_order_summary", hid, UpdateQuery22, "Success", "Update Success", Session["customerid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //                        activitylog.Activitylogins("tbl_order", hid, iquery, "Success", "Update Success", Session["customerid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //                        ViewBag.msg = "Data updatd";
        //                    }
        //                }
        //            }
        //            //  }
        //            //   else
        //            //  {
        //            //string hid = Session["customerid"].ToString();
        //            //activitylog.Activitylogins("tbl_order_summary", hid, UpdateQuery, "Success", "Update Success", Session["customerid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //            //activitylog.Activitylogins("tbl_order", hid, UpdateQuery, "Success", "Update Success", Session["customerid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //            //ViewBag.msg = "Data Failed";
        //            //  }
        //        }
        //        else
        //        {
        //            return RedirectToAction("Login", "Home");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        try
        //        {
        //            Error_15_16 error_15_16 = new Error_15_16();
        //            string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
        //            // Get the page URL, if available
        //            pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
        //            // Get the module name
        //            moduleName = ex.TargetSite.Module.Name;
        //            // Get the error line number, if available
        //            var stackTrace = ex.StackTrace;
        //            if (!string.IsNullOrEmpty(stackTrace))
        //            {
        //                var lineNumberIndex = stackTrace.LastIndexOf(":line ");
        //                if (lineNumberIndex >= 0)
        //                {
        //                    var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
        //                    var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
        //                    if (newLineIndex >= 0)
        //                    {
        //                        errorLine = lineNumber.Substring(0, newLineIndex);
        //                    }
        //                    else
        //                    {
        //                        errorLine = lineNumber;
        //                    }
        //                }
        //            }
        //            // Get the error message and name
        //            if (ex.Message.ToString().Length >= 1000)
        //            {
        //                errorMessage = ex.Message.Substring(1, 500);
        //            }
        //            else
        //            {
        //                errorMessage = ex.Message;
        //            }
        //            errorName = ex.GetType().FullName;
        //            // Get the error trace
        //            errorTrace = ex.StackTrace;
        //            error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["customerid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
        //        }

        //        catch
        //        {

        //        }
        //        ViewBag.msg = "Error";
        //    }
        //    finally
        //    {
        //        db.connectionstate();
        //    }
        //    return Json(new { success = true });
        //}
        [HttpPost]
        public ActionResult Cancel_MyOrder(string OrderId, string OrderId2)
        {
            try
            {
                string sql = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and logid='" + Session["userid"] + "'";
                DataTable tbl = db.GetAllRecord(sql);
                if (tbl.Rows.Count > 0)
                {
                    //int ccc = db.GetAllRecord("select * from tbl_order where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "' and Status='Active' and ").Rows.Count;
                    string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','0','Cancelled','','','0','Due','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','"+tbl.Rows[0]["Product_type"]+"','','" + tbl.Rows[0]["ExpDelivery_date"] + "','','" + tbl.Rows[0]["OrderID2"] + "','" + tbl.Rows[0]["Points"] + "','" + tbl.Rows[0]["Permanent_address"] + "','" + tbl.Rows[0]["Tahsil"] + "','" + tbl.Rows[0]["Block"] + "','" + tbl.Rows[0]["Address"] + "','" + tbl.Rows[0]["State"] + "','" + tbl.Rows[0]["District"] + "')";
                    if (db.InsertUpdateDelete(iquery))
                    {
                        DataTable dtsumm = db.GetAllRecord("select * from tbl_order_summary where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "'");
                        if (dtsumm.Rows.Count > 0)
                        {
                            string totalsumamount = dtsumm.Rows[0]["Total_amount"] + "";
                            string totalproamount = tbl.Rows[0]["Total_proamount"] + "";

                            double aftercamount = Convert.ToDouble(totalsumamount) - Convert.ToDouble(totalproamount);
                            if (aftercamount > 0)
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "' where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                            else
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "',Payment_status='Deleted' where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                        }
                        string UpdateQuery22 = "update tbl_order set  Status='Inactive' where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "' and OrderID2='" + OrderId2 + "' and Id='" + tbl.Rows[0]["Id"] + "'";
                        if (db.InsertUpdateDelete(UpdateQuery22))
                        {
                            string hid = Session["userid"].ToString();
                            activitylog.Activitylogins("tbl_order", hid, UpdateQuery22, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            activitylog.Activitylogins("tbl_order", hid, iquery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            ViewBag.msg = "Data updatd";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(new { success = true });
        }
        public ActionResult CancelOrder(string OrderId, string OrderId2,string reason)
        {
            try
            {
                string sql = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable tbl = db.GetAllRecord(sql);
                if (tbl.Rows.Count > 0)
                {
                    //int ccc = db.GetAllRecord("select * from tbl_order where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "' and Status='Active' and ").Rows.Count;
                    //string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','0','Cancelled','','','0','Due','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','" + tbl.Rows[0]["Product_type"] + "','','" + tbl.Rows[0]["ExpDelivery_date"] + "','','" + tbl.Rows[0]["OrderID2"] + "','" + tbl.Rows[0]["Points"] + "','" + tbl.Rows[0]["Permanent_address"] + "','" + tbl.Rows[0]["Tahsil"] + "','" + tbl.Rows[0]["Block"] + "','" + tbl.Rows[0]["Address"] + "','" + tbl.Rows[0]["State"] + "','" + tbl.Rows[0]["District"] + "')";


                    string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','" + tbl.Rows[0]["Total_amount"] + "','Cancelled','" + tbl.Rows[0]["Payment_method"] + "','" + tbl.Rows[0]["Payment_upload"] + "','" + tbl.Rows[0]["Paid_amount"] + "','" + tbl.Rows[0]["Payment_status"] + "','" + tbl.Rows[0]["logid"] + "','" + tbl.Rows[0]["logname"] + "','" + DateTime.Parse(tbl.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["Membertype"] + "','" + tbl.Rows[0]["Orderby"] + "','" + tbl.Rows[0]["Invoiceid"] + "','" + tbl.Rows[0]["Drivername"] + "','" + tbl.Rows[0]["Driverid"] + "','" + tbl.Rows[0]["Drivermobile"] + "','" + tbl.Rows[0]["Vehiclename"] + "','" + tbl.Rows[0]["Vehicleid"] + "','Cancelled','" + DateTime.Parse(tbl.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','" + tbl.Rows[0]["Product_type"] + "','" + tbl.Rows[0]["OTP"] + "','" + tbl.Rows[0]["ExpDelivery_date"] + "','" + reason.Replace("'","") + "','" + tbl.Rows[0]["OrderID2"] + "','" + tbl.Rows[0]["Points"] + "','" + tbl.Rows[0]["Permanent_address"] + "','" + tbl.Rows[0]["Tahsil"] + "','" + tbl.Rows[0]["Block"] + "','" + tbl.Rows[0]["Address"] + "','" + tbl.Rows[0]["State"] + "','" + tbl.Rows[0]["District"] + "','" + DateTime.Now.ToString("MMM-yyyy") + "' ,'" + tbl.Rows[0]["Invoicepdf"] + "')";

                    if (db.InsertUpdateDelete(iquery))
                    {
                        DataTable dtsumm = db.GetAllRecord("select * from tbl_order_summary where Order_id='" + OrderId + "'");
                        if (dtsumm.Rows.Count > 0)
                        {
                            string totalsumamount = dtsumm.Rows[0]["Total_amount"] + "";
                            string totalproamount = tbl.Rows[0]["Total_proamount"] + "";

                            double aftercamount = Convert.ToDouble(totalsumamount) - Convert.ToDouble(totalproamount);
                            if (aftercamount > 0)
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "' where Order_id='" + OrderId + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                            else
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "',Payment_status='Deleted' where Order_id='" + OrderId + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                        }
                        string UpdateQuery22 = "update tbl_order set  Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Id='" + tbl.Rows[0]["Id"] + "'";
                        if (db.InsertUpdateDelete(UpdateQuery22))
                        {
                            string hid = Session["userid"].ToString();
                            activitylog.Activitylogins("tbl_order", hid, UpdateQuery22, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            activitylog.Activitylogins("tbl_order", hid, iquery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data updatd";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(new { success = true });
        }
        public ActionResult CancelOrderdelivery(string OrderId, string OrderId2, string reason)
        {
            try
            {
                string sql = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable tbl = db.GetAllRecord(sql);
                if (tbl.Rows.Count > 0)
                {
                    //int ccc = db.GetAllRecord("select * from tbl_order where Order_id='" + OrderId + "' and logid='" + Session["userid"] + "' and Status='Active' and ").Rows.Count;
                    //string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','0','Cancelled','','','0','Due','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["membertype"] + "','" + Session["username"] + "(" + Session["userphon"] + ")','','','','','','','','','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','" + tbl.Rows[0]["Product_type"] + "','','" + tbl.Rows[0]["ExpDelivery_date"] + "','','" + tbl.Rows[0]["OrderID2"] + "','" + tbl.Rows[0]["Points"] + "','" + tbl.Rows[0]["Permanent_address"] + "','" + tbl.Rows[0]["Tahsil"] + "','" + tbl.Rows[0]["Block"] + "','" + tbl.Rows[0]["Address"] + "','" + tbl.Rows[0]["State"] + "','" + tbl.Rows[0]["District"] + "')";


                    string iquery = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + tbl.Rows[0]["Order_id"] + "','" + tbl.Rows[0]["Product_xml"] + "','" + tbl.Rows[0]["Customer_name"] + "','" + tbl.Rows[0]["Customer_id"] + "','" + tbl.Rows[0]["Customer_mobile"] + "','" + tbl.Rows[0]["Customer_address"] + "','" + tbl.Rows[0]["Pincode"] + "','" + tbl.Rows[0]["Total_amount"] + "','Cancelled','" + tbl.Rows[0]["Payment_method"] + "','" + tbl.Rows[0]["Payment_upload"] + "','" + tbl.Rows[0]["Paid_amount"] + "','" + tbl.Rows[0]["Payment_status"] + "','" + tbl.Rows[0]["logid"] + "','" + tbl.Rows[0]["logname"] + "','" + DateTime.Parse(tbl.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["Membertype"] + "','" + tbl.Rows[0]["Orderby"] + "','" + tbl.Rows[0]["Invoiceid"] + "','" + tbl.Rows[0]["Drivername"] + "','" + tbl.Rows[0]["Driverid"] + "','" + tbl.Rows[0]["Drivermobile"] + "','" + tbl.Rows[0]["Vehiclename"] + "','" + tbl.Rows[0]["Vehicleid"] + "','Cancelled','" + DateTime.Parse(tbl.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + tbl.Rows[0]["BranchName"] + "','" + tbl.Rows[0]["BranchCode"] + "','" + tbl.Rows[0]["Product_Img"] + "','" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_price"] + "','" + tbl.Rows[0]["Product_quantity"] + "','" + tbl.Rows[0]["Total_proamount"] + "','" + tbl.Rows[0]["Product_type"] + "','" + tbl.Rows[0]["OTP"] + "','" + tbl.Rows[0]["ExpDelivery_date"] + "','" + reason.Replace("'", "") + "','" + tbl.Rows[0]["OrderID2"] + "','" + tbl.Rows[0]["Points"] + "','" + tbl.Rows[0]["Permanent_address"] + "','" + tbl.Rows[0]["Tahsil"] + "','" + tbl.Rows[0]["Block"] + "','" + tbl.Rows[0]["Address"] + "','" + tbl.Rows[0]["State"] + "','" + tbl.Rows[0]["District"] + "','" + DateTime.Now.ToString("MMM-yyyy") + "' ,'" + tbl.Rows[0]["Invoicepdf"] + "')";

                    if (db.InsertUpdateDelete(iquery))
                    {
                        DataTable dtsumm = db.GetAllRecord("select * from tbl_order_summary where Order_id='" + OrderId + "'");
                        if (dtsumm.Rows.Count > 0)
                        {
                            string totalsumamount = dtsumm.Rows[0]["Total_amount"] + "";
                            string totalproamount = tbl.Rows[0]["Total_proamount"] + "";

                            double aftercamount = Convert.ToDouble(totalsumamount) - Convert.ToDouble(totalproamount);
                            if (aftercamount > 0)
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "' where Order_id='" + OrderId + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                            else
                            {
                                string UpdateQuery222 = "update tbl_order_summary set Total_amount='" + aftercamount + "',Payment_status='Deleted' where Order_id='" + OrderId + "'";
                                db.InsertUpdateDelete(UpdateQuery222);
                            }
                        }
                        string UpdateQuery22 = "update tbl_order set  Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Id='" + tbl.Rows[0]["Id"] + "'";
                        if (db.InsertUpdateDelete(UpdateQuery22))
                        {
                            string hid = Session["userid"].ToString();
                            activitylog.Activitylogins("tbl_order", hid, UpdateQuery22, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            activitylog.Activitylogins("tbl_order", hid, iquery, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data updatd";
                        }


                        //Stock Transaction query
                        int month = DateTime.Parse(tbl.Rows[0]["ActionDatetime"] + "").Month;
                        int year = DateTime.Parse(tbl.Rows[0]["ActionDatetime"] + "").Year;
                        string groupquery = "Select * from tbl_group where Employee_id='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + month + "-" + year + "'";
                        DataTable groupsesdt = db.GetAllRecord(groupquery);
                        string Groupid = "";
                        if (groupsesdt.Rows.Count > 0)
                        {
                            Groupid = groupsesdt.Rows[0]["Groupid"] + "";
                        }
                        else
                        {

                        }
                        string queryp = "select * from tbl_diliverypointstock where Productid='" + tbl.Rows[0]["Product_id"] + "' and Groupid='" + Groupid + "' and Month_Year='" + month + "-" + year + "'";
                        DataTable dtp = db.GetAllRecord(queryp);
                        if (dtp.Rows.Count > 0)
                        {
                            string Debit = dtp.Rows[0]["Debit"] + "";
                            string balance = dtp.Rows[0]["Balance"] + "";
                            double allcdebit = Convert.ToDouble(Debit) - Convert.ToDouble(tbl.Rows[0]["Product_quantity"]);
                            double allbalance = Convert.ToDouble(balance) + Convert.ToDouble(tbl.Rows[0]["Product_quantity"]);

                            string upquery = "update tbl_diliverypointstock set Debit='" + allcdebit + "', Balance='" + allbalance + "' where Productid='" + tbl.Rows[0]["Product_id"] + "'  and Groupid='" + Groupid + "' and Month_Year='" + month + "-" + year + "''";

                            if (db.InsertUpdateDelete(upquery))
                            {
                                activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") + "", upquery, "Success", "Insert/Update Success", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");


                                //Stock Transaction query Stock table
                                string query2 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + tbl.Rows[0]["Product_id"] + "','" + tbl.Rows[0]["Product_name"] + "','" + tbl.Rows[0]["Product_quantity"] + "','Rt.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "')";

                                db.InsertUpdateDelete(query2);

                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") + "", upquery, "Failed", "Insert/Update Failed", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                                ViewBag.msg = "Data Not Updated";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(new { success = true });
        }
        public JsonResult GiveFeedback()
        {
            string res = "";
            try
            {
                var file = Request.Files[0]; // Assuming only one file is uploaded
                var product_id = Request.Form["product_id"];
                var ratingInput = Request.Form["ratingInput"];
                var review = Request.Form["review"];


            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        
        public JsonResult GenRequest()
        {
            string res = "";
            var support = Request.Form["support"];
            var empname = Request.Form["empname"];
            var empid = Request.Form["empid"];
            var emprowid = Request.Form["emprowid"];
            var requestfor = Request.Form["requestfor"];
            var location = Request.Form["location"];
            var longitude = Request.Form["longitude"];
            var latitude = Request.Form["latitude"];
            var leadid = Request.Form["leadid"];
            // Create a sample object to serialize
            // Create a JObject to store data
            JObject jsonObject = new JObject();
            jsonObject["Location"] = location;
            jsonObject["Latitude"] = latitude;
            jsonObject["Longitude"] = longitude;

            // Convert JObject to JSON string
            string jsonlocation = jsonObject.ToString();

            if(requestfor== "DKS")
            {
                DateTime currentDate = DateTime.Now;
                // Extract the year and month from the current date
                string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                leadid = "L" + currentYearmonth + "" + arandom(5);
                string query= "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime]) VALUES('"+ leadid + "','','','','','','','','','','','Pending','','"+ support + "','"+ jsonlocation + "','"+ empname + "','"+ empid + "','"+ emprowid + "','','','','DKS','Pending','Active','"+Session["ubrname"]+"','"+ Session["ubrcode"] + "','"+ Session["userid"] + "','"+ Session["username"] + "','"+DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")+"')";
                if (db.InsertUpdateDelete(query))
                {
                    
                    res = leadid;
                    Session["Leadid"] = leadid;
                    Session["Rowid"] = db.getmaxid("tbl_leadnew");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(empid, empname, "Request for Support", "Hii, "+ Session["username"] + " Send Request For Support Please Go to App and Accept Request.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.",empid);
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "BSA")
            {
                string query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime]) VALUES('" + leadid + "','','','','','','','','','','','Pending','','" + support + "','" + jsonlocation + "','" + empname + "','" + empid + "','" + emprowid + "','','','','BSA','Pending','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                if (db.InsertUpdateDelete(query))
                {
                    res = leadid;
                    Session["Leadid"] = leadid;
                    Session["Rowid"] = db.getmaxid("tbl_leadnew");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(empid, empname, "Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.", empid);
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "Demo")
            {
                string query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime]) VALUES('" + leadid + "','','','','','','','','','','','Pending','','" + support + "','" + jsonlocation + "','" + empname + "','" + empid + "','" + emprowid + "','','','','Demo','Pending','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                if (db.InsertUpdateDelete(query))
                {

                    res = leadid;
                    Session["Leadid"] = leadid;
                    Session["Rowid"] = db.getmaxid("tbl_leadnew");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                     
                    Notifications.SendNotification(empid, empname, "Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.", empid);
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "Order")
            {
                string query = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime]) VALUES('" + leadid + "','','','','','','','','','','','Pending','','" + support + "','" + jsonlocation + "','" + empname + "','" + empid + "','" + emprowid + "','','','','Order','Pending','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                if (db.InsertUpdateDelete(query))
                {

                    res = leadid;
                    Session["support"] = support;
                    Session["Leadid"] = leadid;
                    Session["Rowid"] = db.getmaxid("tbl_leadnew");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(empid, empname, "Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + Session["username"] + " Send Request For Support Please Go to App and Accept Request.", empid);
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }



            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AcceptRequest()
        {
            string leadid = "";
            string res = "";
            var Rowid = Request.Form["Rowid"];
            var Leadid = Request.Form["Leadid"];
            var requestfor = Request.Form["requestfor"];
            var location = Request.Form["location"];
            var longitude = Request.Form["longitude"];
            var latitude = Request.Form["latitude"];
            // Create a sample object to serialize
            // Create a JObject to store data
            JObject jsonObject = new JObject();
            jsonObject["Location"] = location;
            jsonObject["Latitude"] = latitude;
            jsonObject["Longitude"] = longitude;

            // Convert JObject to JSON string
            string jsonlocation = jsonObject.ToString();

            if (requestfor == "DKS")
            {
                DataTable getdt=db.GetAllRecord("select * from tbl_leadnew where Id='" + Rowid + "'");
                // Assuming getdt.Rows[0]["Location_In"] contains a valid JSON string
                string locations = getdt.Rows[0]["Location_In"] + "";
                JsonDocument jsonDocument = JsonDocument.Parse(locations);
                // Access properties dynamically
                var root = jsonDocument.RootElement;
                // Example: Accessing values
                string location1 = root.GetProperty("Location").GetString();
                string latitude1 = root.GetProperty("Latitude").GetString();
                string longitude1 = root.GetProperty("Longitude").GetString();

                double distance = CalculateDistance(Convert.ToDouble(latitude), Convert.ToDouble(longitude), Convert.ToDouble(latitude1), Convert.ToDouble(longitude1));

                string query = "Update [tbl_leadnew] Set [Support_reqstatus]='Accepted' ,[Supportlocation_In]='"+ jsonlocation + "' ,[Location_diffrence]='"+ distance + "' ,[Support_datetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='"+Rowid+"'";
                if (db.InsertUpdateDelete(query))
                {
                    res = "Success";
                       DataTable dt = db.GetAllRecord("select * from tbl_leadnew  where Id='" + Rowid + "'");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(dt.Rows[0]["Logid"]+"", dt.Rows[0]["Logname"]+"", "Request for Support", "Hii, " + dt.Rows[0]["Logname"] + " Accepted Your Request For Support.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + dt.Rows[0]["Logname"] + "" + "Send Request For Support Please Go to App and Accept Request.", dt.Rows[0]["Logid"] + "");
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "BSA")
            {
                DataTable getdt = db.GetAllRecord("select * from tbl_leadnew where Id='" + Rowid + "'");
                // Assuming getdt.Rows[0]["Location_In"] contains a valid JSON string
                string locations = getdt.Rows[0]["Location_In"] + "";
                JsonDocument jsonDocument = JsonDocument.Parse(locations);
                // Access properties dynamically
                var root = jsonDocument.RootElement;
                // Example: Accessing values
                string location1 = root.GetProperty("Location").GetString();
                string latitude1 = root.GetProperty("Latitude").GetString();
                string longitude1 = root.GetProperty("Longitude").GetString();

                double distance = CalculateDistance(Convert.ToDouble(latitude), Convert.ToDouble(longitude), Convert.ToDouble(latitude1), Convert.ToDouble(longitude1));

                string query = "Update [tbl_leadnew] Set [Support_reqstatus]='Accepted' ,[Supportlocation_In]='" + jsonlocation + "' ,[Location_diffrence]='" + distance + "' ,[Support_datetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + Rowid + "'";
                if (db.InsertUpdateDelete(query))
                {
                    res = "Success";
                    DataTable dt = db.GetAllRecord("select * from tbl_leadnew  where Id='" + Rowid + "'");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(dt.Rows[0]["Logid"] + "", dt.Rows[0]["Logname"] + "", "Request for Support", "Hii, " + dt.Rows[0]["Logname"] + " Accepted Your Request For Support.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + dt.Rows[0]["Logname"] + "" + " Send Request For Support Please Go to App and Accept Request.", dt.Rows[0]["Logid"] + "");
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "Demo")
            {
                DataTable getdt = db.GetAllRecord("select * from tbl_leadnew where Id='" + Rowid + "'");
                // Assuming getdt.Rows[0]["Location_In"] contains a valid JSON string
                string locations = getdt.Rows[0]["Location_In"] + "";
                JsonDocument jsonDocument = JsonDocument.Parse(locations);
                // Access properties dynamically
                var root = jsonDocument.RootElement;
                // Example: Accessing values
                string location1 = root.GetProperty("Location").GetString();
                string latitude1 = root.GetProperty("Latitude").GetString();
                string longitude1 = root.GetProperty("Longitude").GetString();

                double distance = CalculateDistance(Convert.ToDouble(latitude), Convert.ToDouble(longitude), Convert.ToDouble(latitude1), Convert.ToDouble(longitude1));

                string query = "Update [tbl_leadnew] Set [Support_reqstatus]='Accepted' ,[Supportlocation_In]='" + jsonlocation + "' ,[Location_diffrence]='" + distance + "' ,[Support_datetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + Rowid + "'";
                if (db.InsertUpdateDelete(query))
                {
                    res = "Success";
                    DataTable dt = db.GetAllRecord("select * from tbl_leadnew  where Id='" + Rowid + "'");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(dt.Rows[0]["Logid"] + "", dt.Rows[0]["Logname"] + "", "Request for Support", "Hii, " + dt.Rows[0]["Logname"] + " Accepted Your Request For Support.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + dt.Rows[0]["Logname"] + "" + " Send Request For Support Please Go to App and Accept Request.", dt.Rows[0]["Logid"] + "");
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }
            else if (requestfor == "Order")
            {
                DataTable getdt = db.GetAllRecord("select * from tbl_leadnew where Id='" + Rowid + "'");
                // Assuming getdt.Rows[0]["Location_In"] contains a valid JSON string
                string locations = getdt.Rows[0]["Location_In"] + "";
                JsonDocument jsonDocument = JsonDocument.Parse(locations);
                // Access properties dynamically
                var root = jsonDocument.RootElement;
                // Example: Accessing values
                string location1 = root.GetProperty("Location").GetString();
                string latitude1 = root.GetProperty("Latitude").GetString();
                string longitude1 = root.GetProperty("Longitude").GetString();

                double distance = CalculateDistance(Convert.ToDouble(latitude), Convert.ToDouble(longitude), Convert.ToDouble(latitude1), Convert.ToDouble(longitude1));

                string query = "Update [tbl_leadnew] Set [Support_reqstatus]='Accepted' ,[Supportlocation_In]='" + jsonlocation + "' ,[Location_diffrence]='" + distance + "' ,[Support_datetime]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + Rowid + "'";
                if (db.InsertUpdateDelete(query))
                {
                    res = "Success";
                    DataTable dt = db.GetAllRecord("select * from tbl_leadnew  where Id='" + Rowid + "'");
                    activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    Notifications.SendNotification(dt.Rows[0]["Logid"] + "", dt.Rows[0]["Logname"] + "", "Request for Support", "Hii, " + dt.Rows[0]["Logname"] + " Accepted Your Request For Support.");
                    Messaging.SendPushNotification("Request for Support", "Hii, " + dt.Rows[0]["Logname"] + "" + " Send Request For Support Please Go to App and Accept Request.", dt.Rows[0]["Logid"] + "");
                }
                else
                {
                    activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                    ViewBag.AlertMessage = "Failed";
                }
            }




            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public static double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
        {
            const double R = 6371e3; // Earth radius in meters
            double phi1 = ToRadians(lat1);
            double phi2 = ToRadians(lat2);
            double deltaPhi = ToRadians(lat2 - lat1);
            double deltaLambda = ToRadians(lon2 - lon1);

            double a = Math.Sin(deltaPhi / 2) * Math.Sin(deltaPhi / 2) +
                       Math.Cos(phi1) * Math.Cos(phi2) *
                       Math.Sin(deltaLambda / 2) * Math.Sin(deltaLambda / 2);

            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

            double distance = R * c; // Distance in meters
            return distance;
        }

        private static double ToRadians(double degrees)
        {
            return degrees * (Math.PI / 180);
        }

        public class LocationData
        {
            public string Location { get; set; }
            public double Latitude { get; set; }
            public double Longitude { get; set; }
        }

        public JsonResult GetProducFullDetails(string Productid)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_pro_price_circlar where proid='" + Productid + "'";
                activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GiveFeedbackofEmployee()
        {
            string leadid = "";
            string res = "";
            var Rowid = Request.Form["Rowid"];
            var Leadid = Request.Form["Leadid"];
            var requestfor = Request.Form["requestfor"];

            var rating_value1 = Request.Form["rating_value1"];
            var rating_value2 = Request.Form["rating_value2"];
            var rating_value3 = Request.Form["rating_value3"];
            var rating_value4 = Request.Form["rating_value4"];
            var rating_value5= Request.Form["rating_value5"];
            if(rating_value5==null || rating_value5 == "")
            {
                rating_value5 = "0";
            }
            var location = Request.Form["location"];
            var longitude = Request.Form["longitude"];
            var latitude = Request.Form["latitude"];
            // Create a sample object to serialize
            // Create a JObject to store data
            JObject jsonObject = new JObject();
            jsonObject["Location"] = location;
            jsonObject["Latitude"] = latitude;
            jsonObject["Longitude"] = longitude;

            // Convert JObject to JSON string
            string jsonlocation = jsonObject.ToString();

            string rating_string1 = "", rating_string2 = "", rating_string3 = "", rating_string4 = "", rating_string5="";
            for (int i = 0; i < Convert.ToInt32(rating_value1); i++)
            {
                rating_string1 += "<i class=@fa fa-star text-warning sstar@ ></i>";
            }
            for (int i = 0; i < Convert.ToInt32(rating_value2); i++)
            {
                rating_string2 += "<i class=@fa fa-star text-warning sstar@ ></i>";
            }
            for (int i = 0; i < Convert.ToInt32(rating_value3); i++)
            {
                rating_string3 += "<i class=@fa fa-star text-warning sstar@ ></i>";
            }
            for (int i = 0; i < Convert.ToInt32(rating_value4); i++)
            {
                rating_string4 += "<i class=@fa fa-star text-warning sstar@ ></i>";
            }
            for (int i = 0; i < Convert.ToInt32(rating_value5); i++)
            {
                rating_string5 += "<i class=@fa fa-star text-warning sstar@ ></i>";
            }
            string jsonfeedback = "";
            
            if (requestfor == "DKS")
            {
                JObject jsonObjectf = new JObject();
                jsonObjectf["Way of Approching rating"] = rating_value1;
                jsonObjectf["Way of Approching string"] = rating_string1;

                jsonObjectf["Body Language rating"] = rating_value2;
                jsonObjectf["Body Language string"] = rating_string2;

                jsonObjectf["Tone of Voice rating"] = rating_value3;
                jsonObjectf["Tone of Voice string"] = rating_string3;

                jsonObjectf["5 Magical Word rating"] = rating_value4;
                jsonObjectf["5 Magical Word string"] = rating_string4;

                // Convert JObject to JSON string
                jsonfeedback = jsonObjectf.ToString();

            }
            else if (requestfor == "BSA")
            {
                JObject jsonObjectf = new JObject();
                jsonObjectf["Way of Probing rating"] = rating_value1;
                jsonObjectf["Way of Probing string"] = rating_string1;

                jsonObjectf["How to ask Specific questions from customer rating"] = rating_value2;
                jsonObjectf["How to ask Specific questions from customer string"] = rating_string2;

                jsonObjectf["Customer Involvement rating"] = rating_value3;
                jsonObjectf["Customer Involvement string"] = rating_string3;

                jsonObjectf["Is it right time to demo rating"] = rating_value4;
                jsonObjectf["Is it right time to demo string"] = rating_string4;

                // Convert JObject to JSON string
                jsonfeedback = jsonObjectf.ToString();
            }
            else if (requestfor == "Demo")
            {
                JObject jsonObjectf = new JObject();
                jsonObjectf["Vartual Oral Presentation rating"] = rating_value1;
                jsonObjectf["Vartual Oral Presentation string"] = rating_string1;

                jsonObjectf["Written Demo rating"] = rating_value2;
                jsonObjectf["Written Demo string"] = rating_string2;

                jsonObjectf["Explaning about Product Benefit rating"] = rating_value3;
                jsonObjectf["Explaning about Product Benefit string"] = rating_string3;

                jsonObjectf["Objetion Handling rating"] = rating_value4;
                jsonObjectf["Objetion Handling string"] = rating_string4;

                jsonObjectf["Elimination doubt rating"] = rating_value5;
                jsonObjectf["Elimination doubt string"] = rating_string5;
                // Convert JObject to JSON string
                jsonfeedback = jsonObjectf.ToString();
            }
            else if (requestfor == "Order")
            {
                JObject jsonObjectf = new JObject();
                jsonObjectf["Closing Skill rating"] = rating_value1;
                jsonObjectf["Closing Skill string"] = rating_string1;

                jsonObjectf["Re Explaning Product Benefit rating"] = rating_value2;
                jsonObjectf["Re Explaning Product Benefit string"] = rating_string2;

                jsonObjectf["Payment Receipt Generation rating"] = rating_value3;
                jsonObjectf["Payment Receipt Generation string"] = rating_string3;

                jsonObjectf["Product Delivery and Payment Imformation rating"] = rating_value4;
                jsonObjectf["Product Delivery and Payment Imformation string"] = rating_string4;

                // Convert JObject to JSON string
                jsonfeedback = jsonObjectf.ToString();
            }
            else if (requestfor == "Documentation")
            {
                JObject jsonObjectf = new JObject();
                jsonObjectf["Product Delivery Preparation rating"] = rating_value1;
                jsonObjectf["Product Delivery Preparation string"] = rating_string1;

                jsonObjectf["Re Explaning Product Benefit rating"] = rating_value2;
                jsonObjectf["Re Explaning Product Benefit string"] = rating_string2;

                jsonObjectf["Payment Process rating"] = rating_value3;
                jsonObjectf["Payment Process string"] = rating_string3;

                jsonObjectf["Product Keeping instructions rating"] = rating_value4;
                jsonObjectf["Product Keeping instructions string"] = rating_string4;

                // Convert JObject to JSON string
                jsonfeedback = jsonObjectf.ToString();
            }

            string query = "Update [tbl_leadnew] Set [Feedback_status]='Done' ,[Feedback]='" + jsonfeedback + "' ,[Feedback_location]='" + jsonlocation + "' ,[feedback_time]='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + Rowid + "'";
            if (db.InsertUpdateDelete(query))
            {
                res = "Success";

                activitylog.Activitylogins("tbl_leadnew", db.getmaxid("tbl_lead").ToString(), query, "Success", "Insert Succcess", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

            }
            else
            {
                activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                ViewBag.AlertMessage = "Failed";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Team()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Team(string Type)
        {
            string res = "";
            try
            {
                res += "<option selected disabled value=''>Select one</option>";
                string query = "";
                if (Type == "Group")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' group by Groupid,Groups,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Groupid"] + "'> " + dt.Rows[i]["Groups"] + " (Group)</option>";

                        }
                    }
                }
                else if (Type == "Team")
                {
                    query = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active' group by Teamid,Team,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Teamid"] + "'> " + dt.Rows[i]["Team"] + "</option>";

                        }
                    }
                }
                else if (Type == "Branch")
                {
                    query = "Select Distinct Branchid,Branch,Status from tbl_branch1 where Status='Active' group by Branchid,Branch,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Branchid"] + "'> " + dt.Rows[i]["Branch"] + "</option>";

                        }
                    }
                }
                else if (Type == "Region")
                {
                    query = "Select Distinct Regionid,Region,Status from tbl_region where Status='Active' group by Regionid,Region,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Regionid"] + "'> " + dt.Rows[i]["Region"] + "</option>";
                        }
                    }
                }
                else if (Type == "Division")
                {
                    query = "Select Distinct Divisionid,Division,Status from tbl_division where Status='Active' group by Divisionid,Division,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Divisionid"] + "'> " + dt.Rows[i]["Division"] + "</option>";
                        }
                    }
                }
                else if (Type == "Zone")
                {
                    query = "Select Distinct Zoneid,Zone,Status from tbl_zone where Status='Active' group by Zoneid,Zone,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Zoneid"] + "'> " + dt.Rows[i]["Zone"] + "</option>";
                        }
                    }
                }
                else if (Type == "Company")
                {
                    query = "Select Distinct Companyid,Company,Status from tbl_company where Status='Active' group by Companyid,Company,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Companyid"] + "'> " + dt.Rows[i]["Company"] + "</option>";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult LeadInfo(string type)
        {
            List<EmpLead> EmpLead = new List<EmpLead>();
            try
            {
                string MonthYear = "";
                if (Session["Month"] + "" != "")
                {
                    MonthYear = Session["Month"] + "-" + Session["Year"];
                }
                else
                {
                    Session["Month"] = DateTime.Now.Month;
                    Session["Year"] = DateTime.Now.Year;
                    MonthYear = DateTime.Now.ToString("M-yyyy");
                }
                ViewBag.nm = type;
                string query = "";
                if (type == "Lead")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='"+ Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }
                else if (type == "DKS")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done' and Lead_status_for='DKS' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='" + Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }
                else if (type == "BSA")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status in ('Done','Follow Up')   and Lead_status_for='BSA' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='" + Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }
                else if (type == "Demo")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status in ('Done','Follow Up')   and Lead_status_for='Demo' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='" + Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }
                else if (type == "Order")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done'  and Lead_status_for='Order' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='" + Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }
                else if (type == "Documentation")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done'  and Lead_status_for='Documentation' and Logid='" + Session["userid"] + "' and MONTH(Datetime)='" + Session["Month"] + "' and YEAR(Datetime)='" + Session["Year"] + "'";
                }

                activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "", Session["userid"] + "", Session["username"]+ "", Session["usermail"] + "");
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        EmpLead EmpLeadinfo = new EmpLead
                        {
                            Id = Convert.ToString(row["Id"]),
                            Customerid = Convert.ToString(row["Customerid"]),
                            Name = Convert.ToString(row["Name"]),
                            Mobile = Convert.ToString(row["Mobile"]),
                            Email = Convert.ToString(row["Email"]),
                            Statename = Convert.ToString(row["Statename"]),
                            Cityname = Convert.ToString(row["Cityname"]),
                            Address = Convert.ToString(row["Address"]),
                            Pincode = Convert.ToString(row["Pincode"]),
                            Occupation = Convert.ToString(row["Occupation"]),
                            Land_Irrigation = Convert.ToString(row["Land_Irrigation"]),
                            Lead_status_for = Convert.ToString(row["Lead_status_for"]),
                            Datetime = Convert.ToString(row["Datetime"]),
                            Support = Convert.ToString(row["Support"]),
                            Feedback = Convert.ToString(row["Feedback"]),
                            Supportempname = Convert.ToString(row["Supportempname"]),
                        };

                        EmpLead.Add(EmpLeadinfo);
                    }
                }
                else
                {
                    ViewBag.msg = "failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"] + "", Session["username"]+ "", Session["usermail"] + "");
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View(EmpLead);
        }
        public JsonResult getLeaddetails(string Cid)
        {
            string res1 = "";
            try
            {
                string getcmp = "SELECT * FROM tbl_leadnew where Id='" + Cid + "'";
                DataTable tbll = db.GetAllRecord(getcmp);
                res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Ordersummery(string month,string year,string searchby,string status)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string subs = "";
                if(status!="" && status != null)
                {
                    subs = " and Payment_status='" + status + "'";
                }
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + month + "-" + year + "' ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status='Active' ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' /*" + subquery + "*/  and Status='Active' ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery == "")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active'  and Payment_status!='Deleted' and MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') " + subquery + " "+ subs + " order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active'  and Payment_status!='Deleted' and MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' " + subquery + " " + subs + " order by Id desc";
                        }
                    }
                }
                else
                {
                    Query = "select * from [tbl_order_summary] where Payment_status!='Active' and Payment_status!='Deleted' and MONTH(Datetime)='" + month + "' and Year(Datetime)='" + year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='" + Session["ubrcode"] + "' " + subs + " order by Payment_status asc";
                }
                

                activitylog.Activitylogins("tbl_order_summary", "", Query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(Query);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Ordersummery1(string month, string year, string searchby)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    //string query1 = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + month + "-" + year + "' group by Groupid,Groups,Status ";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + month + "-" + year + "' ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status in('Active','Lead') ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Status in('Active','Lead') ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery == "")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status='Active' and (LOWER(Customer_mobile) = LOWER('" + searchby + "') OR LOWER(Customer_name) LIKE LOWER('%" + searchby + "%') OR LOWER(Orderby) LIKE LOWER('%" + searchby + "%')) " + subquery + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'  order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where  Payment_status='Active' " + subquery + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Id desc";
                        }
                    }
                }
                else
                {
                    //Query = "select * from [tbl_order_summary] where Payment_status='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='"+Session["ubrcode"]+"' order by Payment_status asc";
                    Query = "SELECT *  FROM[tbl_order_summary] WHERE LOWER(Payment_status) = 'active' AND(LOWER(Customer_mobile) = LOWER('" + searchby + "') OR LOWER(Customer_name) LIKE LOWER('%" + searchby + "%') OR LOWER(Orderby) LIKE LOWER('%" + searchby + "%')) AND LOWER(BranchCode) = LOWER('" + Session["ubrcode"] + "') and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' ORDER BY Payment_status ASC";
                }
                

                activitylog.Activitylogins("tbl_order_summary", "", Query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(Query);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Ordersummerydetails(string Order_id)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select Id,Order_id,OrderID2,Product_name,Product_id,CAST(Product_price AS DECIMAL(18, 2)) AS Product_price ,Product_quantity,CAST(Total_proamount AS DECIMAL(18, 2)) AS Total_proamount,Product_Img,status,Order_status,Customer_id,Actionbyid, ExpDelivery_date AS FormattedExpDeliveryDate,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid] from tbl_order where Order_id='" + Order_id + "' and status='Active' order by id asc";

                activitylog.Activitylogins("tbl_order", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Ordertransactiondetails(string Order_id)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select * from tbl_order_transaction where Order_id='" + Order_id + "' and Status='Requested'";

                activitylog.Activitylogins("tbl_order", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        ///  Sales Module  Close ///











        //Open Support

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Resolvecomplain()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Resolvecomplain(IEnumerable<HttpPostedFileBase> Attachement, string prevAttachement, FormCollection form)
        {
            try
            {
                string fdpath = "";
                if (Attachement != null)
                {
                    foreach (var file in Attachement)
                    {
                        if (file != null && file.ContentLength > 0)
                        {
                            fdpath += APIs.ComplainUpload(file) + ",";
                        }
                        else
                        {
                            fdpath = prevAttachement;
                        }
                    }
                }
                else
                {
                    fdpath = "No file Upload";
                }

                string cmpID = arandom(6);

                string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,Complaintbycontact,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid) VALUES ('" + cmpID + "','" + form["cmptypef"] + "','" + form["Subjectf"] + "','" + form["Priority"] + "','" + form["complaint"] + "','" + fdpath + "','','','Open','" + form["complaint"] + "','" + form["complaint"] + "','','','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["customerid"] + "','" + form["customername"] + "','"+form["customermobile"] + "','','','','','','','','','','')";

                if (db.InsertUpdateDelete(addcmpl))
                {
                    activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Saved";
                }
                else
                {
                    activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            //string addcmpl = "insert into tbl_Complaint(Status,Subject,Addvisereply,statusmessage,CmpID,datetime,Logname,Logid,statuss)VALUES('" + Status + "','" + subject + "','" + Advisereply + "','" + statusMessage + "','" + cmpid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["username"] + "','" + Session["userid"] + "','Active')";
            //db.InsertUpdateDelete("update tbl_Complaint set statuss='Inactive' where CmpID='" + cmpid + "'");
            //if (db.InsertUpdateDelete(addcmpl))
            //{
            //    activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //    ViewBag.msg = "Data Saved";
            //}
            //else
            //{
            //    activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            //    ViewBag.msg = "Data Save Failed";
            //}
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult MyComplaints()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult MyComplaints(IEnumerable<HttpPostedFileBase> Attachement, string prevAttachement, FormCollection form)
        {
            try
            {
                string fdpath = "";
                if (Attachement != null)
                {
                    foreach (var file in Attachement)
                    {
                        if (file != null && file.ContentLength > 0)
                        {
                            fdpath += APIs.ComplainUpload(file) + ",";
                        }
                        else
                        {
                            fdpath = prevAttachement;
                        }
                    }
                }
                else
                {
                    fdpath = "No file Upload";
                }

                string cmpID = arandom(6);
                string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,Complaintbycontact,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid,customername,customerid,customercontact) VALUES ('" + cmpID + "','" + form["cmptypef"] + "','" + form["Subjectf"] + "','" + form["Priority"] + "','" + form["complaint"] + "','" + fdpath + "','','','Open','" + form["complaint"] + "','" + form["complaint"] + "','','','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + Session["userphon"] + "','','','','','','','','','','','" + form["customername"] + "','" + form["customerid"] + "','" + form["customermobile"] + "')";

                if (db.InsertUpdateDelete(addcmpl))
                {
                    activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Saved";
                }
                else
                {
                    activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            
            return View();
        }
        public JsonResult getsubbycmptype(string selectedcmp)
        {
            string Jsonn;
            string getsub = "SELECT * FROM tbl_complain_subject where Status='Active' and Complaintype='" + selectedcmp + "'";
            DataTable tbll = db.GetAllRecord(getsub);

            Jsonn = JsonConvert.SerializeObject(tbll, Formatting.None);
            return Json(Jsonn, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetCustomerinfo(string Mobile)
        {
            string[] msg = { };
            try
            {
                string query1 = "SELECT * FROM tbl_customer WHERE Mobile='" + Mobile + "'";
                activitylog.Activitylogins("tbl_customer", "", query1, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                DataTable dt = db.GetAllRecord(query1);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    msg = new string[3] { "success", dt.Rows[0]["Customer_id"] + "", dt.Rows[0]["Name"] + "" };
                }
                else
                {
                    msg = new string[3] { "failed", "", "" };
                }
               //msg= JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                msg = new string[3] { "failed", "", "" };
            }
            finally
            {
                db.connectionstate();
            }

            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult getcmpID(string CmpID)
        {
            string getcmp = "SELECT * FROM tbl_Complaint where CmpID='" + CmpID + "' and Status='Open'";
            DataTable tbll = db.GetAllRecord(getcmp);
            string res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Reply(string cm)
        {
            DataTable dt5 = null;
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                string query5 = "select * from tbl_Complaint Where CmpID='" + cm + "'";
                dt5 = db.GetAllRecord(query5);
                
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View(dt5);
        }
        [HttpPost]
        public ActionResult Reply(string ctype, string sub, string priority, string cmp, string CmpID, string customerreply, IEnumerable<HttpPostedFileBase> Attachement, string prevAttachement, string Status, string empid, string empnm, string complainbyname, string complainbyid)
        {
            string fdpath = "";
            string emppid = "";
            string empname = "";
            foreach (var file in Attachement)
            {
                if (file != null)
                {
                    fdpath += APIs.ComplainUpload(file)+",";
                }
                else
                {
                    fdpath = prevAttachement;
                }
            }
            string query6 = "select * from tbl_registration where Id='" + empnm + "'";
            DataTable dt6 = db.GetAllRecord(query6);
            if (dt6.Rows.Count > 0)
            {
                empname = dt6.Rows[0]["Name"].ToString();
                emppid = dt6.Rows[0]["Employee_id"].ToString();
            }
            string compquery = "select * from tbl_Complaint where CmpID='" + CmpID + "' and Status='Active'";
            DataTable compdt = db.GetAllRecord(compquery);
            if (compdt.Rows.Count > 0)
            {
                string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid,Complaintbycontact,customername,customerid,customercontact) VALUES ('" + CmpID + "','" + compdt.Rows[0]["ComplaintType"] + "','" + compdt.Rows[0]["Subject"] + "','" + compdt.Rows[0]["Priority"] + "','" + compdt.Rows[0]["Complaint"] + "','" + fdpath + "','','','" + Status + "','" + compdt.Rows[0]["Remark"] + "','" + customerreply + "','" + compdt.Rows[0]["Assignname"] + "','" + compdt.Rows[0]["Assignid"] + "','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + compdt.Rows[0]["Complaintbyid"] + "','" + compdt.Rows[0]["Complaintbyname"] + "','" + compdt.Rows[0]["Product_Img"] + "','" + compdt.Rows[0]["Product_id"] + "','" + compdt.Rows[0]["Product_name"] + "','" + compdt.Rows[0]["Product_price"] + "','" + compdt.Rows[0]["Product_quantity"] + "','" + compdt.Rows[0]["Total_proamount"] + "','" + compdt.Rows[0]["Product_type"] + "','" + compdt.Rows[0]["Order_id"] + "','" + compdt.Rows[0]["Orderid2"] + "','" + compdt.Rows[0]["order_rowid"] + "','" + compdt.Rows[0]["Complaintbycontact"] + "','" + compdt.Rows[0]["customername"] + "','" + compdt.Rows[0]["customerid"] + "','" + compdt.Rows[0]["customercontact"] + "')";


                db.InsertUpdateDelete("update tbl_Complaint set Status='Inactive' where CmpID='" + CmpID + "'");
                if (db.InsertUpdateDelete(addcmpl))
                {
                    activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Saved";
                    string query5 = "select * from tbl_Complaint  Where CmpID='" + CmpID + "'";
                    DataTable dt5 = db.GetAllRecord(query5);
                    return View(dt5);
                }
                else
                {
                    activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult AssignComplaint()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult AssignComplaint(string remark, string complaintid, string employee)
        {
            try
            {
                string emppid = "", empname = "";
                string query6 = "select * from tbl_registration where Id='" + employee + "'";
                DataTable dt6 = db.GetAllRecord(query6);
                if (dt6.Rows.Count > 0)
                {
                    empname = dt6.Rows[0]["Name"].ToString();
                    emppid = dt6.Rows[0]["Employee_id"].ToString();

                }
                string compquery = "select * from tbl_Complaint where CmpID='" + complaintid + "' and Status='Active'";
                DataTable compdt = db.GetAllRecord(compquery);
                if (compdt.Rows.Count > 0)
                {
                    string status = "Assign";

                    string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid,Complaintbycontact,customername,customerid,customercontact) VALUES ('" + complaintid + "','" + compdt.Rows[0]["ComplaintType"] + "','" + compdt.Rows[0]["Subject"] + "','" + compdt.Rows[0]["Priority"] + "','" + compdt.Rows[0]["Complaint"] + "','" + compdt.Rows[0]["Attachment"] + "','','','" + status + "','" + remark + "','" + remark + "','" + empname + "','" + emppid + "','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + compdt.Rows[0]["Complaintbyid"] + "','" + compdt.Rows[0]["Complaintbyname"] + "','" + compdt.Rows[0]["Product_Img"] + "','" + compdt.Rows[0]["Product_id"] + "','" + compdt.Rows[0]["Product_name"] + "','" + compdt.Rows[0]["Product_price"] + "','" + compdt.Rows[0]["Product_quantity"] + "','" + compdt.Rows[0]["Total_proamount"] + "','" + compdt.Rows[0]["Product_type"] + "','" + compdt.Rows[0]["Order_id"] + "','" + compdt.Rows[0]["Orderid2"] + "','" + compdt.Rows[0]["order_rowid"] + "','" + compdt.Rows[0]["Complaintbycontact"] + "','" + compdt.Rows[0]["customername"] + "','" + compdt.Rows[0]["customerid"] + "','" + compdt.Rows[0]["customercontact"] + "')";

                    db.InsertUpdateDelete("update tbl_Complaint set Status='Inactive' where CmpID='" + complaintid + "'");
                    if (db.InsertUpdateDelete(addcmpl))
                    {
                        activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Saved";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Save Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult Getcomplaintcount(string employee)
        {
            string res = "", emppid = "", tbl = "", json = "";
            int res1 = 0;
            try
            {
                string query6 = "select * from tbl_registration where Id='" + employee + "'";
                DataTable dt6 = db.GetAllRecord(query6);
                if (dt6.Rows.Count > 0)
                {
                    emppid = dt6.Rows[0]["Employee_id"].ToString();

                }
                string squery = "select * from tbl_Complaint where Assignid='" + emppid + "' and Status='Active' and Complaint_status!='Close'";
                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
                res1 = dt.Rows.Count;
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";

            }
            finally
            {
                db.connectionstate();
            }

            return Json(res1, JsonRequestBehavior.AllowGet);

        }

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Complaintreport()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        public JsonResult GetComplaint(string Start_date, string End_date, string branch, string status, string empnm)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                DateTime startdate = DateTime.ParseExact(Start_date, "d/M/yyyy", null);
                string formatteStart_date = startdate.ToString("yyyy-MM-dd");
                DateTime enddate = DateTime.ParseExact(End_date, "d/M/yyyy", null);
                string formattedEnd_date = enddate.ToString("yyyy-MM-dd");

                string squery = "";

                if (Session["designation"] + "" == "Sr REGIONAL TECHNICIAN INCHARGE" || Session["designation"] + "" == "REGIONAL TECHNICIAN INCHARGE")
                {
                    squery = "select * from tbl_Complaint where (CONVERT(datetime, datetime)>='" + formatteStart_date + "' and CONVERT(datetime, datetime)<='" + formattedEnd_date + "') and Status='Active'";
                }
                else
                {
                    squery = "select * from tbl_Complaint where (CONVERT(datetime, datetime)>='" + formatteStart_date + "' and CONVERT(datetime, datetime)<='" + formattedEnd_date + "') and Status='Active' and  Assignid='" + Session["userid"] + "'";
                }

                if (!string.IsNullOrEmpty(branch))
                {
                    squery += " AND Branchname = '" + branch + "'";
                }
                if (!string.IsNullOrEmpty(empnm))
                {
                    squery += " AND Logid = '" + empnm + "'";
                }

                if (!string.IsNullOrEmpty(status))
                {
                    squery += " AND Complaint_status = '" + status + "'";
                }
                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult getcmpdetails(string Cmpid)
        {
            string res1 = "";
            try
            {
                string getcmp = "SELECT * FROM tbl_Complaint where CmpID='" + Cmpid + "'";
                DataTable tbll = db.GetAllRecord(getcmp);
                res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"] + "".ToString(), Session["username"] + "".ToString(), Session["usermail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public ActionResult DAR()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        public JsonResult GetDAR(string Start_date, string End_date, string branch, string status, string empnm)
        {
            string res = "", tbldata = "", tbl = "", json = "";
           
            return Json(json, JsonRequestBehavior.AllowGet);

        }

        public JsonResult GetallComplaint()
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select * from tbl_Complaint where Status='Active'";

                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Dorder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Dorder(string Status, string subject, string Advisereply, string statusMessage, string cmpid)
        {
            string addcmpl = "insert into tbl_Complaint(Status,Subject,Addvisereply,statusmessage,CmpID,datetime,Logname,Logid,statuss)VALUES('" + Status + "','" + subject + "','" + Advisereply + "','" + statusMessage + "','" + cmpid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["username"] + "','" + Session["userid"] + "','Active')";
            db.InsertUpdateDelete("update tbl_Complaint set statuss='Inactive' where CmpID='" + cmpid + "'");
            if (db.InsertUpdateDelete(addcmpl))
            {
                activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                ViewBag.msg = "Data Saved";
            }
            else
            {
                activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                ViewBag.msg = "Data Save Failed";
            }
            return View();
        }
        public JsonResult GetDeliveredOrder(string searchby,int Month, int Year, string Reportfor, string Uniqueid, string activity)
        {
            string res = "", tbldata = "", tbl = "";
            string columnname = "";
            string json = "";
            try
            {
                if (Reportfor == "invoice")
                {
                    columnname = "Invoiceid";
                }
                else if (Reportfor == "order")
                {
                    columnname = "Order_id";
                }
                else if (Reportfor == "customer")
                {
                    columnname = "Customer_id";
                }
                else if (Reportfor == "post")
                {
                    columnname = "Address";
                }
                else if (Reportfor == "block")
                {
                    columnname = "Block";
                }
                else if (Reportfor == "tahsil")
                {
                    columnname = "Tahsil";
                }
                else if (Reportfor == "district")
                {
                    columnname = "District";
                }
                else if (Reportfor == "state")
                {
                    columnname = "State";
                }
                else if (Reportfor == "pincode")
                {
                    columnname = "Pincode";
                }
                else
                {
                    columnname = "Order_id";
                }
                
                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");

                string squery = "SELECT * from [tbl_order] where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' ";

                //string squery = "SELECT * FROM tbl_order where (Order_status='Delivered' or Order_status='Planted' or Order_status='Counted' or Order_status='Replaced' or Order_status='Technical Service' or Order_status='Feedback') and Status='Active' ";

                if (!string.IsNullOrEmpty(searchby))
                {
                    squery += " AND (Customer_mobile = '" + searchby + "' or Invoiceid = '" + searchby + "' or Customer_name = '" + searchby + "' or Order_id = '" + searchby + "')";
                }
                if (Uniqueid != null && Uniqueid != "")
                {
                    squery += " and " + columnname + "='" + Uniqueid + "'";
                }
                if (activity != null && activity != "")
                {
                    squery += " and Order_status='" + activity + "'";
                }
                if (Session["designation"] + "" == "Sr REGIONAL TECHNICIAN INCHARGE" || Session["designation"] + "" == "REGIONAL TECHNICIAN INCHARGE")
                {
                    
                }
                else
                {
                    string servicequery = "Select * from tbl_servicearea where Employee_id='" + Session["userid"] + "' and Status='Active'";
                    DataTable servicedt = db.GetAllRecord(servicequery);
                    if (servicedt.Rows.Count > 0)
                    {
                        string State = "", District = "", Tahsil = "", Block = "", Pincode = "";
                        for (int i = 0; i < servicedt.Rows.Count; i++)
                        {
                            if (servicedt.Rows[i]["State"] + "" != "")
                            {
                                State += " State='" + servicedt.Rows[i]["State"] + "' or";
                            }
                            if (servicedt.Rows[i]["District"] + "" != "")
                            {
                                District += " District='" + servicedt.Rows[i]["District"] + "' or";
                            }
                            if (servicedt.Rows[i]["Tahsil"] + "" != "")
                            {
                                Tahsil += " Tahsil='" + servicedt.Rows[i]["Tahsil"] + "' or";
                            }
                            if (servicedt.Rows[i]["Vill_town"] + "" != "")
                            {
                                Block += " Block='" + servicedt.Rows[i]["Vill_town"] + "' or";
                            }
                            if (servicedt.Rows[i]["Pincode"] + "" != "")
                            {
                                Pincode += " Pincode='" + servicedt.Rows[i]["Pincode"] + "' or";
                            }
                        }
                        if (State.EndsWith(" or"))
                        {
                            State = State.Substring(0, State.Length - 3);
                            State = "(" + State + ")";
                        }
                        if (District.EndsWith(" or"))
                        {
                            District = District.Substring(0, District.Length - 3);
                            District = "(" + District + ")";
                        }
                        if (Tahsil.EndsWith(" or"))
                        {
                            Tahsil = Tahsil.Substring(0, Tahsil.Length - 3);
                            Tahsil = "(" + Tahsil + ")";
                        }
                        if (Block.EndsWith(" or"))
                        {
                            Block = Block.Substring(0, Block.Length - 3);
                            Block = "(" + Block + ")";
                        }
                        if (Pincode.EndsWith(" or"))
                        {
                            Pincode = Pincode.Substring(0, Pincode.Length - 3);
                            Pincode = "(" + Pincode + ")";
                        }

                        if (State != "")
                        {
                            squery += " AND " + State;
                        }
                        if (District != "")
                        {
                            squery += " AND " + District;
                        }
                        if (Tahsil != "")
                        {
                            squery += " AND " + Tahsil;
                        }
                        if (Block != "")
                        {
                            squery += " AND " + Block;
                        }
                        if (Pincode != "")
                        {
                            squery += " AND " + Pincode;
                        }


                    }
                }
                
                activitylog.Activitylogins("tbl_attendance", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    json = JsonConvert.SerializeObject(dt, Formatting.None);
                }
                else
                {
                    //res = "no Data";
                    res = "No data";

                }
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult PlantationService(string OrderId, string OrderId2, string Proid, string Totalplanted, string Plantationstatus, string Totalplant, string Plantcount,string Plantationby,string Remark)
        {
            string msg = "";
            try
            {
                string squery = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    string plantationstatus = dt.Rows[0]["Plantation_status"] + "";
                    if (plantationstatus != null && plantationstatus != "")
                    {
                        string query = "update tbl_order set Plantation_status='" + Plantationstatus + "',Plantation_quantity='" + Totalplanted + "' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'";
                        //string query = "Update [tbl_order] set ([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Dispatch','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','Planted','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["OTP"] + "','" + DateTime.Parse(dt.Rows[0]["ExpDelivery_date"].ToString()).ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + Plantationstatus + "','" + Totalplanted + "' )";

                        //db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            string leftplant = "";
                            if (plantationstatus == "No Due")
                            {
                                leftplant = "0";
                                Plantcount = (Convert.ToInt32(Totalplant) - Convert.ToInt32(dt.Rows[0]["Plantation_quantity"] + "")).ToString();

                            }
                            else
                            {
                                leftplant= (Convert.ToInt32(Totalplant) - Convert.ToInt32(Totalplanted)).ToString();
                            }
                            string query1 = "INSERT INTO [dbo].[tbl_plantation] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Status] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name],[OrderID2] ,[Plantation_status] ,[Product_quantity] ,[Plantation_quantity] ,[Left_quantity],[Datetime],[BranchName],Remark,Plantationby) VALUES ('" + OrderId + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + Session["userid"] + "','" + Session["username"] + "','Active','" + Session["ubrcode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["OrderID2"] + "','" + Plantationstatus + "','" + Totalplant + "','" + Plantcount + "','" + leftplant + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+Session["ubrname"]+ "','" + Remark + "','" + Plantationby + "')";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_plantation", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_plantation", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }
                    }
                    else
                    {
                        //Insert

                        string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Planted','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','"+dt.Rows[0]["Transport_status"] +"','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','"+dt.Rows[0]["Product_type"]+"','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + dt.Rows[0]["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','"+ Plantationstatus + "','"+ Totalplanted + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + dt.Rows[0]["Dilivery_month"] + "','" + dt.Rows[0]["Invoicepdf"] + "')";

                        db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"]+"", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            string leftplant ="";
                            if (plantationstatus == "No Due")
                            {
                                leftplant = "0";
                                Plantcount=(Convert.ToInt32(Totalplant) -Convert.ToInt32(dt.Rows[0]["Plantation_quantity"] + "")).ToString();

                            }
                            else
                            {
                                leftplant = (Convert.ToInt32(Totalplant) - Convert.ToInt32(Totalplanted)).ToString();
                            }
                            string query1 = "INSERT INTO [dbo].[tbl_plantation] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Status] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name],[OrderID2] ,[Plantation_status] ,[Product_quantity] ,[Plantation_quantity] ,[Left_quantity],[Datetime],[BranchName],Remark,Plantationby) VALUES ('" + OrderId + "','"+ dt.Rows[0]["Customer_name"] + "','"+ dt.Rows[0]["Customer_id"] + "','"+ dt.Rows[0]["Customer_mobile"] + "','"+ dt.Rows[0]["Customer_address"] + "','"+ dt.Rows[0]["Pincode"] + "','"+Session["userid"]+"','"+ Session["username"] + "','Active','" + Session["ubrcode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','"+ dt.Rows[0]["OrderID2"] + "','"+ Plantationstatus + "','"+Totalplant+"','"+ Plantcount + "','"+ leftplant + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+Session["ubrname"]+ "','" + Remark + "','" + Plantationby + "')";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_plantation", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_plantation", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }

                            
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }



                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());


                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg,JsonRequestBehavior.AllowGet);
        }
        public JsonResult CountingService()
        {
            var OrderId = Request.Form["OrderId"];
            var OrderId2 = Request.Form["OrderId2"]; 
            var Proid = Request.Form["Proid"]; 
            var TotalCounting = Request.Form["TotalCounting"]; 
            var Countingstatus = Request.Form["Countingstatus"]; 
            var Totalplant = Request.Form["Totalplant"]; 
            var Cplantcount = Request.Form["Cplantcount"]; 
            var Goodplant = Request.Form["Goodplant"]; 
            var Replacementplant = Request.Form["Replacementplant"]; 
            var Remark = Request.Form["Remark"];
            var Leftcountion = Request.Form["Leftcountion"];
            string msg = "";
            try
            {
                string squery = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    string countingstatus = dt.Rows[0]["Counting_status"] + "";
                    if (countingstatus != null && countingstatus != "")
                    {
                        string aPlant_count = "";

                        string Plant_count = dt.Rows[0]["Plant_count"] + "";
                        string goodplantcount = dt.Rows[0]["Good_quantity"] + "";
                        string Replacementplantcount = dt.Rows[0]["Replacement_quantity"] + "";
                        goodplantcount = (Convert.ToInt32(goodplantcount) + Convert.ToInt32(Goodplant)).ToString();
                        Replacementplantcount = (Convert.ToInt32(Replacementplantcount) + Convert.ToInt32(Replacementplant)).ToString();

                        string leftplant = "";
                        if (Countingstatus == "Due")
                        {
                            aPlant_count = TotalCounting;
                            leftplant = (Convert.ToInt32(Totalplant) - Convert.ToInt32(aPlant_count)).ToString();

                        }
                        else
                        {
                            aPlant_count = Totalplant;
                            leftplant = "0";
                            //Cplantcount = (Convert.ToInt32(Totalplant) - Convert.ToInt32(dt.Rows[0]["Plantation_quantity"] + "")).ToString();
                        }
                       
                        string query = "update tbl_order set Counting_status='" + Countingstatus + "',Plant_count='" + aPlant_count + "',Good_quantity='" + goodplantcount + "',Replacement_quantity='" + Replacementplantcount + "',Left_counting='"+ leftplant + "' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'";
                     
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            

                            string query1 = "INSERT INTO [dbo].[tbl_counting] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name] ,[OrderID2] ,[counting_status] ,[Product_quantity] ,[Plan_quantity] ,[Good_quantity] ,[Replacement_quantity] ,[Left_quantity],Remark) VALUES('" + OrderId + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["OrderID2"] + "','" + Countingstatus + "','" + Totalplant + "','" + Cplantcount + "','" + Goodplant + "','" + Replacementplant + "','" + leftplant + "','"+ Remark + "')";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_counting", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_counting", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }
                    }
                    else
                    {
                        //Insert
                        string leftplant = "";
                        if (Countingstatus == "No Due")
                        {
                            leftplant = "0";

                        }
                        else
                        {
                            leftplant = (Convert.ToInt32(Totalplant) - Convert.ToInt32(Cplantcount)).ToString();
                        }
                        string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity,Counting_status,Plant_count,Good_quantity,Replacement_quantity,Left_counting,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Counted','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','" + dt.Rows[0]["Transport_status"] + "','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','"+dt.Rows[0]["Product_type"]+"','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + Remark + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Plantation_status"] + "','" + dt.Rows[0]["Plantation_quantity"] + "','"+ Countingstatus + "','"+ Cplantcount + "','"+ Goodplant + "','"+ Replacementplant + "','"+ leftplant + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + dt.Rows[0]["Dilivery_month"] + "','" + dt.Rows[0]["Invoicepdf"] + "' )";

                        db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                           

                            string query1 = "INSERT INTO [dbo].[tbl_counting] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name] ,[OrderID2] ,[counting_status] ,[Product_quantity] ,[Plan_quantity] ,[Good_quantity] ,[Replacement_quantity] ,[Left_quantity],Remark) VALUES('" + OrderId + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["OrderID2"] + "','" + Countingstatus + "','" + Totalplant + "','" + Cplantcount + "','" + Goodplant + "','" + Replacementplant + "','"+ leftplant + "','"+ Remark + "')";

                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_counting", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_counting", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }



                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ReplacementService()
        {
            var OrderId = Request.Form["OrderId"];
            var OrderId2 = Request.Form["OrderId2"];
            var Proid = Request.Form["Proid"];
            var replacement_quantity = Request.Form["replacement_quantity"];
            var replaced_plant = Request.Form["replaced_plant"];
            var leftreplacement = Request.Form["leftreplacement"];
            var replacedstatus = Request.Form["replacedstatus"];
            var totalreplaced = Request.Form["totalreplaced"];
            var replacecount = Request.Form["replacecount"];
            var replacementstatus = Request.Form["replacementstatus"];
            var replacementby = Request.Form["replacementby"];
            var Remark = Request.Form["Remark"];
            string msg = "";
            try
            {
                string squery = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    string areplacedstatus = dt.Rows[0]["Replacement_status"] + "";
                    if (areplacedstatus != null && areplacedstatus != "")
                    {
                        string areplacecount = "";

                        string Replaced_plant = dt.Rows[0]["Replaced_plant"] + "";
                        string Left_replacement = dt.Rows[0]["Left_replacement"] + "";
                        //goodplantcount = (Convert.ToInt32(goodplantcount) + Convert.ToInt32(Goodplant)).ToString();
                        //Replacementplantcount = (Convert.ToInt32(Replacementplantcount) + Convert.ToInt32(Replacementplant)).ToString();

                        string leftplant = "";
                        if (replacementstatus == "Due")
                        {
                            areplacecount = totalreplaced;
                            leftplant = (Convert.ToInt32(replacement_quantity) - Convert.ToInt32(areplacecount)).ToString();

                        }
                        else
                        {
                            areplacecount = replacement_quantity;
                            leftplant = "0";
                            

                        }

                        string query = "update tbl_order set [Replacement_status]='" + replacementstatus + "',[Replaced_plant]='" + areplacecount + "',[Left_replacement]='" + leftplant + "' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'";

                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            string query1 = "INSERT INTO [dbo].[tbl_replacement] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_name] ,[Product_id] ,[OrderID2] ,[Replacement_status] ,[Product_quantity] ,[Replacement_quantity] ,[Left_quantity],Remark,Replacementby) VALUES('" + OrderId + "', '" + dt.Rows[0]["Customer_name"] + "', '" + dt.Rows[0]["Customer_id"] + "', '" + dt.Rows[0]["Customer_mobile"] + "', '" + dt.Rows[0]["Customer_address"] + "', '" + dt.Rows[0]["Pincode"] + "', '" + Session["userid"] + "', '" + Session["username"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', 'Active', '" + Session["ubrname"] + "', '" + Session["ubrcode"] + "', '" + dt.Rows[0]["Product_Img"] + "', '" + dt.Rows[0]["Product_id"] + "', '" + dt.Rows[0]["Product_name"] + "', '" + dt.Rows[0]["OrderID2"] + "','" + replacementstatus + "','" + replacement_quantity + "','" + replacecount + "','" + leftplant + "','"+ Remark + "','"+ replacementby + "')";

                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_replacement", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_replacement", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }
                    }
                    else
                    {
                        //Insert
                        string leftplant = "";
                        if (replacementstatus == "No Due")
                        {
                            leftplant = "0";

                        }
                        else
                        {
                            leftplant = (Convert.ToInt32(replacement_quantity) - Convert.ToInt32(replacecount)).ToString();
                        }
                        string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity,Counting_status,Plant_count,Good_quantity,Replacement_quantity,Left_counting, Replacement_status,Replaced_plant,Left_replacement,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Replaced','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','" + dt.Rows[0]["Transport_status"] + "','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','"+dt.Rows[0]["Product_type"]+"','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + Remark + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Plantation_status"] + "','" + dt.Rows[0]["Plantation_quantity"] + "','" + dt.Rows[0]["Counting_status"] + "','" + dt.Rows[0]["Plant_count"] + "','" + dt.Rows[0]["Good_quantity"] + "','" + dt.Rows[0]["Replacement_quantity"] + "','" + dt.Rows[0]["Left_counting"] + "','"+replacementstatus+ "','" + replacecount + "','" + leftplant + "','" + dt.Rows[0]["Points"] + "' ,'" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + dt.Rows[0]["Dilivery_month"] + "','" + dt.Rows[0]["Invoicepdf"] + "')";

                        db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                            string query1 = "INSERT INTO [dbo].[tbl_replacement] ([Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_name] ,[Product_id] ,[OrderID2] ,[Replacement_status] ,[Product_quantity] ,[Replacement_quantity] ,[Left_quantity],Remark,Replacementby) VALUES('" + OrderId + "', '" + dt.Rows[0]["Customer_name"] + "', '" + dt.Rows[0]["Customer_id"] + "', '" + dt.Rows[0]["Customer_mobile"] + "', '" + dt.Rows[0]["Customer_address"] + "', '" + dt.Rows[0]["Pincode"] + "', '" + Session["userid"] + "', '" + Session["username"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', 'Active', '" + Session["ubrname"] + "', '" + Session["ubrcode"] + "', '" + dt.Rows[0]["Product_Img"] + "', '" + dt.Rows[0]["Product_id"] + "', '" + dt.Rows[0]["Product_name"] + "', '" + dt.Rows[0]["OrderID2"] + "','"+ replacementstatus + "','"+ replacement_quantity + "','"+ replacecount + "','"+ leftplant + "','"+Remark+"','"+replacementby+"')";

                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_replacement", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_replacement", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }



                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }

        public JsonResult TechnicalService()
        {
            var OrderId = Request.Form["OrderId"];
            var OrderId2 = Request.Form["OrderId2"];
            var Proid = Request.Form["Proid"];
            var obserheight = Request.Form["obserheight"];
            var treatheight = Request.Form["treatheight"];
            var obsergirth = Request.Form["obsergirth"];
            var treatgirth = Request.Form["treatgirth"];
            var obsergplant = Request.Form["treatgirth"];
            var treatgplant = Request.Form["treatgplant"];
            var obserfertilizer = Request.Form["obserfertilizer"];
            var treatfertilizer = Request.Form["treatfertilizer"];
            var obserdiseases = Request.Form["obserdiseases"];
            var treatdiseases = Request.Form["treatdiseases"];
            var obserirrigation = Request.Form["obserirrigation"];
            var treatirrigation = Request.Form["treatirrigation"];
            var obserweeding = Request.Form["obserweeding"];
            var treatweeding = Request.Form["treatweeding"];
            var remark = Request.Form["remark"];

            string msg = "";
            try
            {
                string squery = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    DateTime currentDate = DateTime.Now;
                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.ToString("yy");
                    string serviceid = "S" + currentYearmonth + "" + arandom(2);

                    string servicestatus = "";
                    string Service_status = dt.Rows[0]["Service_status"] + "";
                    string searchString = "Service ";
                    if (Service_status != null && Service_status != "")
                    {
                        int index = Service_status.IndexOf("Service ");
                        string result = Service_status.Substring(index + searchString.Length);
                        int sercount = Convert.ToInt32(result) + 1;
                        servicestatus = searchString +""+ sercount;
                        serviceid = serviceid + sercount;
                    }
                    else
                    {
                        servicestatus = searchString+"1";
                        serviceid = serviceid +"1";
                    }

                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity,Counting_status,Plant_count,Good_quantity,Replacement_quantity,Left_counting, Replacement_status,Replaced_plant,Left_replacement,Service_status,Service_id,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Technical Service','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','" + dt.Rows[0]["Transport_status"] + "','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','"+dt.Rows[0]["Product_type"]+"','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + remark + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Plantation_status"] + "','" + dt.Rows[0]["Plantation_quantity"] + "','" + dt.Rows[0]["Counting_status"] + "','" + dt.Rows[0]["Plant_count"] + "','" + dt.Rows[0]["Good_quantity"] + "','" + dt.Rows[0]["Replacement_quantity"] + "','" + dt.Rows[0]["Left_counting"] + "','" + dt.Rows[0]["Replacement_status"] + "','" + dt.Rows[0]["Replaced_plant"] + "','" + dt.Rows[0]["Left_replacement"] + "','"+ servicestatus + "','"+ serviceid + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + dt.Rows[0]["Dilivery_month"] + "','" + dt.Rows[0]["Invoicepdf"] + "' )";

                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        string query1 = "INSERT INTO [dbo].[tbl_technical_service] ([Service_id],[Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name] ,[OrderID2] ,[service_status] ,[Obserheight],[Treatheight] ,[Obsergirth] ,[Treatgirth] ,[Obsergplant] ,[Treatgplant] ,[Obserfertilizer] ,[Treatfertilizer] ,[Obserdiseases] ,[Treatdiseases] ,[Obserirrigation] ,[Treatirrigation] ,[Obserweeding] ,[Treatweeding] ,[Remark]) VALUES ('" + serviceid+ "','" + OrderId + "', '" + dt.Rows[0]["Customer_name"] + "', '" + dt.Rows[0]["Customer_id"] + "', '" + dt.Rows[0]["Customer_mobile"] + "', '" + dt.Rows[0]["Customer_address"] + "', '" + dt.Rows[0]["Pincode"] + "', '" + Session["userid"] + "', '" + Session["username"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', 'Active', '" + Session["ubrname"] + "', '" + Session["ubrcode"] + "', '" + dt.Rows[0]["Product_Img"] + "', '" + dt.Rows[0]["Product_id"] + "', '" + dt.Rows[0]["Product_name"] + "', '" + dt.Rows[0]["OrderID2"] + "','"+servicestatus+"','"+ obserheight + "','"+ treatheight + "','"+ obsergirth + "','"+ treatgirth + "','"+ obsergplant + "','"+ treatgplant + "','"+ obserfertilizer + "','"+ treatfertilizer + "','"+ obserdiseases + "','"+ treatdiseases + "','"+ obserirrigation + "','"+ obserweeding + "','" + treatirrigation + "','"+ treatweeding + "','"+ remark + "')";

                        if (db.InsertUpdateDelete(query1))
                        {
                            activitylog.Activitylogins("tbl_technical_service", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Data Updated";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_technical_service", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Update Failed";
                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AssignArea(string ss)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult AssignArea()
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var employee = Request.Form["employee"];
            var employeename = Request.Form["employeename"];
            var employeeid = Request.Form["employeeid"];


            var semployee = Request.Form["semployee"];
            var semployeename = Request.Form["semployeename"];
            var semployeeid = Request.Form["semployeeid"];

            try
            {
                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);

                if (dtres.Rows.Count > 0)
                {
                    db.InsertUpdateDelete("update tbl_servicearea set Status='Inactive' where Employee_rowid='" + employee + "'");
                    for (int i = 0; i < dtres.Rows.Count; i++)
                    {
                        string selqiery = "select * from tbl_servicearea where Pincode='" + dtres.Rows[i]["Pincode"] + "' and Tahsil='" + dtres.Rows[i]["Tahsil"] + "' and Vill_town='" + dtres.Rows[i]["Block"] + "' and Employee_rowid='" + employee + "'";
                        DataTable seldt = db.GetAllRecord(selqiery);
                        if (seldt.Rows.Count > 0)
                        {
                            string insquery = "update tbl_servicearea set Status='Active',[reporting_id]='"+ semployeeid + "',[reporting_rowid]='"+ semployee + "',[reporting_name]='"+ semployeename + "' where Pincode='" + dtres.Rows[i]["Pincode"] + "' and Tahsil='" + dtres.Rows[i]["Tahsil"] + "' and Vill_town='" + dtres.Rows[i]["Block"] + "' and Employee_rowid='" + employee + "'";
                            db.InsertUpdateDelete(insquery);
                        }
                        else
                        {
                            string insquery = "insert into tbl_servicearea([Employee_id],[Employee_rowid],[Employee_name],[State],[District],[Tahsil],[Vill_town],[Pincode],[Status],[logname],[logid],[Date_time],[reporting_id],[reporting_rowid],[reporting_name]) values('" + employeeid + "','" + employee + "','" + employeename + "','" + dtres.Rows[i]["State"] + "','" + dtres.Rows[i]["District"] + "','" + dtres.Rows[i]["Tahsil"] + "','" + dtres.Rows[i]["Block"] + "','" + dtres.Rows[i]["Pincode"] + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + semployeeid + "','" + semployee + "','" + semployeename + "')";
                            db.InsertUpdateDelete(insquery);
                        }
                    }
                    msg = "Data Saved";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateAssignArea(string Up)
        {
            string res = "";
            try
            {
                string query = "select * from [tbl_servicearea] where Employee_rowid='" + Up + "' and Status='Active'";
                activitylog.Activitylogins("tbl_servicearea", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DeleteAssignArea(string Up)
        {
            string res = "";
            try
            {
                string query = "delete from [tbl_servicearea] where Id='" + Up + "'";
               
                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_servicearea", Up.ToString(), query, "Success", "Delete Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "Delete Success";

                }
                else
                {
                    activitylog.Activitylogins("tbl_servicearea", Up.ToString(), query, "Failed", "Delete Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    res = "Delete Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetcustomerArea(string Up)
        {
            string res = "";
            try
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("SR.NO.", typeof(string));
                dataTable.Columns.Add("Employee", typeof(string));
                dataTable.Columns.Add("Reporting", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("Contact", typeof(string));
                dataTable.Columns.Add("Address", typeof(string));
                string query = "select * from [tbl_servicearea] where Employee_rowid='" + Up + "' and Status='Active'";
                activitylog.Activitylogins("tbl_servicearea", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable adt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (adt.Rows.Count > 0)
                {
                    string queryc2 = "select * from tbl_customer where Status='Active'";
                    string queryc3 = "";
                    for (int j = 0; j < adt.Rows.Count; j++)
                    {
                        string queryc = "";
                        //queryc = "select * from tbl_customer where Status='Active'";
                        if (adt.Rows[j]["Pincode"] + "" != "")
                        {
                            queryc += " Postal_code='" + adt.Rows[j]["Pincode"] + "" + "' and";
                        }
                        if (adt.Rows[j]["Tahsil"] + "" != "")
                        {
                            queryc += " Tahsil='" + adt.Rows[j]["Tahsil"] + "" + "' and";
                        }
                        if (adt.Rows[j]["Vill_town"] + "" != "")
                        {
                            queryc += " Block='" + adt.Rows[j]["Vill_town"] + "" + "' and";
                        }

                        if (queryc != "")
                        {
                            if (queryc.EndsWith(" and"))
                            {
                                queryc = queryc.Substring(0, queryc.Length - 4);
                            }
                            queryc3 += " (" + queryc + ") or";
                        }
                    }
                    
                    if (queryc3 != "")
                    {
                        if (queryc3.EndsWith(" or"))
                        {
                            queryc3 = queryc3.Substring(0, queryc3.Length - 3);
                        }
                        queryc2 = queryc2 + " and (" + queryc3 + ")";
                    }
                    
                    activitylog.Activitylogins("tbl_customer", "", queryc2, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable dtc = db.GetAllRecord(queryc2);
                    activitylog.Activitylogupd("Success", "");
                    if (dtc.Rows.Count > 0)
                    {
                        for (int jc = 0; jc < dtc.Rows.Count; jc++)
                        {
                            DataRow newRow = dataTable.NewRow();

                            newRow["SR.NO."] = (jc+1);
                            newRow["Employee"] = adt.Rows[0]["Employee_name"] +"";
                            newRow["Reporting"] = adt.Rows[0]["reporting_name"] + "";
                            newRow["Customer"] = dtc.Rows[jc]["Name"] + "";
                            newRow["Contact"] = dtc.Rows[jc]["Mobile"] + "";
                            newRow["Address"] = dtc.Rows[jc]["Full_address"] + "";

                            dataTable.Rows.Add(newRow);
                        }
                    }

                    res = JsonConvert.SerializeObject(dataTable, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetCustomerCount(string Pincode,string Tahsil,string Block)
        {
            string res = "0";
            try
            {
                string query = "select * from tbl_customer where Status='Active'";
                if (Pincode != "")
                {
                    query += " and Postal_code='"+Pincode+"'";
                }
                if (Tahsil != "")
                {
                    query += " and Tahsil='" + Tahsil + "'";
                }
                if (Block != "")
                {
                    query += " and Block='" + Block + "'";
                }
                activitylog.Activitylogins("tbl_customer","", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = dt.Rows.Count.ToString();

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult salesrecord(string orderid,string orderid2)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                ViewBag.orderid = orderid;
                ViewBag.orderid2 = orderid2;
            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult salesrecord(IEnumerable<HttpPostedFileBase> Attachement, string prevAttachement, FormCollection form)
        {
            try
            {
                string fdpath = "";
                if (Attachement != null)
                {
                    foreach (var file in Attachement)
                    {
                        if (file != null && file.ContentLength > 0)
                        {
                            fdpath += APIs.ComplainUpload(file) + ",";
                        }
                        else
                        {
                            fdpath = prevAttachement;
                        }
                    }
                }
                else
                {
                    fdpath = "No file Upload";
                }

                string cmpID = arandom(6);

                
                string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,Complaintbycontact,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid,customername,customerid,customercontact) VALUES ('" + cmpID + "','" + form["cmptype"] + "','" + form["Subject"] + "','" + form["Priority"] + "','" + form["complaint"] + "','" + fdpath + "','','','Open','" + form["complaint"] + "','" + form["complaint"] + "','','','Active','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["userid"] + "','" + Session["username"] + "','" + Session["userphon"] + "','"+ form["cproductimg"] + "','" + form["cproductid"] + "','" + form["cproductname"] + "','" + form["cproductprice"] + "','" + form["cproductquantity"] + "','" + form["cproductamount"] + "','" + form["cproducttype"] + "','" + form["cOrderid"] + "','" + form["cOrderid2"] + "','" + form["coid"] + "','"+ form["customername"] + "','"+ form["customerid"] + "','" + form["customercontact"] + "')";

                if (db.InsertUpdateDelete(addcmpl))
                {
                    activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Saved";
                }
                else
                {
                    activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }
                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult ServiceFeedback()
        {
            var OrderId = Request.Form["OrderId"];
            var OrderId2 = Request.Form["OrderId2"];
            var Proid = Request.Form["Proid"];
            var obserheight = Request.Form["obserheight"];
            var treatheight = Request.Form["treatheight"];
            var obsergirth = Request.Form["obsergirth"];
            var treatgirth = Request.Form["treatgirth"];
            var obsergplant = Request.Form["treatgirth"];
            var treatgplant = Request.Form["treatgplant"];
            var obserfertilizer = Request.Form["obserfertilizer"];
            var treatfertilizer = Request.Form["treatfertilizer"];
            var obserdiseases = Request.Form["obserdiseases"];
            var treatdiseases = Request.Form["treatdiseases"];
            var obserirrigation = Request.Form["obserirrigation"];
            var treatirrigation = Request.Form["treatirrigation"];
            var obserweeding = Request.Form["obserweeding"];
            var treatweeding = Request.Form["treatweeding"];
            var remark = Request.Form["remark"];

            string msg = "";
            try
            {
                string squery = "select * from tbl_order where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and Status='Active'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    DateTime currentDate = DateTime.Now;
                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.ToString("yy");
                    string serviceid = "S" + currentYearmonth + "" + arandom(2);

                    string servicestatus = "";
                    string Service_status = dt.Rows[0]["Service_status"] + "";
                    string searchString = "Service ";
                    if (Service_status != null && Service_status != "")
                    {
                        int index = Service_status.IndexOf("Service ");
                        string result = Service_status.Substring(index + searchString.Length);
                        int sercount = Convert.ToInt32(result) + 1;
                        servicestatus = searchString + "" + sercount;
                        serviceid = serviceid + sercount;
                    }
                    else
                    {
                        servicestatus = searchString + "1";
                        serviceid = serviceid + "1";
                    }

                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Plantation_status,Plantation_quantity,Counting_status,Plant_count,Good_quantity,Replacement_quantity,Left_counting, Replacement_status,Replaced_plant,Left_replacement,Service_status,Service_id,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Technical Service','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','" + dt.Rows[0]["Transport_status"] + "','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + remark + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Plantation_status"] + "','" + dt.Rows[0]["Plantation_quantity"] + "','" + dt.Rows[0]["Counting_status"] + "','" + dt.Rows[0]["Plant_count"] + "','" + dt.Rows[0]["Good_quantity"] + "','" + dt.Rows[0]["Replacement_quantity"] + "','" + dt.Rows[0]["Left_counting"] + "','" + dt.Rows[0]["Replacement_status"] + "','" + dt.Rows[0]["Replaced_plant"] + "','" + dt.Rows[0]["Left_replacement"] + "','" + servicestatus + "','" + serviceid + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + dt.Rows[0]["Dilivery_month"] + "','" + dt.Rows[0]["Invoicepdf"] + "' )";

                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + OrderId2 + "' and id='" + dt.Rows[0]["id"] + "'");
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        string query1 = "INSERT INTO [dbo].[tbl_technical_service] ([Service_id],[Order_id] ,[Customer_name] ,[Customer_id] ,[Customer_mobile] ,[Customer_address] ,[Pincode] ,[logid] ,[logname] ,[Datetime] ,[Status] ,[BranchName] ,[BranchCode] ,[Product_Img] ,[Product_id] ,[Product_name] ,[OrderID2] ,[service_status] ,[Obserheight],[Treatheight] ,[Obsergirth] ,[Treatgirth] ,[Obsergplant] ,[Treatgplant] ,[Obserfertilizer] ,[Treatfertilizer] ,[Obserdiseases] ,[Treatdiseases] ,[Obserirrigation] ,[Treatirrigation] ,[Obserweeding] ,[Treatweeding] ,[Remark]) VALUES ('" + serviceid + "','" + OrderId + "', '" + dt.Rows[0]["Customer_name"] + "', '" + dt.Rows[0]["Customer_id"] + "', '" + dt.Rows[0]["Customer_mobile"] + "', '" + dt.Rows[0]["Customer_address"] + "', '" + dt.Rows[0]["Pincode"] + "', '" + Session["userid"] + "', '" + Session["username"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', 'Active', '" + Session["ubrname"] + "', '" + Session["ubrcode"] + "', '" + dt.Rows[0]["Product_Img"] + "', '" + dt.Rows[0]["Product_id"] + "', '" + dt.Rows[0]["Product_name"] + "', '" + dt.Rows[0]["OrderID2"] + "','" + servicestatus + "','" + obserheight + "','" + treatheight + "','" + obsergirth + "','" + treatgirth + "','" + obsergplant + "','" + treatgplant + "','" + obserfertilizer + "','" + treatfertilizer + "','" + obserdiseases + "','" + treatdiseases + "','" + obserirrigation + "','" + obserweeding + "','" + treatirrigation + "','" + treatweeding + "','" + remark + "')";

                        if (db.InsertUpdateDelete(query1))
                        {
                            activitylog.Activitylogins("tbl_technical_service", "", query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Data Updated";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_technical_service", "", query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            msg = "Update Failed";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_order", dt.Rows[0]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Update Failed";
                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        /// <Reports Customer Sales Record Open>
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ServiceReport()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult GetCSR(int Month, int Year, string Reportfor, string Uniqueid,string activity)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "invoice")
                {
                    columnname = "Invoiceid";
                }
                else if (Reportfor == "order")
                {
                    columnname = "Order_id";
                }
                else if (Reportfor == "customer")
                {
                    columnname = "Customer_id";
                }
                else if (Reportfor == "post")
                {
                    columnname = "Address";
                }
                else if (Reportfor == "block")
                {
                    columnname = "Block";
                }
                else if (Reportfor == "tahsil")
                {
                    columnname = "Tahsil";
                }
                else if (Reportfor == "district")
                {
                    columnname = "District";
                }
                else if (Reportfor == "state")
                {
                    columnname = "State";
                }
                else if (Reportfor == "pincode")
                {
                    columnname = "Pincode";
                }
                else
                {
                    columnname = "Order_id";
                }

                DateTime desiredDate = new DateTime(Year, Month, 1);
                string formattedDate = desiredDate.ToString("MMM-yyyy");
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string squery = "";
                if (Session["designation"] + "" == "Sr REGIONAL TECHNICIAN INCHARGE" || Session["designation"] + "" == "REGIONAL TECHNICIAN INCHARGE")
                {

                }
                else
                {
                    string servicequery = "Select * from tbl_servicearea where Employee_id='" + Session["userid"] + "' and Status='Active'";
                    DataTable servicedt = db.GetAllRecord(servicequery);
                    if (servicedt.Rows.Count > 0)
                    {
                        string State = "", District = "", Tahsil = "", Block = "", Pincode = "";
                        for (int i = 0; i < servicedt.Rows.Count; i++)
                        {
                            if (servicedt.Rows[i]["State"] + "" != "")
                            {
                                State += " State='" + servicedt.Rows[i]["State"] + "' or";
                            }
                            if (servicedt.Rows[i]["District"] + "" != "")
                            {
                                District += " District='" + servicedt.Rows[i]["District"] + "' or";
                            }
                            if (servicedt.Rows[i]["Tahsil"] + "" != "")
                            {
                                Tahsil += " Tahsil='" + servicedt.Rows[i]["Tahsil"] + "' or";
                            }
                            if (servicedt.Rows[i]["Vill_town"] + "" != "")
                            {
                                Block += " Block='" + servicedt.Rows[i]["Vill_town"] + "' or";
                            }
                            if (servicedt.Rows[i]["Pincode"] + "" != "")
                            {
                                Pincode += " Pincode='" + servicedt.Rows[i]["Pincode"] + "' or";
                            }
                        }
                        if (State.EndsWith(" or"))
                        {
                            State = State.Substring(0, State.Length - 3);
                            State = "(" + State + ")";
                        }
                        if (District.EndsWith(" or"))
                        {
                            District = District.Substring(0, District.Length - 3);
                            District = "(" + District + ")";
                        }
                        if (Tahsil.EndsWith(" or"))
                        {
                            Tahsil = Tahsil.Substring(0, Tahsil.Length - 3);
                            Tahsil = "(" + Tahsil + ")";
                        }
                        if (Block.EndsWith(" or"))
                        {
                            Block = Block.Substring(0, Block.Length - 3);
                            Block = "(" + Block + ")";
                        }
                        if (Pincode.EndsWith(" or"))
                        {
                            Pincode = Pincode.Substring(0, Pincode.Length - 3);
                            Pincode = "(" + Pincode + ")";
                        }

                        if (State != "")
                        {
                            squery += " AND " + State;
                        }
                        if (District != "")
                        {
                            squery += " AND " + District;
                        }
                        if (Tahsil != "")
                        {
                            squery += " AND " + Tahsil;
                        }
                        if (Block != "")
                        {
                            squery += " AND " + Block;
                        }
                        if (Pincode != "")
                        {
                            squery += " AND " + Pincode;
                        }


                    }
                }
                string proquery = "select Invoiceid,Dilivery_month,Orderby,Customer_name,Customer_address,Product_name,Product_quantity,Order_status from [tbl_order] where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' "+ squery + " ";

                if (Uniqueid != null && Uniqueid != "")
                {
                    proquery += " and " + columnname + "='" + Uniqueid + "'";
                }
                if (activity != null && activity != "")
                {
                    proquery += " and Order_status='" + activity + "'";
                }
                DataTable prodt = db.GetAllRecord(proquery);

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(prodt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                json = "No Data";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        /// <Reports Customer Sales Record Close>
        ///Close Support///









        ///  Account Module  Open ///
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AllOrder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult AllOrder(FormCollection form, string hid, string hOrderid, string hOrderid2)
        {
            try
            {
                string status = "";
                if (hid != "" && hid != null)
                {
                    string Query = @"select * from tbl_order_summary where Order_id='" + hOrderid + "' order by Id desc";
                    DataTable sdt = db.GetAllRecord(Query);
                    if (sdt.Rows.Count > 0)
                    {
                        status = sdt.Rows[0]["Payment_status"] + "";
                        if (status!="Active")
                        {
                            string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active'";
                            DataTable dt = db.GetAllRecord(squery);
                            if (dt.Rows.Count > 0)
                            {
                                DateTime currentDate = DateTime.Now;
                                // Extract the year and month from the current date
                                string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                                string invoiceid = "I" + currentYearmonth + "" + arandom(5);
                                string otp = random(4);

                                string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Confirmed','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','0','" + status + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + invoiceid + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + otp + "','" + DateTime.Parse(form["expected"]).ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "' )";

                                db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");
                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_order", hid, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Data Updated";

                                    string[] replacementValues = { dt.Rows[0]["Product_name"]+"" };
                                    Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"]+"", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"]+"", Session["userid"] + "", Session["username"] + "");
                                    //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"]+"", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                                    Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "thank_you_message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,true);
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                    ViewBag.msg = "Update Failed";
                                }

                            }
                            else
                            {
                                ViewBag.msg = "Order Not Found";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Please Verify Payment";
                        }
                        
                    }
                    else
                    {
                        ViewBag.msg = "Order Not Found";
                    }

                    
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ConfirmOrder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        public JsonResult View_orderDetails_modal(string OrderId)
        {
            string[] res = { };
            string res1 = "";
            productCls products = new productCls();
            try
            {
                if (Session["userid"] + "" != null && Session["userid"] + "" != "")
                {
                    string Query = @"select * from tbl_order_summary where Order_id='" + OrderId + "' order by Id desc";
                    DataTable dt = db.GetAllRecord(Query);

                    if (dt.Rows.Count > 0)
                    {
                        res1 = JsonConvert.SerializeObject(dt, Formatting.None);
                        ViewBag.modalDt = dt;

                        string id = dt.Rows[0]["Id"].ToString() + "";
                        string Order_id_encry = Encryption.Encrypt(dt.Rows[0]["Order_id"].ToString()) + "";
                        string Order_id = dt.Rows[0]["Order_id"].ToString() + "";
                        string Customer_name = dt.Rows[0]["Customer_name"].ToString() + "";
                        string Customer_mobile = dt.Rows[0]["Customer_mobile"].ToString() + "";
                        string Customer_address = dt.Rows[0]["Customer_address"].ToString() + "";
                        string Pincode = dt.Rows[0]["Pincode"].ToString() + "";
                        string Datetime = dt.Rows[0]["Datetime"].ToString() + "";

                        //string Description = dt.Rows[0]["Description"].ToString() + "";
                        //string Pimage = dt.Rows[0]["Pimage"].ToString() + "";
                        //string Baserice = dt.Rows[0]["Baserice"].ToString() + "";


                        res = new string[8] { id, Order_id_encry, Order_id, Customer_name, Customer_mobile, Customer_address, Pincode, Datetime };
                    }
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ConfirmPayment(string OrderId,string Paidamount,string Paymentstatus,string Paidamountval)
        {
            string res="";
            string[] res1 = { };
            try
            {
                if (Session["userid"] + "" != null && Session["userid"] + "" != "")
                {
                    string status = "";
                    string Query = @"select * from tbl_order_summary where Order_id='" + OrderId + "' order by Id desc";
                    DataTable dts = db.GetAllRecord(Query);
                    if (dts.Rows.Count > 0)
                    {
                        int j=0;
                        string trpro = "";
                        double balanceamount = 0;
                        string totalamount = dts.Rows[0]["Total_amount"] + "";
                        string agentname = dts.Rows[0]["logname"] + "";
                        string agentid = dts.Rows[0]["logid"] + "";
                        string query1 = "update tbl_order_summary set Paid_amount='"+ Paidamount + "',Payment_status='"+Paymentstatus+ "' where Order_id='" + OrderId + "'";

                        if (db.InsertUpdateDelete(query1))
                        {
                            string jhsd = "select * from tbl_order_transaction where Order_id='" + OrderId + "' and Tr_status='Due' and Status='Requested'";
                            DataTable trdt = db.GetAllRecord(jhsd);
                            string paymentmethod = "";
                            if (trdt.Rows.Count > 0)
                            {
                                paymentmethod = trdt.Rows[0]["Payment_method"] + "";

                                balanceamount= Convert.ToDouble(totalamount) - Convert.ToDouble(Paidamount);
                                Double closingam = Convert.ToDouble(Paidamountval) - Convert.ToDouble(Paidamount);
                                if (closingam == 0)
                                {
                                    status = "No Due";
                                }
                                else
                                {
                                    status = "Due";
                                }
                                string uptrq= "update tbl_order_transaction set Amount='"+ Paidamount + "',Opening_amount='"+ Paidamountval + "',Closing_amount='"+ closingam + "',Tr_status='"+ status + "',Status='Confirmed' where Order_id='" + OrderId + "' and Transaction_id='" + trdt.Rows[0]["Transaction_id"] + "'";
                                db.InsertUpdateDelete(uptrq);
                            }
                            activitylog.Activitylogins("tbl_order_summary", OrderId, query1, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            res = "Data Updated";
                            res1 = new string[9] { "Data Updated", OrderId, dts.Rows[0]["Id"] + "", dts.Rows[0]["Customer_mobile"] + "", "", dts.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                            paymentmethod = dts.Rows[0]["Payment_method"] + "";
                            string squery = "select * from tbl_order where Order_id='" + OrderId + "' and Status='Active'";
                            DataTable dt = db.GetAllRecord(squery);
                            if (dt.Rows.Count > 0)
                            {
                                string productname = "";
                                for(int i = 0; i < dt.Rows.Count;i++)
                                {
                                    DateTime currentDate = DateTime.Now;
                                    // Extract the year and month from the current date
                                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                                    string invoiceid = "I" + currentYearmonth + "" + arandom(5);
                                    string otp = random(4);

                                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + dt.Rows[i]["Order_id"] + "','" + dt.Rows[i]["Product_xml"] + "','" + dt.Rows[i]["Customer_name"] + "','" + dt.Rows[i]["Customer_id"] + "','" + dt.Rows[i]["Customer_mobile"] + "','" + dt.Rows[i]["Customer_address"] + "','" + dt.Rows[i]["Pincode"] + "','" + dt.Rows[i]["Total_amount"] + "','Confirmed','" + dt.Rows[i]["Payment_method"] + "','" + dt.Rows[i]["Payment_upload"] + "','0','" + status + "','" + dt.Rows[i]["logid"] + "','" + dt.Rows[i]["logname"] + "','" + DateTime.Parse(dt.Rows[i]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[i]["Membertype"] + "','" + dt.Rows[i]["Orderby"] + "','" + invoiceid + "','" + dt.Rows[i]["Drivername"] + "','" + dt.Rows[i]["Driverid"] + "','" + dt.Rows[i]["Drivermobile"] + "','" + dt.Rows[i]["Vehiclename"] + "','" + dt.Rows[i]["Vehicleid"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[i]["BranchName"] + "','" + dt.Rows[i]["BranchCode"] + "','" + dt.Rows[i]["Product_Img"] + "','" + dt.Rows[i]["Product_id"] + "','" + dt.Rows[i]["Product_name"] + "','" + dt.Rows[i]["Product_price"] + "','" + dt.Rows[i]["Product_quantity"] + "','" + dt.Rows[i]["Total_proamount"] + "','" + dt.Rows[i]["Product_type"] + "','" + otp + "','" + dt.Rows[i]["Remark"] + "','" + dt.Rows[i]["OrderID2"] + "','" + dt.Rows[i]["Points"] + "','" + dt.Rows[i]["Permanent_address"] + "','" + dt.Rows[i]["Tahsil"] + "','" + dt.Rows[i]["Block"] + "','" + dt.Rows[i]["Address"] + "','" + dt.Rows[i]["State"] + "','" + dt.Rows[i]["District"] + "' )";

                                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + OrderId + "' and OrderID2='" + dt.Rows[i]["OrderID2"] + "' and id='" + dt.Rows[i]["id"] + "'");
                                    if (db.InsertUpdateDelete(query))
                                    {
                                        //j = i + 1;
                                        //if (j == 1)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> Total Amount </td> <td>" + totalamount + " </td> </tr>";
                                        //}
                                        //else if (j == 2)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> Taxable Amount</td> <td>" + totalamount + " </td> </tr>";
                                        //}
                                        //else if (j == 3)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> IGST/GST Rate </td> <td> </td> </tr>";
                                        //}
                                        //else if (j == 4)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> Round Off </td> <td></td> </tr>";
                                        //}
                                        //else if (j == 5)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> Bill Amount </td> <td>" + totalamount + " </td> </tr>";
                                        //}
                                        //else if (j == 6)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                        //}
                                        //else if (j == 7)
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                        //}
                                        //else
                                        //{
                                        //    trpro += "<tr><td>" + j + "</td> <td> " + dt.Rows[i]["Product_name"] + "</td> <td>-</td> <td>" + dt.Rows[i]["Product_quantity"] + "</td> <td>" + dt.Rows[i]["Product_price"] + " </td> <td>" + dt.Rows[i]["Product_price"] + " </td><td>  </td> <td></td> </tr>";
                                        //}
                                        
                                        activitylog.Activitylogins("tbl_order", dt.Rows[i]["id"]+"", query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                        ViewBag.msg = "Data Updated";

                                        if (productname == "")
                                        {
                                            productname = dt.Rows[i]["Product_name"] + "";
                                        }
                                        else
                                        {
                                            productname += ","+dt.Rows[i]["Product_name"] + "";
                                        }

                                    }
                                    else
                                    {
                                        activitylog.Activitylogins("tbl_order", dt.Rows[i]["id"] + "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                        res = "Update Failed";
                                        res1 = new string[9] { "Update Failed", OrderId, dt.Rows[0]["Id"] + "", dt.Rows[0]["Customer_mobile"] + "", "", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                                    }
                                }


                                string htmlFormData = "";

                                htmlFormData += "<div class='row row-cols-1 row-cols-sm-1 p-2 pb-0 no-print' id='invoice1'><div class='col'><div class='row row-cols-1 row-cols-sm-1 p-1 pb-0 no-print me-2'><div class='col'><table class='table-bordered border-1 border-dark print-div' style='border:3px solid black'>";

                                //if (j == 1)
                                //{
                                //    trpro += "<tr><td></td> <td> </td> <td></td> <td></td> <td></td> <td></td><td> Taxable Amount</td> <td>" + totalamount + " </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> IGST/GST Rate </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Round Off </td> <td></td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Bill Amount </td> <td>" + totalamount + " </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else if (j == 2)
                                //{
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> IGST/GST Rate </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Round Off </td> <td></td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Bill Amount </td> <td>" + totalamount + " </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else if (j == 3)
                                //{
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Round Off </td> <td></td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Bill Amount </td> <td>" + totalamount + " </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else if (j == 4)
                                //{
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Bill Amount </td> <td>" + totalamount + " </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else if (j == 5)
                                //{
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td> Less-Advanced Received </td> <td> </td> </tr>";
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else if (j == 6)
                                //{
                                //    trpro += "<tr><td></td> <td></td> <td></td> <td></td> <td></td> <td></td><td>Balanced Amount Received </td> <td>" + totalamount + " </td> </tr>";
                                //}
                                //else
                                //{

                                //}
                                htmlFormData+= "<tr> <td colspan='8'> <div class='row mb-2'></div><div class='row mb-2'> <div class='col-3 col-sm-3 justify-content-start'> <img src='" + URL.MainUrl() + "Content/Img/Growfast Logo.png' style='height:40px;' /> <br /> </div> <div class='col-7 col-sm-7 text-center '> <label>Corporate office - RS Plaza 3rd floor Ring Road Kalyanpur near Jagrani Hospital Lucknow (U.P)-226022<br /> Regional office - Plot no.12, karamveer Nagar, Nizamuddin Chouraha A&P International School, Bhopal </label><br /> <label class='fw-bold'>PHONE NO- 9415344987</label><br /> <label>  Email: agriculturegod@gmail.com</label><br /><label class='fw-bold pe-2'>Website: www.growfastgroups.com </label> </div> <div class='col-2 col-sm-2 text-start pe-1'> </div></div> <div class='row mb-1'><div class='col-8 col-sm-8 justify-content-start'>  </div></div> </td> </tr> <tr class='text-black'> <td class='text-center' colspan='8'> <label><b>ADVANCE RECEIPT (CUSTOMER COPY)</b></label> </td> </tr><tr class='text-black'><td class='text-left' style='width: 50%;'> <label><b>ORDER NO : " + dt.Rows[0]["Order_id"] + "</b></label></td><td class='text-left' style='width: 50%;'><label><b>DATE : "+ DateTime.Now.ToString("dd-MM-yyyy") + "</b></label></td> </tr><tr class='text-black'><td class='text-left' style='width: 50%;'><label><b>RECEIVED WITH THANKS FROM  </b><br>" + dt.Rows[0]["Customer_name"] + "<br>" + dt.Rows[0]["Customer_address"] + "<br>MOB - " + dt.Rows[0]["Customer_mobile"] + "</label> </td><td class='text-left' style='width: 50%;'><label><label><img src='" + URL.MainUrl() + "Content/Img/verified.png' style='height: 35px; ' /> verified</label></label></td></tr><tr class='text-black'> <td class='text-left' colspan='8'> <label><b>ADVANCE AMOUNT  OF  RS. " + Convert.ToDecimal(Paidamount).ToString("0.00") + "/-  by " + paymentmethod + "</b></label></td> </tr><tr class='text-black'> <td class='text-left' colspan='8'> <label><b>PRODUCT- " + productname + " </b></label> </td> </tr><tr><td><label>By Growfast</label></td><td><label><b>PAYMENT DATE : " + DateTime.Now.ToString("dd-MM-yyyy") + "</b></label></td></tr>";


                                htmlFormData += "</table></div></div> </div></div>";

                                string bootstrapCss = @"
<link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css' integrity='sha384-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' crossorigin='anonymous'>
";

                                string htmlFormData1 = bootstrapCss + " <style>td { border: 1px solid black; padding:5px}</style><div class='row row-cols-1 row-cols-sm-1 p-2 pb-0 no-print' id='invoice1'><div class='col'><div class='row row-cols-1 row-cols-sm-1 p-1 pb-0 no-print me-2'><div class='col'> <table class='table table-bordered table-striped border-dark print-div' style='width: 100%;' cellspacing='0'> <tr class='text-black'> <td style='width: 100%;text-align:center' colspan='2'><div style='width:100%'><img src='https://growfastgroups.com/Content/Img/Growfast%20Logo.png' style='height: 40px;' /> </div><div style='width:100%;text-align:center'><label>Corporate office - RS Plaza 3rd floor Ring Road Kalyanpur near Jagrani Hospital Lucknow (U.P)-226022<br /> Regional office - Plot no.12, karamveer Nagar, Nizamuddin Chouraha A&P International School, Bhopal <b> PHONE NO- 9415344987 <br /> Email: agriculturegod@gmail.com  <br /> Website: www.growfastgroups.com</b> </label></div></td></tr> <tr class='text-black'> <td class='text-center' colspan='8' style='text-align:center'><label><b>ADVANCE RECEIPT (CUSTOMER COPY)</b></label></td> </tr> <tr class='text-black'> <td class='text-left' style='width: 50%;'><label><b>ORDER NO : " + dt.Rows[0]["Order_id"] + "</b></label></td> <td class='text-left' style='width: 50%;'><label><b>DATE : "+ DateTime.Now.ToString("dd-MM-yyyy") + "</b></label></td> </tr> <tr class='text-black'> <td class='text-left' style='width: 50%;'> <label><b>RECEIVED WITH THANKS FROM</b><br> " + dt.Rows[0]["Customer_name"] + " <br> " + dt.Rows[0]["Customer_address"] + " <br>MOB - " + dt.Rows[0]["Customer_mobile"] + " </label></td> <td class='text-left' style='width: 50%;'> <img src= '" + URL.MainUrl() + "Content/Img/verified.png' style ='height: 25px;' /><label><span style='margin-top:30px;padding-top:10px !important'> verified</span></label> </td> </tr> <tr class='text-black'> <td clas s='text-left' colspan='8'><label><b>ADVANCE AMOUNT OF RS. " + Convert.ToDecimal(Paidamount).ToString("0.00") + " / -by " + paymentmethod + " </b></label></td> </tr>  <tr class='text-black'> <td class='text-left' colspan='8'><label><b>PRODUCT- " + productname + "</b></label></td> </tr> <tr> <td><label>By Growfast</label></td> <td><label><b>PAYMENT DATE : " + DateTime.Now.ToString("dd - MM - yyyy") + " </b></label></td> </tr> </table> </div> </div> </div> </div>";

                                string filename = "advance.pdf";
                                string path1 = Server.MapPath("~/Content/");
                                PdfGenerateConfig pdfGenerateConfig = new PdfGenerateConfig();
                                pdfGenerateConfig.PageSize = PageSize.A4;
                                pdfGenerateConfig.PageOrientation = PageOrientation.Portrait;
                                pdfGenerateConfig.SetMargins(20);

                                PdfSharp.Pdf.PdfDocument pdfDocument = PdfGenerator.GeneratePdf(htmlFormData1, pdfGenerateConfig);

                                using (MemoryStream memoryStream = new MemoryStream())
                                {
                                    pdfDocument.Save(memoryStream);
                                    pdfDocument.Close();
                                    byte[] bytes = memoryStream.ToArray();
                                    string fpth = System.IO.Path.Combine(path1, filename);
                                    System.IO.File.WriteAllBytes(fpth, bytes);

                                    HttpPostedFileBase sigFile = (HttpPostedFileBase)new HttppostedfilebaseCustom(bytes, "application/pdf", fpth);
                                    string pth = APIs.Invoice(sigFile);
                                    if (pth != "")
                                    {
                                        DbManager db = new DbManager();
                                        if (db.InsertUpdateDelete("update tbl_order_summary set Advancepdf='" + pth + "' where Order_id='" + OrderId + "'"))
                                        {
                                            try
                                            {
                                                string[] replacementValues1 = { dt.Rows[0]["Customer_mobile"] + "", "Advance Payment Receipt", URL.ApiURL() + "" + pth };
                                                //Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "share_receipt", dt.Rows[0]["Customer_mobile"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", URL.ApiURL() + "" + pth, sigFile.FileName, replacementValues1, true);
                                                Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "share_receipt", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", URL.ApiURL() + "" + pth, "Advancepdf.pdf", replacementValues1, true);
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                        }
                                        else
                                        {

                                        }
                                    }
                                }
                               



                                string[] replacementValues = { productname };
                                //Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"]+"", Session["userid"] + "", Session["username"] + "");
                                ////Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                                Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "thank_you_message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,true);
                                res1 = new string[9] { "Success", OrderId, dt.Rows[0]["Id"] + "", dt.Rows[0]["Customer_mobile"] + "", htmlFormData, dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                            }
                            else
                            {
                                res = "Order Not Found";
                                res1 = new string[9] { "Order Not Found", OrderId, dt.Rows[0]["Id"] + "", dt.Rows[0]["Customer_mobile"] + "", "", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                            }



                            //string tquery = "update tbl_order_transaction Set ([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + customerid + "','" + orderid + "','0','0','0','" + transactionid + "','" + Session["userid"] + "','Due','Requested','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','" + payslippath + "')";
                            //db.InsertUpdateDelete(tquery);

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order_summary", OrderId, query1, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            res = "Update Failed";
                            res1 = new string[9] { "Update Failed", OrderId, "", "", "", "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                        }
                    }
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
                res1 = new string[9] { "Error", OrderId, "", "", "", "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ConfirmPaymentafter(string OrderId, string Paidamount, string Paymentstatus, string Paidamountval,string Totalamount, string Previuuspaid)
        {
            string res = "";
            try
            {
                if (Session["userid"] + "" != null && Session["userid"] + "" != "")
                {
                    string Query = @"select * from tbl_order_summary where Order_id='" + OrderId + "' order by Id desc";
                    DataTable dt = db.GetAllRecord(Query);
                    if (dt.Rows.Count > 0)
                    {
                        string totalpaid = "";
                        if (Paymentstatus == "Due")
                        {
                            totalpaid = (Convert.ToInt32(Previuuspaid) + Convert.ToInt32(Paidamount)).ToString();
                        }
                        else
                        {
                            totalpaid = Totalamount;
                            
                        }
                        string query = "update tbl_order_summary set Paid_amount='" + totalpaid + "',Payment_status='" + Paymentstatus + "' where Order_id='" + OrderId + "'";

                        if (db.InsertUpdateDelete(query))
                        {
                            string jhsd = "select * from tbl_order_transaction where Order_id='" + OrderId + "' and Tr_status='Due' and Status='Requested'";
                            DataTable trdt = db.GetAllRecord(jhsd);
                            if (trdt.Rows.Count > 0)
                            {
                                Double closingam = Convert.ToDouble(Paidamountval) - Convert.ToDouble(Paidamount);
                                string status = "";
                                if (closingam == 0)
                                {
                                    status = "No Due";
                                }
                                else
                                {
                                    status = "Due";
                                }
                                string uptrq = "update tbl_order_transaction set Amount='" + Paidamount + "',Opening_amount='" + Paidamountval + "',Closing_amount='" + closingam + "',Tr_status='" + status + "',Status='Confirmed' where Order_id='" + OrderId + "' and Transaction_id='" + trdt.Rows[0]["Transaction_id"] + "'";
                                db.InsertUpdateDelete(uptrq);
                                db.InsertUpdateDelete("update tbl_order set Payment_status='" + Paymentstatus + "' where Order_id='" + OrderId + "'");
                            }
                            activitylog.Activitylogins("tbl_order_summary", OrderId, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            res = "Data Updated";

                            //string tquery = "update tbl_order_transaction Set ([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + customerid + "','" + orderid + "','0','0','0','" + transactionid + "','" + Session["userid"] + "','Due','Requested','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','" + payslippath + "')";
                            //db.InsertUpdateDelete(tquery);

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order_summary", OrderId, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            res = "Update Failed";
                        }
                    }
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AdvanceRefund()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url);
            }
            return View();
        }
        [HttpPost]
        public JsonResult AdvanceRefundnew(FormCollection form, string hid, string hOrderid, string hOrderid2, string OrderId)
        {
            string msg = "";
            try
            {
                string Query = @"select * from tbl_order_summary where Order_id='" + hOrderid + "' order by Id desc";
                DataTable sdt = db.GetAllRecord(Query);
                if (sdt.Rows.Count > 0)
                {
                    string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active'";
                    DataTable dt = db.GetAllRecord(squery);

                    if (dt.Rows.Count > 0)
                    {
                        string query = "INSERT INTO [tbl_advanceRefund]([Order_id],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Total_amount],[Order_status],[Payment_method],[Refund_amount],[logid],[logname],[Datetime],[Membertype],[Status],[Refunddate],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[Remark],OrderID2,State,District)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Total_amount"] + "','Refunded','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','Inactive','" + form["Refund_Date"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + form["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "' )";

                        db.InsertUpdateDelete("update tbl_order set Status='Inactive', Order_status='Refunded' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");



                        string tquery = "INSERT INTO [dbo].[tbl_order_transaction]([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip,Payment_method,Utr_Check) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_price"] + "','0','0','','" + Session["userid"] + "','No Due','Refunded','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','','" + dt.Rows[0]["Payment_method"] + "','')";
                        db.InsertUpdateDelete(tquery);


                        //string TotBalancevalue  = (sdt.Rows[0]["Total_amount"] - dt.Rows[0]["Product_price"]);
                        //string Paidbalancevalue = (sdt.Rows[0]["Paid_amount"] - dt.Rows[0]["Product_price"]);

                        //db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        // Assuming Total_amount and Paid_amount are numeric types in the database
                        decimal totalAmountFromDB = Convert.ToDecimal(sdt.Rows[0]["Total_amount"]);
                        decimal productPriceFromDB = Convert.ToDecimal(dt.Rows[0]["Product_price"]);
                        decimal paidAmountFromDB = Convert.ToDecimal(sdt.Rows[0]["Paid_amount"]);


                        // Perform subtraction
                        decimal TotBalancevalue = totalAmountFromDB - productPriceFromDB;
                        decimal Paidbalancevalue = paidAmountFromDB - productPriceFromDB;

                        // Update the database using parameterized query to prevent SQL injection
                        if (sdt.Rows[0]["Payment_status"].ToString() == "No Due")
                        {
                            db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        }
                        else if (Convert.ToDecimal(sdt.Rows[0]["Paid_amount"]) >= Convert.ToDecimal(dt.Rows[0]["Product_price"]) && sdt.Rows[0]["Payment_status"].ToString() == "Due")
                        {
                            db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        }
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_advanceRefund", hid, query, "Success", "Insert Success", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                            msg = "Data Updated"; // Set msg here
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                            msg = "Update Failed"; // Set msg here
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
            }
            finally
            {

                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetRefunddetails(string month, string year, string searchby)
        {
            string res = "", tbldata = "", tbl = "", json = "";

            StringBuilder htmlTable = new StringBuilder();
            try
            {
                string squery = "";
                string sorderid = "";

                squery = "SELECT DISTINCT Order_id FROM tbl_order WHERE Order_status in ('Confirmed','Cancelled') AND Status = 'Active' AND( (Product_type = 'Plant' AND Datetime >= DATEADD(DAY, -90, GETDATE())) OR (Product_type != 'Plant' AND Datetime >= DATEADD(DAY, -45, GETDATE())))  and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'; ";
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    for (int ij = 0; ij < sdt.Rows.Count; ij++)
                    {
                        if (sorderid == "")
                        {
                            sorderid += " order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }
                        else
                        {
                            sorderid += " or order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }

                    }
                    sorderid = "and ( " + sorderid + " )";
                }
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "')  and Month_Year='" + month + "-" + year + "'  ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";
                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";
                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status='Active' ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "'/* " + subquery + "*/  and Status='Active' ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery == "")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') " + subquery + "  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' and (CAST(Paid_amount AS decimal(10, 2))!=0 and CAST(Paid_amount AS decimal(10, 2))>CAST(Total_amount AS decimal(10, 2)) ) order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active'   " + subquery + " " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' and (CAST(Paid_amount AS decimal(10, 2))!=0 and CAST(Paid_amount AS decimal(10, 2))>CAST(Total_amount AS decimal(10, 2)) ) order by Id desc";
                        }
                    }
                }
                else
                {
                    if (searchby != "")
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' and (CAST(Paid_amount AS decimal(10, 2))!=0 and CAST(Paid_amount AS decimal(10, 2))>CAST(Total_amount AS decimal(10, 2)) ) order by Payment_status asc";
                    }
                    else
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' and (CAST(Paid_amount AS decimal(10, 2))!=0 and CAST(Paid_amount AS decimal(10, 2))>CAST(Total_amount AS decimal(10, 2)) ) order by Payment_status asc";
                    }

                }


                activitylog.Activitylogins("tbl_order_summary", "", Query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(Query);
                activitylog.Activitylogupd("Success", "");


                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>S.no.</th>");
                    htmlTable.Append("<th>Employee</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>Order info</th>");
                    //htmlTable.Append("<th>Total amount</th>");
                    htmlTable.Append("<th>Paid</th>");
                    htmlTable.Append("<th>Advance date</th>");
                    htmlTable.Append("<th>Mode</th>");
                    htmlTable.Append("<th>Refund Amount</th>");
                    htmlTable.Append("<th>Verified by</th>");
                    htmlTable.Append("<th>Action</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int empio = 0; empio < dt.Rows.Count; empio++)
                    {

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td>" + (empio + 1) + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[empio]["logname"] + "" + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[empio]["Customer_name"] + "</td>");
                        string odquery = "select * from tbl_order where Order_id='" + dt.Rows[empio]["Order_id"] + "' and Status='Active'";
                        DataTable oddt = db.GetAllRecord(odquery);
                        string proinfo = "";
                        if (oddt.Rows.Count > 0)
                        {
                            proinfo = "<table class='table table-responsive table-bordered'><thead class='theadb text-center'><tr><th>Invoice</th><th>Product name</th><th>Quantity</th><th>Amount</th></tr></thead><tbody class='text-center'>";

                            for (int odi = 0; odi < oddt.Rows.Count; odi++)
                            {
                                proinfo += "<tr><td>" + oddt.Rows[odi]["Invoiceid"] + "</td><td>" + oddt.Rows[odi]["Product_name"] + "</td><td> " + oddt.Rows[odi]["Product_quantity"] + " </td><td> " + (Convert.ToDouble(oddt.Rows[odi]["Total_proamount"] + "")).ToString("0.0") + " </td></tr>";
                            }
                            proinfo += "</tbody></table>";


                        }
                        htmlTable.Append("<td>" + proinfo + "</td>");

                        //htmlTable.Append("<td>" + Convert.ToDouble(dt.Rows[empio]["Total_amount"] + "").ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Convert.ToDouble(dt.Rows[empio]["Paid_amount"] + "").ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[empio]["Datetime"] + "" + " </td>");
                        htmlTable.Append("<td>" + dt.Rows[empio]["Payment_method"] + "" + " </td>");
                        htmlTable.Append("<td>" + (Convert.ToDouble(dt.Rows[empio]["Paid_amount"] + "") - Convert.ToDouble(dt.Rows[empio]["Total_amount"] + "")).ToString("0.0") + "</td>");
                        string trodquery = "SELECT * from [tbl_order] where Order_id='" + dt.Rows[empio]["Order_id"] + "' and Order_status='Confirmed'";
                        DataTable troddt = db.GetAllRecord(trodquery);
                        string Verifiedby = "";
                        if (troddt.Rows.Count > 0)
                        {

                            Verifiedby = troddt.Rows[0]["Actionbyname"] + "";
                        }
                        else
                        {

                            Verifiedby = "";
                        }
                        htmlTable.Append("<td>" + Verifiedby + " </td>");
                        htmlTable.Append("<td><button class='btn btncolor' onclick='Getcid(\"" + dt.Rows[empio]["Order_id"] + "\", \"" + dt.Rows[empio]["Id"] + "\")' data-bs-toggle='modal' data-bs-target='#confirm'>Refund</button></td>");
                        htmlTable.Append("</tr>");



                    }

                    htmlTable.Append("</tbody>");
                    htmlTable.Append("</table>");


                }



                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult OrdersummeryAdvanceRefund(string Order_id)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select Id,Order_id,OrderID2,Product_name,Product_id,CAST(Product_price AS DECIMAL(18, 2)) AS Product_price ,Product_quantity,CAST(Total_proamount AS DECIMAL(18, 2)) AS Total_proamount,Product_Img,status,Order_status,Customer_id,Actionbyid, ExpDelivery_date AS FormattedExpDeliveryDate,[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid] from tbl_order where Order_id='" + Order_id + "' and status='Active' and Order_status in('Confirmed','Cancelled') order by id asc";
                activitylog.Activitylogins("tbl_order", "", squery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ALoan()
        {
            string url = "";
            string id = Session["userid1"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult ALoan(FormCollection form)
        {
            string reqid = random(5);
            string query = "select * from tbl_loan where Reqid='" + reqid + "'";
            DataTable dt = db.GetAllRecord(query);
            if (dt.Rows.Count > 0)
            {
                ViewBag.msg = "Request Id Already Exist";
            }
            else
            {
                string query1 = "select * from tbl_registration where Id='" + Session["emprid"] + "'";
                DataTable dt1 = db.GetAllRecord(query1);
                if (dt1.Rows.Count > 0)
                {
                    string iquery = "INSERT INTO tbl_loan(Reqid,Employeeid,Name,Department,Designation,Loanamount,Reason,Status,application_status,Logid,Logname,Datetime,BranchName,BranchCode)VALUES('" + reqid + "','" + dt1.Rows[0]["Employee_id"] + "','" + dt1.Rows[0]["Name"] + "','" + dt1.Rows[0]["Department_name"] + "','" + dt1.Rows[0]["Designation"] + "','" + form["amount"] + "','" + form["reason"] + "','Pending','Pending','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(iquery))
                    {
                        ViewBag.msg = "Request Send";
                    }
                    else
                    {
                        ViewBag.msg = "Request Not Send";
                    }
                }

            }

            return View();
        }
        public ActionResult AAdvance()
        {
            string url = "";
            string id = Session["userid1"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult AAdvance(FormCollection form)
        {
            string reqid = random(5);
            string query = "select * from tbl_loan where Reqid='" + reqid + "'";
            DataTable dt = db.GetAllRecord(query);
            if (dt.Rows.Count > 0)
            {
                ViewBag.msg = "Request Id Already Exist";
            }
            else
            {
                string query1 = "select * from tbl_registration where Id='" + Session["emprid"] + "'";
                DataTable dt1 = db.GetAllRecord(query1);
                if (dt1.Rows.Count > 0)
                {
                    string iquery = "INSERT INTO tbl_loan(Reqid,Employeeid,Name,Department,Designation,Loanamount,Reason,Status,application_status,Logid,Logname,Datetime,BranchName,BranchCode)VALUES('" + reqid + "','" + dt1.Rows[0]["Employee_id"] + "','" + dt1.Rows[0]["Name"] + "','" + dt1.Rows[0]["Department_name"] + "','" + dt1.Rows[0]["Designation"] + "','" + form["amount"] + "','" + form["reason"] + "','Pending','Pending','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(iquery))
                    {
                        ViewBag.msg = "Request Send";
                    }
                    else
                    {
                        ViewBag.msg = "Request Not Send";
                    }
                }

            }

            return View();
        }




        ///  Account Module  Close ///

        public ActionResult GenerateInvoice()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url);
            }
            return View();
        }
        [HttpPost]
        public JsonResult GenerateInvoice(FormCollection form, string hid, string hOrderid, string hOrderid2, string OrderId)
        {
            string msg = "";
            try
            {
                string Query = @"select * from tbl_order_summary where Order_id='" + hOrderid + "' order by Id desc";
                DataTable sdt = db.GetAllRecord(Query);
                if (sdt.Rows.Count > 0)
                {
                    string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active'";
                    DataTable dt = db.GetAllRecord(squery);

                    if (dt.Rows.Count > 0)
                    {
                        string query = "INSERT INTO [tbl_advanceRefund]([Order_id],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Total_amount],[Order_status],[Payment_method],[Refund_amount],[logid],[logname],[Datetime],[Membertype],[Status],[Refunddate],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[Remark],OrderID2,State,District)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Total_amount"] + "','Refunded','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','Inactive','" + form["Refund_Date"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + form["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "' )";

                        db.InsertUpdateDelete("update tbl_order set Status='Inactive', Order_status='Refunded' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");



                        string tquery = "INSERT INTO [dbo].[tbl_order_transaction]([Datetime],[Customer_id],[Order_id],[Amount],[Opening_amount],[Closing_amount],[Transaction_id],[Transaction_by_id],[Tr_status],[Status],[logid],[logname],[log_mac],[log_IP],Payment_slip,Payment_method,Utr_Check) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_price"] + "','0','0','','" + Session["userid"] + "','No Due','Refunded','" + Session["userid"] + "','" + Session["username"] + "','Mac','IP','','" + dt.Rows[0]["Payment_method"] + "','')";
                        db.InsertUpdateDelete(tquery);


                        //string TotBalancevalue  = (sdt.Rows[0]["Total_amount"] - dt.Rows[0]["Product_price"]);
                        //string Paidbalancevalue = (sdt.Rows[0]["Paid_amount"] - dt.Rows[0]["Product_price"]);

                        //db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        // Assuming Total_amount and Paid_amount are numeric types in the database
                        decimal totalAmountFromDB = Convert.ToDecimal(sdt.Rows[0]["Total_amount"]);
                        decimal productPriceFromDB = Convert.ToDecimal(dt.Rows[0]["Product_price"]);
                        decimal paidAmountFromDB = Convert.ToDecimal(sdt.Rows[0]["Paid_amount"]);


                        // Perform subtraction
                        decimal TotBalancevalue = totalAmountFromDB - productPriceFromDB;
                        decimal Paidbalancevalue = paidAmountFromDB - productPriceFromDB;

                        // Update the database using parameterized query to prevent SQL injection
                        if (sdt.Rows[0]["Payment_status"].ToString() == "No Due")
                        {
                            db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        }
                        else if (Convert.ToDecimal(sdt.Rows[0]["Paid_amount"]) >= Convert.ToDecimal(dt.Rows[0]["Product_price"]) && sdt.Rows[0]["Payment_status"].ToString() == "Due")
                        {
                            db.InsertUpdateDelete("update tbl_order_summary set Total_amount='" + TotBalancevalue + "', Paid_amount ='" + Paidbalancevalue + "' where Order_id='" + hOrderid + "'  and id='" + sdt.Rows[0]["id"] + "'");
                        }
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_advanceRefund", hid, query, "Success", "Insert Success", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                            msg = "Data Updated"; // Set msg here
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                            msg = "Update Failed"; // Set msg here
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
            }
            finally
            {

                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetReceipt(string searchby,string Month,string Year)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Sno", typeof(string));
            dataTable.Columns.Add("Name", typeof(string));
            dataTable.Columns.Add("customerid", typeof(string));
            dataTable.Columns.Add("Employee", typeof(string));
            dataTable.Columns.Add("Employeeid", typeof(string));
            dataTable.Columns.Add("Contact", typeof(string));
            dataTable.Columns.Add("Address", typeof(string));
            dataTable.Columns.Add("Order_id", typeof(string));
            dataTable.Columns.Add("orderinfo", typeof(string));
            dataTable.Columns.Add("Receipt", typeof(string));
            dataTable.Columns.Add("Receipt_type", typeof(string));
            dataTable.Columns.Add("table", typeof(string));
            dataTable.Columns.Add("rowid", typeof(string));
            dataTable.Columns.Add("columnname", typeof(string));
            try
            {
                //Month = "5";
                string query = "select top(10)* from tbl_order_summary where (Customer_name Like '%" + searchby + "%' or Customer_mobile='" + searchby + "' or Order_id='" + searchby + "') and Payment_status='No Due' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' /* and Advancepdf is not null and BranchCode='B_36652'*/";
                DataTable dt = db.GetAllRecord(query);
                if (dt.Rows.Count > 0)
                {
                    int sr = 0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string squery = "select * from tbl_order where Order_id='" + dt.Rows[i]["Order_id"] + "' and Status='Active' and Order_status not in('Cancelled') and Order_status in('Active','Confirmed','Dispatch') and  Invoicepdf is not null";
                        DataTable sdt = db.GetAllRecord(squery);
                        if (sdt.Rows.Count > 0)
                        {
                            
                        }
                        else
                        {
                            sr++;
                            DataRow newRow = dataTable.NewRow();
                            newRow["Sno"] = sr;
                            newRow["Employee"] = dt.Rows[i]["logname"] + "";
                            newRow["Employeeid"] = dt.Rows[i]["logid"] + "";
                            newRow["Name"] = dt.Rows[i]["Customer_name"] + "";
                            newRow["customerid"] = dt.Rows[i]["Customer_id"] + "";
                            newRow["Contact"] = dt.Rows[i]["Customer_mobile"] + "";
                            newRow["Address"] = dt.Rows[i]["Customer_address"] + "";
                            newRow["Order_id"] = dt.Rows[i]["Order_id"] + "";
                            newRow["Receipt"] = dt.Rows[i]["Advancepdf"] + "";
                            newRow["Receipt_type"] = "Advance Payment Receipt";
                            newRow["table"] = "tbl_order_summary";
                            newRow["rowid"] = dt.Rows[i]["Id"] + "";
                            newRow["columnname"] = "Advancepdf";

                            string odquery = "select * from tbl_order where Order_id='" + dt.Rows[i]["Order_id"] + "' and Status='Active'";
                            DataTable oddt = db.GetAllRecord(odquery);
                            if (oddt.Rows.Count > 0)
                            {
                                newRow["orderinfo"] = "<table class='table table-responsive table-bordered'><thead class='theadb text-center'><tr><th>Product name</th><th>Quantity</th><th>Amount</th></tr></thead><tbody class='text-center'>";

                                for (int odi = 0; odi < oddt.Rows.Count; odi++)
                                {
                                    newRow["orderinfo"] += "<tr><td>" + oddt.Rows[odi]["Product_name"] + "</td><td> " + oddt.Rows[odi]["Product_quantity"] + " </td><td> " + (Convert.ToDouble(oddt.Rows[odi]["Total_proamount"] + "")).ToString("0.0") + " </td></tr>";
                                }
                                newRow["orderinfo"] += "</tbody></table>";


                            }


                            dataTable.Rows.Add(newRow);
                        }


                    }
                }


                json = JsonConvert.SerializeObject(dataTable, Formatting.None);

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult GenrateFinalInvoice(string orderid, string employeeid, string name, string contact)
        {
            string[] res = { };
            string json = "";
            string squery = "select * from tbl_registration where Employee_id='" + employeeid + "'";
            DataTable sdt = db.GetAllRecord(squery);
            if (sdt.Rows.Count > 0)
            {
                string query = "select * from tbl_branch where Branchid='" + sdt.Rows[0]["BranchCode"] + "'";
                activitylog.Activitylogins("tbl_branch", sdt.Rows[0]["BranchCode"] + "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string ordersum = "select * from [tbl_order_summary] where Order_id='" + orderid + "'";
                    DataTable sumdt = db.GetAllRecord(ordersum);
                    string order = "select * from [tbl_order] where Order_id='" + orderid + "' and Status='Active'";
                    DataTable odt = db.GetAllRecord(order);

                    if (sumdt.Rows.Count > 0)
                    {
                        string Recepttype = "";
                        string htmlFormData = "";
                        htmlFormData += "<div class='row row-cols-1 row-cols-sm-1 p-1 pb-0 no-print me-2' id='invoice1'> <div class='col'>";
                        string billno = "1";
                        if (odt.Rows[0]["Product_type"] + "" == "Plant")
                        {
                            Recepttype = "Bill Of Supply";
                            string proinfo = "";
                            string hsc = "";
                            int io = 0
;                            for (int i = 0; i < odt.Rows.Count; i++)
                            {
                                io++;
                                proinfo += "<tr style='min-height:50px'><td>"+(i+1) +"</td><td>"+odt.Rows[i]["Product_name"] +"</td><td>"+ hsc + "</td><td>"+ Convert.ToUInt32(odt.Rows[i]["Product_quantity"]+"")/10 + "</td><td>"+ Convert.ToDouble(odt.Rows[i]["Product_price"]+"").ToString("0.00") + "</td><td>"+ Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "").ToString("0.00") + "</td></tr>";
                            }
                            proinfo += "<tr style='min-height:50px;font-weight:bold'><td></td><td>Total</td><td></td><td>" + Convert.ToUInt32(odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_quantity"])))/10 + "</td><td>" + (odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_price"]))/io).ToString("0.00") + "</td><td>" + odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])).ToString("0.00") + "</td></tr>";

                            htmlFormData += "<table class='table-bordered border-1 border-dark print-div' style='border:3px solid black;width:100%'><tr> <td colspan='6'><br /><br /><div class='row mb-2'></div><div class='row mb-2'>  <div class='col-12 col-sm-12 text-center '><br /><h4>BILL OF SUPPLY</h4><br /><h6>“Composition Exempted Product. Not eligible to collect tax on supplies”</h6><br /></div></div> <div class='row mb-1'><div class='col-8 col-sm-8 justify-content-start'>  </div></div> </td> </tr><tr class='text-black'>    <td class='text-start ps-2' colspan='3'><h6 class='text-center'>SELLER (BILL FROM)</h6><br /><div style='text-align: left;'><label>Company name : "+ dt.Rows[0]["Companyname"] + "</label><br><label>company address : " + linebreakfun(dt.Rows[0]["Branchaddress"] + "") + " </label><br><label>State : " + dt.Rows[0]["State"] + "</label><br><label>MOBILE NO-  " + dt.Rows[0]["Branchcontact"] + "</label><br><label>GSTIN:-  " + dt.Rows[0]["Gstinnumber"] + "</label><br></div></td><td class='text-start ps-2' colspan='3'><h6 class='text-center'>BUYER (BILL TO)</h6><div style='text-align: left;'><label>CUSTOMER NAME:" + odt.Rows[0]["Customer_name"] + "</label><br /><label>PIN CODE:" + odt.Rows[0]["Pincode"] + "</label><br /><label>Address:" + linebreakfun(odt.Rows[0]["Customer_address"] + "") + "</label><br /><label>State:" + odt.Rows[0]["State"] + "</label><br /><label>MOBILE NO:" + odt.Rows[0]["Customer_mobile"] + "</label></div></td></tr> <tr class='text-black'><td class='text-left ps-2' colspan='4'><label>BILL NO:-  "+billno+"</label></td><td class='text-end ps-2' colspan='2'><label>BILL Date:-  "+DateTime.Now.ToString("dd-MM-yyyy")+"</label></td></tr> <tr><th class='text-center'>S.NO</th><th class='text-center'>DESCRIPTION OF GOODS</th>    <th class='text-center'>HSC</th><th class='text-center'>QTY</th><th class='text-center'>RATE</th><th class='text-center'>AMOUNT</th></tr>"+proinfo+"<tr style='height:30px'><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td colspan='6'><div class='row'><div class='col justify-content-start'> <label>Terms and Condition</label></div></div><div class='row'><div class='col'><ul><li> This receipt is digitally generated no need of signature.</li><li> Product once sold will not be taken back and amount not refundable. </li><li> Company provide high quality genetically improved  plants and fertilizer since the growth and yield of crop depend on climatic condition, agri-management, care and other factors.</li><li> 100 % replacement of damaged and dead plant once in a service time of 2 years after inspection.</li><li> All disputes one subject to Lucknow jurisdiction.</li></ul></div></div><br /><br /><div class='row mb-1'><div class='col-6 col-sm-6 text-center  justify-content-center'><h6>ACCEPTED BY CUSTOMER</h6><label style='width: 50%;'><img src='" + URL.MainUrl() + "Content/Img/verified.png' style='height: 35px; ' /> Digitally signed </label></div> <div class='col-6 col-sm-6 text-center justify-content-end'><h6>FOR " + dt.Rows[0]["Companyname"] + "</h6></div></div></td></tr> </table>";
                        }
                        else
                        {
                            Recepttype = "Tax Invoice";
                            string proinfo = "";
                            string hsc = "";
                            bool gst = true;
                            if (odt.Rows[0]["State"].ToString().ToLower() == dt.Rows[0]["State"].ToString().ToLower())
                            {
                                gst = true;
                            }
                            else
                            {
                                gst = false;
                            }
                            if (gst)
                            {
                                int io = 0;
                                for (int i = 0; i < odt.Rows.Count; i++)
                                {
                                    io++;
                                    proinfo += "<tr style='height:30px'><td colspan='1' class='text-center'>" + (i + 1) + "</td><td colspan='1' class='text-center'>" + odt.Rows[i]["Product_name"] + "</td><td colspan='1' class='text-center'>" + hsc + "</td><td colspan='1' class='text-center'>" + odt.Rows[i]["Product_quantity"] + "</td><td colspan='1' class='text-center'>" + Convert.ToDouble(odt.Rows[i]["Product_price"]+"").ToString("0.00") + "</td><td colspan='1' class='text-center'>" + Convert.ToDouble(odt.Rows[i]["Total_proamount"]).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'></td><td colspan='1' class='text-center'></td><td colspan='1' class='text-center'> "+((Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 2.5) / 100).ToString("0.00")+"</td><td colspan='1' class='text-center'>" + ((Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "")/2) + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 2.5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + ((Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 2.5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + ((Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "")/2) + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 2.5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td></tr>";
                                }
                                proinfo += "<tr style='height:30px'><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'>Grand Total</th><th colspan='1' class='text-center'>" + hsc + "</th><th colspan='1' class='text-center'>" + odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_quantity"])) + "</th><th colspan='1' class='text-center'>" + (odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_price"])) / io).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "").ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'> " + ((Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 2.5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + ((Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") / 2) + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 2.5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + ((Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 2.5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + ((Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") / 2) + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 2.5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 5) / 100).ToString("0.00") + "</th></tr>";

                            }
                            else
                            {
                                int io = 0;
                                for (int i = 0; i < odt.Rows.Count; i++)
                                {
                                    io++;
                                    proinfo += "<tr style='height:30px'><td colspan='1' class='text-center'>" + (i + 1) + "</td><td colspan='1' class='text-center'>" + odt.Rows[i]["Product_name"] + "</td><td colspan='1' class='text-center'>" + hsc + "</td><td colspan='1' class='text-center'>" + odt.Rows[i]["Product_quantity"] + "</td><td colspan='1' class='text-center'>" + Convert.ToDouble(odt.Rows[i]["Product_price"]+"").ToString("0.00") + "</td><td colspan='1' class='text-center'>" + Convert.ToDouble(odt.Rows[i]["Total_proamount"]+"").ToString("0.00") + "</td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td><td colspan='1' class='text-center'> </td><td colspan='1' class='text-center'></td><td colspan='1' class='text-center'></td><td colspan='1' class='text-center'></td><td colspan='1' class='text-center'>" + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") + (Convert.ToDouble(odt.Rows[i]["Total_proamount"] + "") * 5) / 100).ToString("0.00") + "</td></tr>";
                                }
                                proinfo += "<tr style='height:30px'><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'>Grand Total</th><th colspan='1' class='text-center'>" + hsc + "</th><th colspan='1' class='text-center'>" + odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_quantity"])) + "</th><th colspan='1' class='text-center'>" + (odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_price"])) / io).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Product_price"])) / io).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + ((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) * 5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 5) / 100).ToString("0.00") + "</th><th colspan='1' class='text-center'> </th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'>" + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") + (Convert.ToDouble((odt.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_proamount"])) / io) + "") * 5) / 100).ToString("0.00") + "</th></tr>";

                            }
                            //<tr style='height:40px'><th colspan='1'></th><th colspan='1' class='text-center'>GRAND TOTAL</th><th colspan='1'></th><th colspan='1'></th><th colspan='1'></th><th colspan='1'></th><th colspan='1'></th><th colspan='2'></th><th colspan='2'></th><th colspan='2'></th><th colspan='1'></th></tr><tr>

                            htmlFormData += "<table class='table-bordered border-1 border-dark print-div' style='border:3px solid black;width:100%'><tr> <td colspan='14'><br /><br /> <div class='row mb-2'></div><div class='row mb-2'><div class='col-6 col-sm-6 text-end '> <label><h4>TAX INVOICE</h4></label><br /></div><div class='col-1'></div><div class='col-3 col-sm-3 justify-content-center'> <img src='"+ URL.MainUrl()+ "Content/Img/Growfast Logo.png' style='height:40px;' /> <br /><span style='font-size:7px;width:150px'></span> </div> <div class='col-2 col-sm-2 text-start pe-1'> </div></div> <div class='row mb-1'><div class='col-8 col-sm-8 justify-content-start'></div></div> </td> </tr><tr class='text-black'><td class='text-center' colspan='7'><div style='text-align: center;'><label><h6>SELLER (BILL FROM)</h6></label></div><div style='text-align: left;'><label>" + dt.Rows[0]["Companyname"] + "</label><br><label>" + linebreakfun(dt.Rows[0]["Branchaddress"] + "") + "</label><br><label> " + dt.Rows[0]["State"] + "</label><br><div style='text-align: left;'><label>MOBILE NO:- " + dt.Rows[0]["Branchcontact"] + "</label><br><label>GSTIN:- " + dt.Rows[0]["Gstinnumber"] + "</label><br></div></td><td class='text-center' colspan='7'><div style='text-align: center;'><br><label><h6>BUYER (BILL TO)</h6></label></div><div style='text-align: left;'><label>CUSTOMER NAME:" + odt.Rows[0]["Customer_name"] + "</label><br /><label>PIN CODE:" + odt.Rows[0]["Pincode"] + "</label><br /><label>Address:" + linebreakfun(odt.Rows[0]["Customer_address"] + "") + "</label><br /><label>State:" + odt.Rows[0]["State"] + "</label><br /><label>MOBILE NO:" + odt.Rows[0]["Customer_mobile"] + "</label></div></td></tr><tr style='height: 20px;' colspan='14'> </tr><tr class='text-black'><td class='text-left' colspan='5'>    <label>BILL NO:- " + billno + "</label></td><td class='text-end' colspan='9'><label>BILL Date:- " + DateTime.Now.ToString("dd-MM-yyyy") + "</label></td></tr><tr colspan='14' style='height: 20px;'> </tr><tr style='height: 60px;'><th colspan='1' class='text-center' rowspan='2'>S.NO.</th><th colspan='1' class='text-center' rowspan='2'>DESCRIPTION OF GOODS</th><th colspan='1' class='text-center' rowspan='2'>HSN/SAC</th><th colspan='1' class='text-center' rowspan='2'>QTY</th><th colspan='1' class='text-center' rowspan='2'>RATE</th><th colspan='1' class='text-center' rowspan='2'>TAXABLE VALUE</th><th colspan='1' class='text-center' rowspan='2'>TOTAL</th><th colspan='2' class='text-center'>IGST</th><th colspan='2' class='text-center'>CGST</th><th colspan='2' class='text-center'>SGST</th><th colspan='1' class='text-center'>TOTAL AMT</th></tr><tr><th colspan='1' class='text-center'>TAX</th><th colspan='1' class='text-center'>AMT</th><th colspan='1' class='text-center'>TAX</th><th colspan='1' class='text-center'>AMT</th><th colspan='1' class='text-center'>TAX</th><th colspan='1' class='text-center'>AMT</th><th colspan='1' class='text-center'></th></tr>" + proinfo+"<tr style='height:30px'><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'> </th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th><th colspan='1' class='text-center'></th></tr><td colspan='14'><div class='row'><div class='col justify-content-start'> <label>Terms and Condition</label></div></div><div class='row'><div class='col'><ul><li>	This receipt is digitally generated no need of signature.</li><li>In the condition of cheque payment delivery of product shall be Eligible after clearanceof cheque.</li><li>Company all facility shall be Eligible after full payment of product.</li><li>Product once sold will not be taken back and amount not refundable.</li><li>Company provide high quality genetically improved  plants and fertilizer since the growth and yield of<br /> crop depend on climatic condition, agri-management, care and other factors. </li><li>100 % replacement of damaged and dead plant once in a service time of 2 years after inspection.</li><li>	All disputes one subject to Lucknow jurisdiction.</li><li>All disputes one subject to Lucknow jurisdiction.</li><li>This receipt digitally generated no need of signature .</li></ul></div></div><br /><br /><div class='row mb-1'><div class='col-6 col-sm-6 text-center  justify-content-center'><h6>ACCEPTED BY CUSTOMER</h6><label style='width: 50%;'><img src='"+URL.MainUrl() + "Content/Img/verified.png' style='height: 35px; ' /> OTP verified</label></div> <div class='col-6 col-sm-6 text-center justify-content-end'><h6>FOR GROWFAST ORGANIC DIAMOND PVT.LTD</h6> </div></div></td></tr></table>";
                        }
                        htmlFormData += "</div></div>";
                        res = new string[4] { "Success", htmlFormData, billno,Recepttype };
                        json = htmlFormData;
                    }
                    else
                    {
                        res = new string[3] { "failed", "", "" };
                    }
                }
                else {
                    res = new string[3] { "failed", "", "" };
                }
            }
            else
            {
                res = new string[3] { "failed", "", "" };
            }

            return Json(res, JsonRequestBehavior.AllowGet);

        }

        ///Transport Module Open ///


        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult orderdetails()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult orderdetails(FormCollection form, string hid, string hOrderid, string hOrderid2, string driverid, string vehicleid)
        {
            try
            {
                string Query = @"select * from tbl_order_summary where Order_id='" + hOrderid + "' order by Id desc";
                DataTable sdt = db.GetAllRecord(Query);
                if (sdt.Rows.Count > 0)
                {
                     string vehiclename = "";
                        string drivername = "";
                        string drivermob = "";
                        DateTime currentDate = DateTime.Now;
                        // Extract the year and month from the current date
                        string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;

                        string nVehicleid = "V" + currentYearmonth + "" + arandom(5);

                        string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active'";
                        DataTable dt = db.GetAllRecord(squery);

                        if (dt.Rows.Count > 0)
                        {
                            string expecteddilivery = dt.Rows[0]["ExpDelivery_date"] + "";
                            if (expecteddilivery != "")
                            {

                            string upquery = "";
                            
                            //Stock Transaction query

                            //string queryp = "select * from tbl_diliverypointstock where Productid='" + dt.Rows[0]["Product_id"] + "' and Groupid='" + Session["Groupid"] + "'";
                            //DataTable dtp = db.GetAllRecord(queryp);
                            //if (dtp.Rows.Count > 0)
                            //{
                            //    string Debit = dtp.Rows[0]["Debit"] + "";
                            //    string balance = dtp.Rows[0]["Balance"] + "";
                            //    double allcdebit = Convert.ToDouble(Debit) + Convert.ToDouble(dt.Rows[0]["Product_quantity"]);
                            //    double allbalance = Convert.ToDouble(balance) - Convert.ToDouble(dt.Rows[0]["Product_quantity"]);

                            //    if (Convert.ToDouble(balance) >= Convert.ToDouble(dt.Rows[0]["Product_quantity"]))
                            //    {
                            //        upquery = "update tbl_diliverypointstock set Debit='" + allcdebit + "', Balance='" + allbalance + "' where Productid='" + dt.Rows[0]["Product_id"] + "'  and Groupid='" + Session["Groupid"] + "'";

                            //        if (db.InsertUpdateDelete(upquery))
                            //        {
                            //            activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") +"", upquery, "Success", "Insert/Update Success", Session["userid"]+"", Session["username"] + "", Session["usermail"]+"");
                                        

                            //            //Stock Transaction query Stock table
                            //            string query2 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_quantity"] + "','Dr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "')";

                            //            db.InsertUpdateDelete(query2);

                            //        }
                            //        else
                            //        {
                            //            activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") +"", upquery, "Failed", "Insert/Update Failed", Session["userid"]+"", Session["username"]+"", Session["usermail"]+"");
                            //            ViewBag.msg = "Data Not Updated";
                            //        }

                                    if (form["driverid"] == "Other")
                                    {
                                        driverid = form["driverid"];
                                        drivername = form["drivername"];
                                        drivermob = form["drivercontact"];
                                    }
                                    else
                                    {
                                        string queryd = "select * from tbl_registration where Employee_id='" + form["driverid"] + "'";
                                        activitylog.Activitylogins("tbl_registration", form["driverid"] + "", queryd, "Failed", "", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                                        DataTable dtd = db.GetAllRecord(queryd);
                                        activitylog.Activitylogupd("Success", "");
                                        if (dtd.Rows.Count > 0)
                                        {
                                            driverid = form["driverid"];
                                            drivername = dtd.Rows[0]["Name"] + "";
                                            drivermob = dtd.Rows[0]["Mobile_no"] + "";
                                        }
                                    }

                                    string queryv = "select * from tbl_vehicle where Vehicleid='" + vehicleid + "'";
                                    activitylog.Activitylogins("tbl_vehicle", vehicleid+"", queryv, "Failed", "", Session["userid"]+"", Session["username"]+"", Session["usermail"]+"");
                                    DataTable dtv = db.GetAllRecord(queryv);
                                    activitylog.Activitylogupd("Success", "");
                                    if (dtv.Rows.Count > 0)
                                    {
                                        vehiclename = dtv.Rows[0]["Vehicle_name"] + " - " + dtv.Rows[0]["Registration_no"] + "";
                                        nVehicleid = vehicleid;

                                        //drivername = dtv.Rows[0]["Driver_name"] + "";
                                        //drivermob = dtv.Rows[0]["Driver_contact"] + "";
                                    }


                                    //DateTime dateTimeValue = DateTime.Parse(dt1.Rows[0]["Datetime"] + "");
                                    //DateTime Confirm_date = DateTime.Parse(dt1.Rows[0]["Confirm_date"] + "");

                                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Dispatch','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + drivername + "','" + driverid + "','" + drivermob + "','" + vehiclename + "','" + nVehicleid + "','Shipped','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + form["remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "' )";

                                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");
                                    if (db.InsertUpdateDelete(query))
                                    {
                                        activitylog.Activitylogins("tbl_order", hid, query, "Success", "Insert Success", Session["userid"]+"", Session["username"]+"", Session["usermail"]+"");
                                        ViewBag.msg = "Data Updated";

                                        string message = "Dear Customer \n I am very happy to inform you that your product is being packed and will be shipped from here soon. Thank you for choosing Growfast Company.\nGROWFAST.";


                                        string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                                        Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Product Delivery Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "");
                                        //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Product Delivery Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                                Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "product_delivery", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);
                            }
                                    else
                                    {
                                        activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"]+"", Session["username"]+"", Session["usermail"]+"");
                                        ViewBag.msg = "Update Failed";
                                    }
                                //}
                                //else
                                //{
                                //    ViewBag.msg = "There are not enough product stock.";
                                //}
                                
                            //}
                            //else
                            //{
                            //    ViewBag.msg = "Product stock not found.";
                            //    //Insert product Stock

                            //}  
                        }
                        else
                        {
                            ViewBag.msg = "Please give expected delivery date first";
                        }
                        
                        }
                        else
                        {
                            ViewBag.msg = "Order Not Found";
                        }
                    
                }

                 
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {

                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetOrderquantity(string productid, string productquantity)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string balancequantity = "";
                string squery = "select * from tbl_diliverypointstock where Productid='" + productid + "' and Status='Active' and Groupid='" + Session["Groupid"] + "'and Month_Year='" + DateTime.Now.Month + "-" + DateTime.Now.Year + "'";
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    balancequantity = sdt.Rows[0]["Balance"]+"";

                    if(Convert.ToInt32(balancequantity)>= Convert.ToInt32(productquantity))
                    {
                        json = "Success";
                    }
                    else
                    {
                        json = "Failed";
                    }
                }
                else
                {
                    json = "No Product Found";
                }
                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Shippedorder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Shippedorder(FormCollection form, string hid, string hOrderid, string hOrderid2, string driverid, string vehicleid)
        {
            try
            {
                string Query = @"select * from tbl_order_summary where Order_id='" + hOrderid + "' order by Id desc";
                DataTable sdt = db.GetAllRecord(Query);
                if (sdt.Rows.Count > 0)
                {
                    string vehiclename = "";
                    string drivername = "";
                    string drivermob = "";
                    DateTime currentDate = DateTime.Now;
                    // Extract the year and month from the current date
                    string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;

                    string nVehicleid = "V" + currentYearmonth + "" + arandom(5);

                    string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active'";
                    DataTable dt = db.GetAllRecord(squery);

                    if (dt.Rows.Count > 0)
                    {
                        string expecteddilivery = dt.Rows[0]["ExpDelivery_date"] + "";
                        if (expecteddilivery != "")
                        {
                            //string query2 = "select * from tbl_registration where Employee_id='" + driverid + "'";
                            //activitylog.Activitylogins("tbl_registration", driverid.ToString(), query2, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            //DataTable dt2 = db.GetAllRecord(query2);
                            //if (dt2.Rows.Count > 0)
                            //{
                            //    drivername = dt2.Rows[0]["Name"].ToString();
                            //    drivermob = dt2.Rows[0]["Mobile_no"].ToString();
                            //}

                            string queryv = "select * from tbl_vehicle where Vehicleid='" + vehicleid + "'";
                            activitylog.Activitylogins("tbl_vehicle", vehicleid.ToString(), queryv, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            DataTable dtv = db.GetAllRecord(queryv);
                            activitylog.Activitylogupd("Success", "");
                            if (dtv.Rows.Count > 0)
                            {
                                vehiclename = dtv.Rows[0]["Vehicle_name"] + " - "+ dtv.Rows[0]["Registration_no"] + "";
                                nVehicleid = vehicleid;

                                drivername = dtv.Rows[0]["Driver_name"] + "";
                                drivermob = dtv.Rows[0]["Driver_contact"] + "";
                            }


                            //DateTime dateTimeValue = DateTime.Parse(dt1.Rows[0]["Datetime"] + "");
                            //DateTime Confirm_date = DateTime.Parse(dt1.Rows[0]["Confirm_date"] + "");

                            string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Dispatch','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + drivername + "','" + driverid + "','" + drivermob + "','" + vehiclename + "','" + nVehicleid + "','Shipped','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + form["remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "' )";

                            db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");
                            if (db.InsertUpdateDelete(query))
                            {
                                activitylog.Activitylogins("tbl_order", hid, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Data Updated";

                                string message = "Dear Customer \n I am very happy to inform you that your product is being packed and will be shipped from here soon. Thank you for choosing Growfast Company.\nGROWFAST.";


                                string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                                Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Product Delivery Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "");
                                //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Product Delivery Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                                Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "product_delivery", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);

                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                ViewBag.msg = "Update Failed";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Please give expected delivery date first";
                        }

                    }
                    else
                    {
                        ViewBag.msg = "Order Not Found";
                    }

                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult Getorderdetails(string month, string year, string searchby)
       {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "";
                string sorderid = "";
                if (Convert.ToInt32(Session["desigorder"] + "") <= 4 && Convert.ToInt32(Session["desigorder"] + "") >= 0)
                {
                    squery = "select DISTINCT Order_id from tbl_order where Order_status='Confirmed' and Status='Active' and ExpDelivery_date is null";
                }
                else
                {
                    squery = "select DISTINCT Order_id from tbl_order where Order_status='Confirmed' and Status='Active' and ExpDelivery_date is not null";
                }
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    for (int ij = 0; ij < sdt.Rows.Count; ij++)
                    {
                        if (sorderid == "")
                        {
                            sorderid += " order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }
                        else
                        {
                            sorderid += " or order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }
                        
                    }
                    sorderid = "and ( " + sorderid + " )";
                }
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + month + "-" + year + "' ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status='Active' ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' /*" + subquery + " */ and Status='Active' ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery == "")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') " + subquery + "  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active'  " + subquery + " "+ sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Id desc";
                        }
                    }
                }
                else
                {
                    if (searchby != "")
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Payment_status asc";
                    }
                    else
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Payment_status asc";
                    }
                    
                }

                if (Query != "")
                {
                    activitylog.Activitylogins("tbl_order_summary", "", Query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(Query);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                }

                
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Getorderdetailsservice(string orderfor, int Month, int Year)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {

                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");
                string squery = "";
                res += "<option selected value=''>Select one</option>";
                if (Session["designation"] + "" == "Sr REGIONAL TECHNICIAN INCHARGE" || Session["designation"] + "" == "REGIONAL TECHNICIAN INCHARGE")
                {

                }
                else
                {
                    string servicequery = "Select * from tbl_servicearea where Employee_id='" + Session["userid"] + "' and Status='Active'";
                    DataTable servicedt = db.GetAllRecord(servicequery);
                    if (servicedt.Rows.Count > 0)
                    {
                        string State = "", District = "", Tahsil = "", Block = "", Pincode = "";
                        for (int i = 0; i < servicedt.Rows.Count; i++)
                        {
                            if (servicedt.Rows[i]["State"] + "" != "")
                            {
                                State += " State='" + servicedt.Rows[i]["State"] + "' or";
                            }
                            if (servicedt.Rows[i]["District"] + "" != "")
                            {
                                District += " District='" + servicedt.Rows[i]["District"] + "' or";
                            }
                            if (servicedt.Rows[i]["Tahsil"] + "" != "")
                            {
                                Tahsil += " Tahsil='" + servicedt.Rows[i]["Tahsil"] + "' or";
                            }
                            if (servicedt.Rows[i]["Vill_town"] + "" != "")
                            {
                                Block += " Block='" + servicedt.Rows[i]["Vill_town"] + "' or";
                            }
                            if (servicedt.Rows[i]["Pincode"] + "" != "")
                            {
                                Pincode += " Pincode='" + servicedt.Rows[i]["Pincode"] + "' or";
                            }
                        }
                        if (State.EndsWith(" or"))
                        {
                            State = State.Substring(0, State.Length - 3);
                            State = "(" + State + ")";
                        }
                        if (District.EndsWith(" or"))
                        {
                            District = District.Substring(0, District.Length - 3);
                            District = "(" + District + ")";
                        }
                        if (Tahsil.EndsWith(" or"))
                        {
                            Tahsil = Tahsil.Substring(0, Tahsil.Length - 3);
                            Tahsil = "(" + Tahsil + ")";
                        }
                        if (Block.EndsWith(" or"))
                        {
                            Block = Block.Substring(0, Block.Length - 3);
                            Block = "(" + Block + ")";
                        }
                        if (Pincode.EndsWith(" or"))
                        {
                            Pincode = Pincode.Substring(0, Pincode.Length - 3);
                            Pincode = "(" + Pincode + ")";
                        }

                        if (State != "")
                        {
                            squery += " AND " + State;
                        }
                        if (District != "")
                        {
                            squery += " AND " + District;
                        }
                        if (Tahsil != "")
                        {
                            squery += " AND " + Tahsil;
                        }
                        if (Block != "")
                        {
                            squery += " AND " + Block;
                        }
                        if (Pincode != "")
                        {
                            squery += " AND " + Pincode;
                        }


                    }
                }
                string query = "";
                if (orderfor == "invoice")
                {
                    query = "Select Distinct Invoiceid from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Invoiceid"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Invoiceid"] + "'> " + dt.Rows[i]["Invoiceid"] + "</option>";
                            }
                        }
                    }

                }
                else if (orderfor == "order")
                {
                    query = "Select Distinct Order_id from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' "+squery+"";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Order_id"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Order_id"] + "'> " + dt.Rows[i]["Order_id"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "customer")
                {
                    query = "Select Distinct Customer_id, Customer_name from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Customer_id"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Customer_id"] + "'> " + dt.Rows[i]["Customer_name"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "post")
                {
                    query = "Select Distinct Address from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Address"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Address"] + "'> " + dt.Rows[i]["Address"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "block")
                {
                    query = "Select Distinct Block from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Block"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Block"] + "'> " + dt.Rows[i]["Block"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "tahsil")
                {
                    query = "Select Distinct Tahsil from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Tahsil"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Tahsil"] + "'> " + dt.Rows[i]["Tahsil"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "district")
                {
                    query = "Select Distinct District from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["District"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["District"] + "'> " + dt.Rows[i]["District"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "state")
                {
                    query = "Select Distinct State from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["State"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["State"] + "'> " + dt.Rows[i]["State"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "pincode")
                {
                    query = "Select Distinct Pincode from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' " + squery + "";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Pincode"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Pincode"] + "'> " + dt.Rows[i]["Pincode"] + "</option>";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Getshippedorder(string month, string year, string searchby)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "";
                string sorderid = "";
                string brquery = "";
                DataTable dty = db.GetAllRecord("select * from tbl_Branch where Yardid='" + Session["Yardid"] + "'");
                if (dty.Rows.Count > 0)
                {
                    for(int yi = 0; yi < dty.Rows.Count; yi++)
                    {
                        if (brquery == "")
                        {
                            brquery += "BranchCode='" + dty.Rows[yi]["Branchid"] + "'";
                        }
                        else
                        {
                            brquery += " or BranchCode='" + dty.Rows[yi]["Branchid"] + "'";
                        }
                        brquery = " and (" + brquery + ")";
                    }
                }
                if (Session["membertype"] + "" == "Suser")
                {
                    squery = "select DISTINCT Order_id from tbl_order where Order_status='Dispatch' and Status='Active' and ExpDelivery_date is not null";
                }
                else
                {
                    squery = "select DISTINCT Order_id from tbl_order where Order_status='Dispatch' and Status='Active' "+ brquery + " and ExpDelivery_date is not null";
                }
                DataTable sdt = db.GetAllRecord(squery);
                if (sdt.Rows.Count > 0)
                {
                    for (int ij = 0; ij < sdt.Rows.Count; ij++)
                    {
                        if (sorderid == "")
                        {
                            sorderid += " order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }
                        else
                        {
                            sorderid += " or order_id='" + sdt.Rows[ij]["Order_id"] + "'";
                        }

                    }
                    sorderid = "and ( " + sorderid + " )";
                }
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "')  and Month_Year='" + month + "-" + year + "' ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status='Active' ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' /*" + subquery + "*/  and Status='Active' ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery == "")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') " + subquery + "  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status!='Active'  " + subquery + " " + sorderid + "  and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Id desc";
                        }
                    }
                }
                else
                {
                    if (searchby != "")
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + "  and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Payment_status asc";
                    }
                    else
                    {
                        Query = "select * from [tbl_order_summary] where Payment_status!='Active' and BranchCode='" + Session["ubrcode"] + "'  " + sorderid + " and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "' order by Payment_status asc";
                    }

                }


                activitylog.Activitylogins("tbl_order_summary", "", Query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(Query);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Assignedorders()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Fuel()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Fuel(FormCollection form)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            try
            {
                string query = "insert into tbl_fuel(Fueltype,Fuelrate,Amount,Totalamount,Drivername,Driverid,Description,Vehicleno,Branchname,Branchid,Status,DateTime) values('" + form["Fueltype"] + "','" + form["Fuelrate"] + "','" + form["Amount"] + "','" + form["Totalamount"] + "','" + Session["username"] + "','" + Session["userid"] + "','" + form["Description"] + "','vname','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_vehicle", db.getmaxid("tbl_vehicle").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Saved";
                }
                else
                {
                    activitylog.Activitylogins("tbl_vehicle", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }



            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Dispatchorder()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public JsonResult Dispatchorder(string hid, string hOrderid, string hOrderid2, string OTP, string productquantity, string productprice, string productamount,string product_point)
        {
            string[] res = { };
            try
            {
                string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active' and OTP='" + OTP + "'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    if(productquantity== dt.Rows[0]["Product_quantity"] + "")
                    {

                    }
                    else
                    {
                        DataTable dataTable = new DataTable();
                        dataTable.Columns.Add("Product_type", typeof(string));
                        dataTable.Columns.Add("Product_Img", typeof(string));
                        dataTable.Columns.Add("Product_Id", typeof(string));
                        dataTable.Columns.Add("Product", typeof(string));
                        dataTable.Columns.Add("Price", typeof(string));
                        dataTable.Columns.Add("Quantity", typeof(string));
                        dataTable.Columns.Add("Total", typeof(string));
                        dataTable.Columns.Add("Points", typeof(string));

                        dt.Rows[0]["Product_quantity"] = productquantity;
                        dt.Rows[0]["Product_price"] = productprice;
                        dt.Rows[0]["Total_proamount"] = productamount;
                        dt.Rows[0]["Points"] = product_point;

                        string proxml = dt.Rows[0]["Product_xml"]+"";
                        DataTable xmldt = Encryption.ConvertXmlTo_Datatable(proxml);
                        if (xmldt.Rows.Count > 0)
                        {
                            for(int i = 0; i < xmldt.Rows.Count; i++)
                            {
                                DataRow newRow = dataTable.NewRow();
                                newRow["Product_type"] = xmldt.Rows[i]["Product_type"] + "";
                                newRow["Product_Img"] = xmldt.Rows[i]["Product_Img"] + "";
                                newRow["Product_Id"] = xmldt.Rows[i]["Product_Id"] + "";
                                newRow["Product"] = xmldt.Rows[i]["Product"] + "";
                                
                                if(xmldt.Rows[i]["Product_Id"]== dt.Rows[0]["Product_id"])
                                {
                                    newRow["Price"] = dt.Rows[0]["Product_price"] + "";
                                    newRow["Quantity"] = dt.Rows[0]["Product_quantity"] + "";
                                    newRow["Total"] = dt.Rows[0]["Total_proamount"] + "";
                                    newRow["Points"] = dt.Rows[0]["Points"] + "";
                                }
                                else
                                {
                                    newRow["Price"] = xmldt.Rows[i]["Price"] + "";
                                    newRow["Quantity"] = xmldt.Rows[i]["Quantity"] + "";
                                    newRow["Total"] = xmldt.Rows[i]["Total"] + "";
                                    newRow["Points"] = xmldt.Rows[i]["Points"] + "";
                                }
                                dataTable.Rows.Add(newRow);
                            }
                        }
                        proxml = Encryption.ConvertDatatableTo_XML(xmldt);
                        dt.Rows[0]["Product_xml"] = proxml;
                    }
                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Delivered','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','Delivered','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + dt.Rows[0]["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','" + DateTime.Now.ToString("MMM-yyyy") + "' ,'" + dt.Rows[0]["Invoicepdf"] + "')";

                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_order", hid, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        DataTable odt = db.GetAllRecord("select * from tbl_order where Order_id='" + hOrderid + "' and Status='Active' and Order_status in ('Active','Confirmed','Dispatch')");
                        if (odt.Rows.Count > 0)
                        {

                        }
                        else
                        {
                            string cusdetails = "Select * from tbl_customer where Customer_id='" + dt.Rows[0]["Customer_id"] + "'";
                            DataTable dtlead = db.GetAllRecord(cusdetails);
                            if (dtlead.Rows.Count > 0)
                            {
                                JObject jsonObject = new JObject();
                                jsonObject["Location"] = "location";
                                jsonObject["Latitude"] = "latitude";
                                jsonObject["Longitude"] = "longitude";

                                // Convert JObject to JSON string
                                string jsonlocation = jsonObject.ToString();

                                JObject jsonObject1 = new JObject();
                                jsonObject1["Productdetail"] = dt.Rows[0]["Product_xml"] + "";
                                // Convert JObject to JSON string
                                string jsondata1 = jsonObject1.ToString();
                                string leadid = "";
                                DataTable ldt = db.GetAllRecord("select Leadid from tbl_leadnew where Customerid='" + dt.Rows[0]["Customer_id"] + "' ");
                                if (ldt.Rows.Count > 0)
                                {
                                    leadid = ldt.Rows[0]["Leadid"] + "";
                                }

                                string querylead = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,OrderDetails) VALUES('" + leadid + "','" + dt.Rows[0]["Customer_id"] + "','" + dtlead.Rows[0]["Name"] + "','" + dtlead.Rows[0]["Mobile"] + "','" + dtlead.Rows[0]["Email"] + "','" + dtlead.Rows[0]["State"] + "','" + dtlead.Rows[0]["City"] + "','" + dtlead.Rows[0]["Full_address"] + "','" + dtlead.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','No','" + jsonlocation + "','','','','','','','Documentation','Done','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Close','')";
                                db.InsertUpdateDelete(querylead);
                            }
                        }

                        //Stock Transaction query

                        string queryp = "select * from tbl_diliverypointstock where Productid='" + dt.Rows[0]["Product_id"] + "' and Groupid='" + Session["CGroupid"] + "' and Month_Year='"+DateTime.Now.Month+"-"+ DateTime.Now.Year+ "'";
                        DataTable dtp = db.GetAllRecord(queryp);
                        if (dtp.Rows.Count > 0)
                        {
                            string Debit = dtp.Rows[0]["Debit"] + "";
                            string balance = dtp.Rows[0]["Balance"] + "";
                            double allcdebit = Convert.ToDouble(Debit) + Convert.ToDouble(dt.Rows[0]["Product_quantity"]);
                            double allbalance = Convert.ToDouble(balance) - Convert.ToDouble(dt.Rows[0]["Product_quantity"]);
                            string upquery = "";
                            if (Convert.ToDouble(balance) >= Convert.ToDouble(dt.Rows[0]["Product_quantity"]))
                            {
                                upquery = "update tbl_diliverypointstock set Debit='" + allcdebit + "', Balance='" + allbalance + "' where Productid='" + dt.Rows[0]["Product_id"] + "'  and Groupid='" + Session["CGroupid"] + "' and Month_Year='" + DateTime.Now.Month + "-" + DateTime.Now.Year + "'";

                                if (db.InsertUpdateDelete(upquery))
                                {
                                    activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") + "", upquery, "Success", "Insert/Update Success", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");


                                    //Stock Transaction query Stock table
                                    string query2 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_quantity"] + "','Dr.','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["Yardid"] + "','" + Session["Yardname"] + "','" + Session["Yardrowid"] + "')";

                                    db.InsertUpdateDelete(query2);

                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_diliverypointstock", db.getmaxid("tbl_diliverypointstock") + "", upquery, "Failed", "Insert/Update Failed", Session["userid"] + "", Session["username"] + "", Session["usermail"] + "");
                                    ViewBag.msg = "Data Not Updated";
                                }

                            }
                        }

                                ViewBag.msg = "Data Updated";

                        
                        string Gstin = "";

                        string squery12 = "select * from tbl_order where Order_id='" + hOrderid + "' and Status='Active' and Order_status!='Cancelled'";
                        DataTable dt12 = db.GetAllRecord(squery12);
                        string squery12s = "select * from tbl_order_summary where Order_id='" + hOrderid + "'";
                        DataTable dt12s = db.GetAllRecord(squery12s);

                        string descofgoods = "";
                        if (dt12.Rows.Count > 0)
                        {
                            if (dt.Rows[0]["Product_type"] + "" == "Plant")
                            {
                                if (dt12.Rows.Count > 1)
                                {
                                    descofgoods = dt.Rows[0]["Product_name"] + " " + dt.Rows[0]["Product_quantity"] + " plants with other product";
                                }
                                else
                                {
                                    descofgoods = dt.Rows[0]["Product_name"] + " " + dt.Rows[0]["Product_quantity"] + " plants";
                                }
                            }
                            else
                            {
                                if (dt12.Rows.Count > 1)
                                {
                                    descofgoods = dt.Rows[0]["Product_name"] + " " + dt.Rows[0]["Product_quantity"] + " unit with other product";
                                }
                                else
                                {
                                    descofgoods = dt.Rows[0]["Product_name"] + " " + dt.Rows[0]["Product_quantity"] + " unit";
                                }
                            }
                            
                            
                        }

                        string htmlFormData = "";
                        htmlFormData += "<div class='row row-cols-1 row-cols-sm-1 p-1 pb-0 no-print me-2' id='invoice1'> <div class='col'>";

                        htmlFormData += " <table class='table-bordered border-1 border-dark print-div' style='border:3px solid black;width:100%'> <tr> <td colspan='2'><div class='row'> <div class='col-3 col-sm-3 justify-content-start'> <img src='" + URL.MainUrl() + "Content/Img/Growfast Logo.png' style='height:50px;' />  </div> <div class='col-8 col-sm-8 text-center text-capitalize '> </div> </div><br /><div class='row mb-2'> <div class='col-12 col-sm-12 justify-content-center'>  <h5 class='text-center'>DELIVERY ACKNOWLEDGEMENT</h5> </div> </div>  </td> </tr>  <tr class='text-black'> <td class='ps-2'> <h6 class='text-start'>Order No : " + hOrderid + "</h6></td> <td class='ps-2'>  <h6 class='text-start'>Date : " + DateTime.Now.ToString("dd-MM-yyyy") + "</h6></td>  </tr>  <tr> <td colspan='2' class='ps-2'><h6 class='text-start'>Customer Name : " + dt.Rows[0]["Customer_name"] + "</h6> <h6 class='text-start'>Address : " + dt.Rows[0]["Customer_address"] + "</h6><h6 class='text-start'>Mobile No : " + dt.Rows[0]["Customer_mobile"] + "</h6></tr><tr> <td colspan='2'><br /><div class='row mb-2'> <div class='col-12 col-sm-12 justify-content-center'>  <h5 class='text-center'>Thanks For Purchasing With Growfast; Your Product Has Been Delivered Successfully.</h5><br /><h5 class='ps-2 text-start'>You Purchased </h5> </div> </div>  </td> </tr> <tr class='text-black'> <td> <h6 class='text-center'>"+descofgoods+" </h6><br /> </td> <td class='text-center'>  <h6 class='text-center'>Total Amount:- Rs." + Convert.ToDouble(dt12s.Rows[0]["Total_amount"]).ToString("0.00") + "/- </h6><hr /><h6 class='text-center'>Advance Amount:- Rs." + Convert.ToDouble(dt12s.Rows[0]["Paid_amount"]).ToString("0.00") + "/- </h6><hr /> <h6 class='text-center'>Due Amount:- Rs." + (Convert.ToDouble(dt12s.Rows[0]["Total_amount"])- Convert.ToDouble(dt12s.Rows[0]["Paid_amount"])).ToString("0.00") + "/- </h6></td>  </tr><tr> <td colspan='2'> <div class='row'><div class='col justify-content-start'> <label>Terms and Condition</label></div></div><div class='row'> <div class='col'> <ul> <li>This receipt is digitally generated no need of signature.</li> <li> Company all services shall be Eligible after full payment of product. </li> <li>Product once sold will not be taken back and amount not refundable.</li> <li>Company provide high quality genetically improved plants and fertilizer since the growth and yield of crop depend on climatic condition, agri-management, care and other factors.</li> <li> 100 % replacement of damaged and dead plant once in a service time of 2 years after inspection.</li> <li>Product received in good condition and as mentioned in delivery acknowledgement receipt quantity.</li><li>After delivery maintenance of product as per company guidline.</li> </ul>  </div> </div><br /><br /><div class='row mb-1'><div class='col-6 col-sm-6 text-center  justify-content-center'><h6>ACCEPTED BY CUSTOMER</h6><label style='width: 50%;'><img src='" + URL.MainUrl() + "Content/Img/verified.png' style='height: 35px; ' /> OTP verified</label></div> <div class='col-6 col-sm-6 text-center justify-content-end'><h6>FOR GROWFAST ORGANIC DIAMOND PVT.LTD</h6></div></div> </td> </tr>  </table>";

                        htmlFormData += "</div></div>";

                        string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };

                        Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Booking Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "");
                        //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Booking Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                        Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "booking_message1", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);

                        res = new string[11] { "Success", hOrderid, hOrderid2, dt.Rows[0]["Invoiceid"] + "", dt.Rows[0]["id"] + "", dt.Rows[0]["Customer_mobile"] + "", htmlFormData, dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "" };
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Insert Failed";
                        res = new string[6] { "Failed", hOrderid, hOrderid2, dt.Rows[0]["Invoiceid"] + "", dt.Rows[0]["id"] + "", dt.Rows[0]["Customer_mobile"] + "" };
                    }
                }
                else
                {
                    res = new string[6] { "Invalid OTP", hOrderid, hOrderid2, "", "", "" };
                    ViewBag.msg = "Invalid OTP";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = new string[6] { "Error", hOrderid, hOrderid2, "", "", "" };
            }
            finally
            {
                db.connectionstate();
            }
            string content = string.Join(",", res); // Convert string array to a single comma-separated string
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Dispatchorder_old(string hid, string hOrderid, string hOrderid2, string OTP)
        {
            string[] res = { };
            try
            {
                string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active' and OTP='" + OTP + "'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    string query = "INSERT INTO [tbl_order]([Order_id],[Product_xml],[Customer_name],[Customer_id],[Customer_mobile],[Customer_address],[Pincode],[Total_amount],[Order_status],[Payment_method],[Payment_upload],[Paid_amount],[Payment_status],[logid],[logname],[Datetime],[Membertype],[Orderby],[Invoiceid],[Drivername],[Driverid],[Drivermobile],[Vehiclename],[Vehicleid],[Transport_status],[Confirm_date],[Status],[Actionbyname],[Actionbyid],[ActionDatetime],[BranchName],[BranchCode],[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],[OTP],[ExpDelivery_date],[Remark],OrderID2,Points,Permanent_address,Tahsil,Block,Address,State,District,Dilivery_month,Invoicepdf)VALUES('" + dt.Rows[0]["Order_id"] + "','" + dt.Rows[0]["Product_xml"] + "','" + dt.Rows[0]["Customer_name"] + "','" + dt.Rows[0]["Customer_id"] + "','" + dt.Rows[0]["Customer_mobile"] + "','" + dt.Rows[0]["Customer_address"] + "','" + dt.Rows[0]["Pincode"] + "','" + dt.Rows[0]["Total_amount"] + "','Delivered','" + dt.Rows[0]["Payment_method"] + "','" + dt.Rows[0]["Payment_upload"] + "','" + dt.Rows[0]["Paid_amount"] + "','" + dt.Rows[0]["Payment_status"] + "','" + dt.Rows[0]["logid"] + "','" + dt.Rows[0]["logname"] + "','" + DateTime.Parse(dt.Rows[0]["Datetime"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["Membertype"] + "','" + dt.Rows[0]["Orderby"] + "','" + dt.Rows[0]["Invoiceid"] + "','" + dt.Rows[0]["Drivername"] + "','" + dt.Rows[0]["Driverid"] + "','" + dt.Rows[0]["Drivermobile"] + "','" + dt.Rows[0]["Vehiclename"] + "','" + dt.Rows[0]["Vehicleid"] + "','Delivered','" + DateTime.Parse(dt.Rows[0]["Confirm_date"] + "").ToString("yyyy-MM-dd HH:mm:ss") + "','Active','" + Session["username"] + "','" + Session["userid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + dt.Rows[0]["BranchName"] + "','" + dt.Rows[0]["BranchCode"] + "','" + dt.Rows[0]["Product_Img"] + "','" + dt.Rows[0]["Product_id"] + "','" + dt.Rows[0]["Product_name"] + "','" + dt.Rows[0]["Product_price"] + "','" + dt.Rows[0]["Product_quantity"] + "','" + dt.Rows[0]["Total_proamount"] + "','" + dt.Rows[0]["Product_type"] + "','" + dt.Rows[0]["OTP"] + "','" + dt.Rows[0]["ExpDelivery_date"] + "','" + dt.Rows[0]["Remark"] + "','" + dt.Rows[0]["OrderID2"] + "','" + dt.Rows[0]["Points"] + "','" + dt.Rows[0]["Permanent_address"] + "','" + dt.Rows[0]["Tahsil"] + "','" + dt.Rows[0]["Block"] + "','" + dt.Rows[0]["Address"] + "','" + dt.Rows[0]["State"] + "','" + dt.Rows[0]["District"] + "','"+ DateTime.Now.ToString("MMM-yyyy") + "' ,'" + dt.Rows[0]["Invoicepdf"] + "')";

                    db.InsertUpdateDelete("update tbl_order set Status='Inactive' where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and id='" + dt.Rows[0]["id"] + "'");
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_order", hid, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

                        string cusdetails = "Select * from tbl_customer where Customer_id='" + dt.Rows[0]["Customer_id"] + "'";
                        DataTable dtlead = db.GetAllRecord(cusdetails);
                        if (dtlead.Rows.Count > 0)
                        {
                            JObject jsonObject = new JObject();
                            jsonObject["Location"] = "location";
                            jsonObject["Latitude"] = "latitude";
                            jsonObject["Longitude"] = "longitude";

                            // Convert JObject to JSON string
                            string jsonlocation = jsonObject.ToString();

                            JObject jsonObject1 = new JObject();
                            jsonObject1["Productdetail"] = dt.Rows[0]["Product_xml"] + "";
                            // Convert JObject to JSON string
                            string jsondata1 = jsonObject1.ToString();
                            string leadid = "";
                            DataTable ldt=db.GetAllRecord("select Leadid from tbl_leadnew where Customerid='" + dt.Rows[0]["Customer_id"] + "' ");
                            if (ldt.Rows.Count > 0)
                            {
                                leadid = ldt.Rows[0]["Leadid"]+"";
                            }

                            string querylead = "INSERT INTO [dbo].[tbl_leadnew] ([Leadid] ,[Customerid] ,[Name] ,[Mobile] ,[Email] ,[Statename] ,[Cityname] ,[Address] ,[Pincode] ,[Occupation] ,[Land_Irrigation] ,[Support_reqstatus] ,[XML] ,[Support] ,[Location_In] ,[Supportempname] ,[Supportempid] ,[Supportemprid] ,[Supportlocation_In] ,[Location_diffrence] ,[Taken_time] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[BranchName] ,[BranchCode] ,[Logid] ,[Logname] ,[Datetime],Nextstatus,OrderDetails) VALUES('" + leadid + "','" + dt.Rows[0]["Customer_id"] + "','" + dtlead.Rows[0]["Name"] + "','" + dtlead.Rows[0]["Mobile"] + "','" + dtlead.Rows[0]["Email"] + "','" + dtlead.Rows[0]["State"] + "','" + dtlead.Rows[0]["City"] + "','" + dtlead.Rows[0]["Full_address"] + "','" + dtlead.Rows[0]["Postal_code"] + "','','','Close','" + jsondata1 + "','No','" + jsonlocation + "','','','','','','','Documentation','Done','Active','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','Close','')";
                            db.InsertUpdateDelete(querylead);
                        }


                        ViewBag.msg = "Data Updated";

                        string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };

                        Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Booking Message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "");
                        //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Booking Message", dt.Rows[0]["Customer_name"]+"", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                        Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "booking_message1", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,false);

                        string Gstin = "";
                        string htmlFormData = "";
                        htmlFormData += "<div class='row row-cols-1 row-cols-sm-1 p-1 pb-0 no-print me-2' id='invoice1'> <div class='col'>";
                        if (dt.Rows[0]["Product_type"] + "" == "Plant")
                        {
                            htmlFormData += "<table class='table-bordered border-1 border-dark print-div' style='border:3px solid black;width:100%'> <tr> <td colspan='12'><br /><br /><div class='row mb-2'></div><div class='row mb-2'> <div class='col-3 col-sm-3 justify-content-start'>  <br /> </div> <div class='col-7 col-sm-7 text-center '><label><h4>BILL OF SUPPLY</h4></label><br /><label><h6>“Composition Exempted Product. Not eligible to collect tax on supplies”</h6></label><br /></div> <div class='col-2 col-sm-2 text-start pe-1'> </div></div> <div class='row mb-1'><div class='col-8 col-sm-8 justify-content-start'>  </div></div> </td> </tr>  <tr class='text-black'> <td class='text-center' colspan='5'> <label><h6>SELLER (BILL FROM)</h6></label><br /> <label><b>GROWFAST ORGANIC DIAMOND PVT.LTD</b></label><br> <label>RS PLAZA 3RD FLOOR RING ROAD KALYANPUR LUCKNOW-226022</label><br> <label><b>UTTAR PRADESH</b></label><br> <div style='text-align: left;'>  <label><b>MOBILE NO- 9415344987</b></label><br> <label><b>GSTIN:- " + Gstin + "</b></label><br> </div>  </td> <td class='text-center' colspan='7'> <label><h6>BUYER (BILL TO)</h6></label><br /> <div style='text-align: left;'> <label><b>CUSTOMER NAME:</b> " + dt.Rows[0]["Customer_name"] + " </label><br /> <label><b>PIN CODE:</b> " + dt.Rows[0]["Pincode"] + " </label><br /> <label><b>STATE:</b> " + dt.Rows[0]["State"] + " </label><br /> <label><b>MOBILE NO:</b> " + dt.Rows[0]["Customer_mobile"] + " </label><br /> <label><b>GSTIN:</b> " + Gstin + " </label> </div>  </td>  </tr> <tr style='height: 20px;' colspan='12'> </tr> <tr class='text-black'> <td class='text-left' colspan='6'> <label><b>BILL NO:-  " + dt.Rows[0]["Invoiceid"] + "</b></label> </td> <td class='text-end' colspan='8'> <label><b>BILL Date:- " + DateTime.Now.ToString("dd-MM-yyyy") + " </b></label> </td>  </tr> <tr style='height: 20px;' colspan='12'> </tr>  <tr> <th class='text-center' colspan='2'>S.NO</th> <th class='text-center' colspan='2'>DESCRIPTION OF GOODS</th> <th class='text-center' colspan='2'>HSC</th> <th class='text-center' colspan='2'>QTY</th> <th class='text-center' colspan='2'>RATE</th> <th class='text-center' colspan='2'>AMOUNT</th> </tr> <tr style='height:200px'> <td colspan='2'>1</td> <td colspan='2'> " + dt.Rows[0]["Product_name"] + "</td> <td colspan='2'></td> <td colspan='2'>" + dt.Rows[0]["Product_quantity"] + "</td> <td colspan='2'> " + dt.Rows[0]["Product_price"] + "</td> <td colspan='2'> " + dt.Rows[0]["Total_proamount"] + "</td> </tr> <tr style='height:30px'> <td colspan='2'></td> <td colspan='2'></td> <td colspan='2'></td> <td colspan='2'></td> <td colspan='2'></td> <td colspan='2'></td> </tr> <tr> <td colspan='12'> <div class='row'><div class='col justify-content-start'> <label>Terms and Condition</label></div></div><div class='row'> <div class='col'> <ul> <li>This receipt is digitally generated no need of signature.</li> <li> In the condition of cheque payment delivery of product shall be Eligible after clearance  of cheque. </li> <li>Company all facility shall be Eligible after full payment of product.</li> <li>	Product once sold will not be taken back and amount not refundable.</li> <li> 	Company provide high quality genetically improved  plants and fertilizer since the growth and yield of<br /> crop depend on climatic condition, agri-management, care and other factors. </li> <li>100 % replacement of damaged and dead plant once in a service time of 2 years after inspection.</li> <li>	All disputes one subject to Lucknow jurisdiction.</li> <li>All disputes one subject to Lucknow jurisdiction.</li> <li>This receipt digitally generated no need of signature .</li> </ul>  </div> </div><br /><br /><div class='row mb-1'><div class='col-6 col-sm-6 text-center  justify-content-center'><h6>ACCEPTED BY CUSTOMER</h6><label style='width: 50%;'><img src='" + URL.MainUrl() + "Content/Img/verified.png' style='height: 35px; ' /> OTP verified</label></div> <div class='col-6 col-sm-6 text-center justify-content-end'><h6>FOR GROWFAST ORGANIC DIAMOND PVT.LTD</h6></div></div> </td> </tr>  </table>";
                        }
                        else
                        {
                            htmlFormData += "<table class='table-bordered border-1 border-dark print-div' style='border:3px solid black;width:100%'> <tr> <td colspan='8'><br /><br /> <div class='row mb-2'></div><div class='row mb-2'> <div class='col-3 col-sm-3 justify-content-start'>  <br /> </div> <div class='col-7 col-sm-7 text-center '> <label><h4>FINAL PAYMENT RECEIPT (CUSTOMER COPY)</h4></label><br /></div> <div class='col-2 col-sm-2 text-start pe-1'> </div></div> <div class='row mb-1'><div class='col-8 col-sm-8 justify-content-start'>  </div></div> </td> </tr>  <tr class='text-black'> <td class='text-center' style='width: 50%;'> <label><h6>SELLER (BILL FROM)</h6></label><br /> <label><b>GROWFAST ORGANIC DIAMOND PVT.LTD</b></label><br> <label>RS PLAZA 3RD FLOOR RING ROAD KALYANPUR LUCKNOW-226022</label><br> <label>UTTAR PRADESH</label><br> <div style='text-align: left;'> <label><b>MOBILE NO: </b> 9415344987 </label><br> <label><b>GSTIN: -" + Gstin + " </b></label><br> </div> </td> <td class='text-center' style='width: 50%;'> <div style='text-align: center;'> <label><h6>BUYER (BILL TO)</h6></label><br /> </div> <div style='text-align: left;'> <label><b>CUSTOMER NAME:</b > " + dt.Rows[0]["Customer_name"] + " </label><br /> <label><b>PIN CODE:</b > " + dt.Rows[0]["Pincode"] + " </label><br /> <label><b>STATE:</b > " + dt.Rows[0]["State"] + " </label><br /> <label><b>MOBILE NO:</b > " + dt.Rows[0]["Customer_mobile"] + " </label><br /> <label><b>GSTIN:</b > " + Gstin + " </label> </div> </td> </tr> <tr class='text-black'> <td class='text-left' style='width: 50%;'> <label><b>INVOICE NO: </b>"+dt.Rows[0]["Invoiceid"]+"</label> </td> <td class='text-left' style='width: 50%;'> <label><b>Date: </b> " + DateTime.Now.ToString("dd-mm-yyyy") + "</label>  </td> </tr> <tr class='text-black'> <td class='text-left' style='width: 50%;' colspan='8'> <label><b>RECEIVED WITH THANKS </b></label><br /><label><b> AMOUNT  OF  RS. " + Convert.ToDecimal(dt.Rows[0]["Total_proamount"]).ToString("0.00") + "/- <br /><label><b>RECEIVED WITH THANKS </b></label><br /><b><label>AGAINST</label></b><br /><b><label><b>PRODUCT - " + dt.Rows[0]["Product_name"] + " </b><b>ON Date- " + DateTime.Now.ToString("dd-MM-yyyy") + "</b></label></b>  </b></label><br /><br /><br /><h6>FOR GROWFAST ORGANIC DIAMOND PVT.LTD</h6> <label style='width: 50%; text-align:center'><img src='" + URL.MainUrl() + "Content/Img/verified.png' style='height: 35px;' /> otp verified</label> </td> </tr> </table>";
                        }
                        htmlFormData += "</div></div>";

                        res = new string[11] { "Success", hOrderid, hOrderid2, dt.Rows[0]["Invoiceid"] + "", dt.Rows[0]["id"] + "", dt.Rows[0]["Customer_mobile"]+"", htmlFormData, dt.Rows[0]["Customer_name"] + "",Session["userid"]+"", Session["username"] + "", Session["emprid"] + "" };
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_order", hid, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Insert Failed";
                        res = new string[6] { "Failed", hOrderid, hOrderid2, dt.Rows[0]["Invoiceid"]+"",dt.Rows[0]["id"] + "", dt.Rows[0]["Customer_mobile"] + "" };
                    }
                }
                else
                {
                    res = new string[6] { "Invalid OTP", hOrderid, hOrderid2, "", "","" };
                    ViewBag.msg = "Invalid OTP";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = new string[6] { "Error", hOrderid, hOrderid2,"", "","" };
            }
            finally
            {
                db.connectionstate();
            }
            string content = string.Join(",", res); // Convert string array to a single comma-separated string
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Verifyorderotp(string hid, string hOrderid, string hOrderid2, string OTP)
        {
            string[] res = { };
            try
            {
                string squery = "select * from tbl_order where Order_id='" + hOrderid + "' and OrderID2='" + hOrderid2 + "' and Status='Active' and OTP='" + OTP + "'";
                DataTable dt = db.GetAllRecord(squery);

                if (dt.Rows.Count > 0)
                {
                    res = new string[6] { "Valid OTP", hOrderid, hOrderid2, "", "", "" };
                    ViewBag.msg = "Valid OTP";
                }
                else
                {
                    res = new string[6] { "Invalid OTP", hOrderid, hOrderid2, "", "", "" };
                    ViewBag.msg = "Invalid OTP";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = new string[6] { "Error", hOrderid, hOrderid2, "", "", "" };
            }
            finally
            {
                db.connectionstate();
            }
            string content = string.Join(",", res); // Convert string array to a single comma-separated string
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        //public JsonResult vcodematch(string HOrderid, string HOrderid2, string Oid)
        //{
        //    string[] stringArray = new string[2];
        //    string query = "select * from tbl_order where Order_id='" + oid + "'";
        //    activitylog.Activitylogins("tbl_order", oid.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
        //    DataTable dt = db.GetAllRecord(query);
        //    activitylog.Activitylogupd("Success", "");
        //    if (dt.Rows.Count > 0)
        //    {
        //        stringArray[0] = dt.Rows[0]["OTP"].ToString();
        //    }
        //    string query1 = "update tbl_order set Order_status='Delivered',ActionDatetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Order_id='" + oid + "' and OTP ='" + votp + "'";
        //    if (db.InsertUpdateDelete(query1))
        //    {
        //        activitylog.Activitylogins("tbl_order", oid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //    }
        //    else
        //    {
        //        activitylog.Activitylogins("tbl_order", oid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());

        //    }
        //    //string res1 = JsonConvert.SerializeObject(dt, Formatting.None);

        //    return Json(stringArray, JsonRequestBehavior.AllowGet);
        //}
        public JsonResult OTPinsert(string HOrderid, string HOrderid2, string Oid)
        {
            string query = "select * from tbl_order where Order_id='" + HOrderid + "' and OrderID2='" + HOrderid2 + "' and id='" + Oid + "'";
            activitylog.Activitylogins("tbl_order", Oid.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            DataTable dt = db.GetAllRecord(query);
            activitylog.Activitylogupd("Success", "");
            string userid = dt.Rows[0]["Customer_id"] + "";
            string name = dt.Rows[0]["Customer_name"] + "";
            string Mob = dt.Rows[0]["Customer_mobile"].ToString();
            string OTP = dt.Rows[0]["OTP"].ToString();

            string[] replacementValues = { OTP };
            Messaging.SendSMSNew(Mob, replacementValues, "OTP For Order Process",name, Session["userid"] + "", Session["username"] + "");
            Messaging.SendWhatsappSMSNew1(Mob, "order_process_number", name, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,true);
            string ss = Messaging.OTPSave(userid, name, Mob, OTP, "Customer",Session["username"]+"", Session["userid"]+"", Session["userphon"] + "");
            string res1 = JsonConvert.SerializeObject(dt, Formatting.None);
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public JsonResult SendServiceOTP(string OTP, string Mobile,string name)
        {
            string res1 = "";
            string[] replacementValues = { OTP };
           Messaging.SendSMSNew(Mobile, replacementValues, "OTP For Order Process", name, Session["userid"] + "", Session["username"] + "");
            Messaging.SendWhatsappSMSNew1(Mobile, "order_process_number", name, Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,true);
            string ss = Messaging.OTPSave(Mobile, name, Mobile, OTP, "Customer", Session["username"] + "", Session["userid"] + "", Session["userphon"] + "");
            
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult VehicleMaintainance()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult VehicleMaintainance(string Vehiclename, string RepairtmentAmount, string description, FormCollection form, string hid)
        {
            string userid = Session["userid"] + "";
            string username = Session["username"] + "";
            string vname = "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string vehicle = "select * from tbl_vehicle where Vehicleno='" + Vehiclename + "'";
                    DataTable dt = db.GetAllRecord(vehicle);
                    if (dt.Rows.Count > 0)
                    {
                        vname = dt.Rows[0]["Vehiclename"].ToString();
                    }
                    string query = "update table_maintenance set vehiclename='" + vname + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Description='" + description + "',Vehicleno='" + Vehiclename + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_vehicle", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_vehicle", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }

                else
                {
                    string vehicle = "select * from tbl_vehicle where Vehicleno='" + Vehiclename + "'";
                    DataTable dt = db.GetAllRecord(vehicle);
                    if (dt.Rows.Count > 0)
                    {
                        vname = dt.Rows[0]["Vehiclename"].ToString();
                    }
                    string query = "insert into table_maintenance(vehiclename,Vehicleno,repairamount,Branchname,Branchid,Status,DateTime,description) values('" + vname + "','" + Vehiclename + "','" + RepairtmentAmount + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + description + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("table_maintenance", db.getmaxid("table_maintenance").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Saved";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_vehicle", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Save Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }

        public JsonResult updmaintainance(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from table_maintenance where Id='" + Up + "'";
                activitylog.Activitylogins("table_maintenance", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Vehicleno = dt.Rows[0]["Vehicleno"] + "";
                    string description = dt.Rows[0]["description"] + "";
                    string repairamount = dt.Rows[0]["repairamount"] + "";
                    res = new string[4] { id, Vehicleno, description, repairamount };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Expecteddilivery(string OrderId, string Expectedfrom, string Expectedto, string Remark)
        {
            string msg = "";
            try
            {
                string status = "";
                string Query = @"select * from tbl_order_summary where Order_id='" + OrderId + "' order by Id desc";
                DataTable sdt = db.GetAllRecord(Query);
                if (sdt.Rows.Count > 0)
                {
                    status = sdt.Rows[0]["Payment_status"] + "";
                    if (status != "Active")
                    {
                        string squery = "select * from tbl_order where Order_id='" + OrderId + "' and Status='Active'";
                        DataTable dt = db.GetAllRecord(squery);
                        if (dt.Rows.Count > 0)
                        {
                            DateTime currentDate = DateTime.Now;
                            // Extract the year and month from the current date
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string invoiceid = "I" + currentYearmonth + "" + arandom(5);
                            string otp = random(4);

                            string formattedfromDate = DateTime.ParseExact(Expectedfrom, "yyyy-M-d", null).ToString("dd-MM-yyyy");
                            string formattedtoDate = DateTime.ParseExact(Expectedto, "yyyy-M-d", null).ToString("dd-MM-yyyy");

                            string query = "Update [tbl_order] set [ExpDelivery_date]='"+ formattedfromDate + " to "+ formattedtoDate + "',[Remark]='"+ Remark + "'  where Order_id='" + OrderId + "' and Status='Active'";

                            if (db.InsertUpdateDelete(query))
                            {
                                db.InsertUpdateDelete("Update [tbl_order_summary] set [ExpDelivery_date]='" + formattedfromDate + " to " + formattedtoDate + "' where Order_id='" + OrderId + "'");

                                activitylog.Activitylogins("tbl_order", OrderId, query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Data Updated";
                                string productname = "";
                                for (int i = 0; i < dt.Rows.Count; i++)
                                {
                                    if (productname == "")
                                    {
                                        productname = dt.Rows[i]["Product_name"] + "";
                                    }
                                    else
                                    {
                                        productname += "," + dt.Rows[i]["Product_name"] + "";
                                    }
                                }

                                string[] replacementValues = { productname };
                                Messaging.SendSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"]+"", Session["userid"] + "", Session["username"] + "");
                                //Messaging.SendWhatsappSMSNew(dt.Rows[0]["Customer_mobile"] + "", replacementValues, "Thank You Message for Purchase", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "");
                                Messaging.SendWhatsappSMSNew1(dt.Rows[0]["Customer_mobile"] + "", "thank_you_message", dt.Rows[0]["Customer_name"] + "", Session["userid"] + "", Session["username"] + "", Session["emprid"] + "", "", "", replacementValues,true);

                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_order", OrderId, query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                                msg = "Update Failed";
                            }

                        }
                        else
                        {
                            msg = "Order Not Found";
                        }
                    }
                    else
                    {
                        msg = "Please Verify Payment";
                    }

                }
                else
                {
                    msg = "Order Not Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }


        //Open Transport dashboard
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult OrderInfo(string type)
        {

            List<Order> Order = new List<Order>();
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                try
                {
                    ViewBag.nm = type;
                    string query = "";
                    //if (type == "all")
                    //{
                    //    query = "SELECT * FROM tbl_order where Order_status='Active'";

                    //}
                    if (type == "all")
                    {
                        query = "SELECT * FROM tbl_order where Status!='Inactive'";
                    }
                    else if (type == "Confirm")
                    {
                        query = "select * from tbl_order where Order_status='Confirmed' and BranchCode='" + Session["ubrcode"] + "'";
                    }
                    else if (type == "Pending")
                    {
                        query = "select * from tbl_order where Order_status='Confirmed' and Status='Active' and BranchCode='" + Session["ubrcode"] + "'";
                    }
                    else if (type == "Dispatch")
                    {
                        query = "select * from tbl_order where Order_status='Dispatch' and Status='Active' and BranchCode='" + Session["ubrcode"] + "'";
                    }
                    else if (type == "Dispatch1")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Dispatch' and Driverid='" + Session["userid"] + "'";
                    }
                    else if (type == "Delivered")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Delivered' and Driverid='" + Session["userid"] + "'";
                    }
                    else if (type == "Cancelled")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Cancelled' and Driverid='" + Session["userid"] + "'";
                    }

                    activitylog.Activitylogins("tbl_order", "", query, "Failed", "", Session["userid"] + "".ToString(), Session["username"] + "".ToString(), Session["usermail"] + "".ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            DataRow row = dt.Rows[i];
                            Order OrderInfo = new Order
                            {

                                OrderID = Convert.ToString(row["Order_id"]),
                                Customer_name = Convert.ToString(row["Customer_name"]),
                                Total_amount = Convert.ToString(row["Total_amount"]),
                                Drivername = Convert.ToString(row["Drivername"]),
                                Drivermobile = Convert.ToString(row["Drivermobile"]),
                                Vehiclename = Convert.ToString(row["Vehiclename"]),
                                Vehicleid = Convert.ToString(row["Vehicleid"]),
                                Transport_status = Convert.ToString(row["Transport_status"]),
                                Product_name = Convert.ToString(row["Product_name"]),
                                Product_price = Convert.ToString(row["Product_price"]),
                                CustomerID = Convert.ToString(row["Customer_id"]),
                                Product_id = Convert.ToString(row["Product_id"]),
                                Driverid = Convert.ToString(row["Driverid"]),
                                Datetime = Convert.ToDateTime(row["Datetime"]),

                            };
                            Order.Add(OrderInfo);
                        }
                    }
                    else
                    {
                        ViewBag.msg = "failed";
                    }
                }
                catch (Exception ex)
                {
                    try
                    {
                        Error_15_16 error_15_16 = new Error_15_16();
                        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                        // Get the page URL, if available
                        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                        // Get the module name
                        moduleName = ex.TargetSite.Module.Name;
                        // Get the error line number, if available
                        var stackTrace = ex.StackTrace;
                        if (!string.IsNullOrEmpty(stackTrace))
                        {
                            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                            if (lineNumberIndex >= 0)
                            {
                                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                                if (newLineIndex >= 0)
                                {
                                    errorLine = lineNumber.Substring(0, newLineIndex);
                                }
                                else
                                {
                                    errorLine = lineNumber;
                                }
                            }
                        }
                        // Get the error message and name
                        if (ex.Message.ToString().Length >= 1000)
                        {
                            errorMessage = ex.Message.Substring(1, 500);
                        }
                        else
                        {
                            errorMessage = ex.Message;
                        }
                        errorName = ex.GetType().FullName;
                        // Get the error trace
                        errorTrace = ex.StackTrace;
                        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"] + "".ToString(), Session["username"] + "".ToString(), Session["usermail"] + "".ToString());
                    }

                    catch
                    {

                    }
                    ViewBag.msg = "Error";
                }
                finally
                {
                    db.connectionstate();
                }
            }
            else
            {
                Response.Redirect(url); ;
            }

            return View(Order);
        }
        
        public JsonResult getcustomerdetails(string Cmpid)
        {
            string getcmp = "SELECT * FROM tbl_customer where Customer_id='" + Cmpid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);
            string res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getproductdetails(string productid)
        {
            string getcmp = "SELECT * FROM [tbl_pro_price_circlar] where Id='" + productid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);
            string res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getdriverdetails(string driverid)
        {
            string getcmp = "SELECT * FROM tbl_registration where Employee_id='" + driverid + "' and Employee_Type='Tuser'";
            DataTable tbll = db.GetAllRecord(getcmp);
            string res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            return Json(res1, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetVehicle(string Type)
        {
            string res = "<option selected value=''>Select one</option>";
            string getcmp = "SELECT * FROM tbl_vehicle where Vehicletype='" + Type + "'";
            DataTable tbll = db.GetAllRecord(getcmp);
            if (tbll.Rows.Count > 0)
            {
                for (int i = 0; i < tbll.Rows.Count; i++)
                {
                    res += "<option value='" + tbll.Rows[i]["Vehicleid"] + "'>" + tbll.Rows[i]["Vehicle_name"] + " (" + tbll.Rows[i]["Registration_no"] + ") - "+ tbll.Rows[i]["Loading_capicity"] + "</option>";

                }
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult getvehicledetails(string Vehicleid)
        {
            string getcmp = "SELECT * FROM tbl_vehicle where Vehicleid='" + Vehicleid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);

            if (tbll == null || tbll.Rows.Count == 0)
            {
                string rentvehicle = "SELECT * FROM tbl_rentvehicle where Vehicleid='" + Vehicleid + "'";
                DataTable rentdt = db.GetAllRecord(rentvehicle);

                string res2 = JsonConvert.SerializeObject(rentdt, Formatting.None);
                return Json(res2, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
                return Json(res1, JsonRequestBehavior.AllowGet);
            }
        }

        //Close Transport dashboard

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Vehicle()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult Vehicle(FormCollection form, string hid)
        {
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update [tbl_vehicle] set [Vehicletype]='" + form["vehicletype"] + "',[Registration_no]='" + form["registrationno"] + "',[Chassis_no]='" + form["chassisno"] + "',[Engine_no]='" + form["engineno"] + "',[Vehicle_name]='" + form["vehiclename"] + "',[Model_no]='" + form["modelno"] + "',[Loading_capicity]='" + form["loadingcapacity"] + "',[Insurance_policy_no]='" + form["insuranceno"] + "',[Insurance_valid_upto]='" + form["insurancevalid"] + "',[Fitness_valid_upto]='" + form["fitnessvalid"] + "',[Tax_upto]='" + form["taxupto"] + "',[Pollution_certificate_no]='" + form["pollutioncerno"] + "',[Pollutioncer_valid_upto]='" + form["pollutioncervalid"] + "',[Driver_name]='" + form["drivername"] + "',[Driver_contact]='" + form["drivercontact"] + "',[Driver_DL]='" + form["driverdlno"] + "',[Driver_DL_valid]='" + form["dlvalid"] + "',[Status]='" + form["status"] + "',[Description]='" + form["description"] + "' where Id='" + hid + "'";


                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_vehicle", hid, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_vehicle", hid, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_vehicle where Registration_no='" + form["registrationno"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Vehicle Already Exist";
                    }
                    else
                    {
                        DateTime currentDate = DateTime.Now;
                        // Extract the year and month from the current date
                        string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                        string Vehicleid = "V" + currentYearmonth + "" + arandom(5);

                        string query = "INSERT INTO [dbo].[tbl_vehicle]([Vehicletype],[Vehicleid],[Registration_no],[Chassis_no],[Engine_no],[Vehicle_name],[Model_no],[Loading_capicity],[Insurance_policy_no],[Insurance_valid_upto],[Fitness_valid_upto],[Tax_upto],[Pollution_certificate_no],[Pollutioncer_valid_upto],[Driver_name],[Driver_contact],[Driver_DL],[Driver_DL_valid],[Status],[Description],[Logid],[Logname],[Datetime])VALUES ('" + form["vehicletype"] + "','" + Vehicleid + "','" + form["registrationno"] + "','" + form["chassisno"] + "','" + form["engineno"] + "','" + form["vehiclename"] + "','" + form["modelno"] + "','" + form["loadingcapacity"] + "','" + form["insuranceno"] + "','" + form["insurancevalid"] + "','" + form["fitnessvalid"] + "','" + form["taxupto"] + "','" + form["pollutioncerno"] + "','" + form["pollutioncervalid"] + "','" + form["drivername"] + "','" + form["drivercontact"] + "','" + form["driverdlno"] + "','" + form["dlvalid"] + "','Active','" + form["description"] + "','" + Session["userid"] + "','" + Session["username"] + "','" + DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss") + "')";

                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_vehicle", db.getmaxid("tbl_vehicle").ToString(), query, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_vehicle", "", query, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult Updatevehicle(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_vehicle where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_vehicle", Up.ToString(), query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Vehicleid = dt.Rows[0]["Vehicleid"] + "";
                    string Vehicletype = dt.Rows[0]["Vehicletype"] + "";
                    string Registration_no = dt.Rows[0]["Registration_no"] + "";
                    string Chassis_no = dt.Rows[0]["Chassis_no"] + "";
                    string Engine_no = dt.Rows[0]["Engine_no"] + "";
                    string Vehicle_name = dt.Rows[0]["Vehicle_name"] + "";
                    string Model_no = dt.Rows[0]["Model_no"] + "";
                    string Loading_capicity = dt.Rows[0]["Loading_capicity"] + "";
                    string Insurance_policy_no = dt.Rows[0]["Insurance_policy_no"] + "";
                    string Insurance_valid_upto = dt.Rows[0]["Insurance_valid_upto"] + "";
                    string Fitness_valid_upto = dt.Rows[0]["Fitness_valid_upto"] + "";
                    string Tax_upto = dt.Rows[0]["Tax_upto"] + "";
                    string Pollution_certificate_no = dt.Rows[0]["Pollution_certificate_no"] + "";
                    string Pollutioncer_valid_upto = dt.Rows[0]["Pollutioncer_valid_upto"] + "";
                    string Driver_name = dt.Rows[0]["Driver_name"] + "";
                    string Driver_contact = dt.Rows[0]["Driver_contact"] + "";
                    string Driver_DL = dt.Rows[0]["Driver_DL"] + "";
                    string Driver_DL_valid = dt.Rows[0]["Driver_DL_valid"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Description = dt.Rows[0]["Description"] + "";
                    res = new string[21] { id, Vehicleid, Vehicletype, Registration_no, Chassis_no, Engine_no, Vehicle_name, Model_no, Loading_capicity, Insurance_policy_no, Insurance_valid_upto, Fitness_valid_upto, Tax_upto, Pollution_certificate_no, Pollutioncer_valid_upto, Driver_name, Driver_contact, Driver_DL, Driver_DL_valid, Status, Description };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }



        ///Transport Module Close ///







        //open my profile

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Myprofile()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            
            return View();
        }
        [HttpPost]
        public ActionResult Myprofile(string Code, string Empname, string Empgardian, string Empaddress, string Emptempaddress, string Empaltnum, string Empdob, string Bloodgroup, string Maritalstatus, string Emerconname, string Emerconmob, string Emerconrel)
        {
            string json = null;
            string query = "Update tbl_registration set Name='" + Empname + "', Gardianname='" + Empgardian + "', Address='" + Empaddress + "', Temporaryaddress='" + Emptempaddress + "', Alternatemobile='" + Empaltnum + "',Dateofbirth='" + Empdob + "',Bloodgroup='" + Bloodgroup + "',Maritalstatus='" + Maritalstatus + "',Emerconname='" + Emerconname + "',Emerconmobile='" + Emerconmob + "',Emerconrelation='" + Emerconrel + "' where Employee_id='" + Code + "'";

            string lquery = "update tbl_login set Username='" + Empname + "' where  Userid='" + Code + "'";

            if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(lquery))
            {
                activitylog.Activitylogins("tbl_registration", Code, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                ViewBag.AlertMessage = "Profile Update";
            }
            else
            {
                activitylog.Activitylogins("tbl_registration", Code, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                ViewBag.AlertMessage = "Profile Not Update";
            }
            activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            DataTable dt = db.GetAllRecord(query);
            activitylog.Activitylogupd("Success", "");


            return View();
        }
        public JsonResult GetEmployee(string Hid)
        {
            string json = null;
            string query = "select * from tbl_registration where Employee_id='" + Hid + "'";
            activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
            DataTable dt = db.GetAllRecord(query);
            activitylog.Activitylogupd("Success", "");
            if (dt.Rows.Count > 0)
            {
                json = JsonConvert.SerializeObject(dt, formatting: Formatting.None);
            }

            return Json(json, JsonRequestBehavior.AllowGet);
        }
        
        public JsonResult updpimg(string Code)
        {
            string json = null;

            // Assuming only one file is uploaded
            var code = Request.Form["code"];
            var pimg = Request.Files.Count > 0 ? Request.Files[0] : null;

            if (pimg != null && pimg.ContentLength > 0)
            {
                //string uniqueFileName = Guid.NewGuid() + "_" + Path.GetFileName(pimg.FileName);
                //string filePath = Path.Combine(Server.MapPath("~/Content/Profile"), uniqueFileName);
                //pimg.SaveAs(filePath);

                string uniqueFileName = APIs.ProfilePic(pimg);

                string query = "Update tbl_registration set Employeeimage='" + uniqueFileName + "' where Employee_id='" + Code + "'";

                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_registration", Code, query, "Success", "Update Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    json = "Profile Update";

                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", Code, query, "Failed", "Update Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    json = "Profile Not Update";
                }
            }
            else
            {
                // Handle the case where no file is uploaded
                json = "No file uploaded";
            }

            return Json(json, JsonRequestBehavior.AllowGet);
        }

        //Close my profile


        // Reports Top to Bootom Report Open //
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ToptoBottom()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult GetToptoBottom(int Startdate, int Enddate, int Month, int Year, string Empid, string Reportfor)
        {
            string json = "", columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            // Sample DataTable with columns "Dr," "Balance," and "Row Material"
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("SR.NO.", typeof(string));
            dataTable.Columns.Add("Employee", typeof(string));
            dataTable.Columns.Add("Attendance", typeof(string));
            dataTable.Columns.Add("D.K.S", typeof(string));
            dataTable.Columns.Add("Demo", typeof(string));
            dataTable.Columns.Add("Points", typeof(string));
            dataTable.Columns.Add("Revenue", typeof(string));
            dataTable.Columns.Add("Customer", typeof(string));
            dataTable.Columns.Add("D/C", typeof(string));
            dataTable.Columns.Add("S/C", typeof(string));
            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }


                string query = "Select * from tbl_group where Status='Active'   and Month_Year='" + Month + "-" + Year + "'";
                if (Empid != null && Empid != "")
                {
                    query = "Select * from tbl_group where Status='Active'   and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Empid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                string Empid1 = "";
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Empid1 += dt.Rows[i]["Employee_id"] + ",";
                    }
                    if (Empid1.EndsWith(","))
                    {
                        Empid1 = Empid1.Substring(0, Empid1.Length - 1);
                    }
                    string empquery = "SELECT Id,Name,Employee_id from tbl_registration where Employee_type='Suser'";
                    if (Empid1 != null && Empid1 != "")
                    {
                        empquery = "SELECT Id,Name,Employee_id,Mobile_no from tbl_registration where Employee_type='Suser' and (";
                        string[] empArray = Empid1.Split(',');
                        foreach (string id in empArray)
                        {
                            empquery += " Employee_id='" + id + "' or";
                        }
                        empquery = empquery.Substring(0, empquery.Length - 3);
                        empquery += ")";
                    }
                    empquery += " GROUP BY Id,Name,Employee_id,Mobile_no";
                    activitylog.Activitylogins("tbl_registration", "", empquery, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                    DataTable empdt = db.GetAllRecord(empquery);
                    activitylog.Activitylogupd("Success", "");
                    if (empdt.Rows.Count > 0)
                    {
                        htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                        htmlTable.Append("<thead>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<th>SR.NO.</th>");
                        htmlTable.Append("<th>Name of Field Employee</th>");
                        htmlTable.Append("<th>Attendance/PMD</th>");
                        htmlTable.Append("<th>D.K.S</th>");
                        htmlTable.Append("<th>Demo</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Revenue</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>D/C</th>");
                        htmlTable.Append("<th>S/C</th>");
                        htmlTable.Append("</tr>");
                        htmlTable.Append("</thead>");
                        htmlTable.Append("<tbody>");
                        for (int i = 0; i < empdt.Rows.Count; i++)
                        {
                            int index = i + 1;
                            string Employeeid = empdt.Rows[i]["Employee_id"] + "";
                            string Employeemobile = empdt.Rows[i]["Mobile_no"] + "";

                            string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Employeeid='" + Employeeid + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "' and (Day(Date)>='" + Startdate + "' and Day(Date)<='" + Enddate + "')";
                            DataTable attdt = db.GetAllRecord(attquery);

                            string dksquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='DKS' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            DataTable dksdt = db.GetAllRecord(dksquery);

                            string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up') and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            DataTable demodt = db.GetAllRecord(demoquery);

                            string customerquery1 = "SELECT Distinct Order_id from [tbl_order] where logid='" + Employeeid + "' and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Delivered') and (Day(ActionDatetime)>='" + Startdate + "' and Day(ActionDatetime)<='" + Enddate + "')";
                            DataTable customerdt1 = db.GetAllRecord(customerquery1);
                            double Points = 0, Revenue = 0;
                            int cuscount = 0;
                            if (customerdt1.Rows.Count > 0)
                            {
                                for (int ijo = 0; ijo < customerdt1.Rows.Count; ijo++)
                                {
                                    //string customerquery = "SELECT * from [tbl_order_summary] where logid='" + Employeeid + "' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    string customerquery = "SELECT * from [tbl_order_summary] where Order_id='" + customerdt1.Rows[ijo]["Order_id"] + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    DataTable customerdt = db.GetAllRecord(customerquery);

                                    if (customerdt.Rows.Count > 0)
                                    {
                                        for (int ci = 0; ci < customerdt.Rows.Count; ci++)
                                        {
                                            string orderquery1 = "SELECT * from [tbl_order] where logid='" + Employeeid + "' and ((MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "') or ( MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Active', 'Confirmed', 'Dispatch'))) and Membertype='Suser' and Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status  IN ('Active', 'Confirmed', 'Dispatch')";
                                            DataTable orderdt1 = db.GetAllRecord(orderquery1);
                                            if (orderdt1.Rows.Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                cuscount++;
                                                string rev_point_query = "select SUM(CAST(Total_proamount AS decimal(10, 2))) AS Revenue,SUM(CAST(Points AS decimal(10, 2))) AS Points from [tbl_order] where  Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and  MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status IN ('Delivered') and (Day(ActionDatetime)>='" + Startdate + "' and Day(ActionDatetime)<='" + Enddate + "')";
                                                DataTable rev_point_dt = db.GetAllRecord(rev_point_query);

                                                if (rev_point_dt.Rows.Count > 0)
                                                {
                                                    if (rev_point_dt.Rows.Count > 0 && rev_point_dt.Rows[0]["Points"] != DBNull.Value)
                                                    {
                                                        Points+= Convert.ToDouble(rev_point_dt.Rows[0]["Points"]);
                                                        Revenue+= Convert.ToDouble(rev_point_dt.Rows[0]["Revenue"] + "");
                                                    }
                                                    //Points += Convert.ToDouble(rev_point_dt.Rows[0]["Points"] + "");
                                                    //Revenue += Convert.ToDouble(rev_point_dt.Rows[0]["Revenue"] + "");

                                                }
                                                else
                                                {
                                                    Points += 0;
                                                    Revenue += 0;
                                                }
                                            }
                                        }
                                    }
                                }
                            }




                            // string customerquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='Order' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            //DataTable customerdt = db.GetAllRecord(customerquery);

                            //string rev_point_query = "SELECT [Id] ,[Order_id],[Product_xml] ,[Customer_name] ,[Total_amount] ,[Order_status] ,[logid] ,[logname] ,[Datetime] ,[Orderby] ,[Status]  ,[Product_price]  ,[Product_quantity] ,[Total_proamount] ,[OrderID2] ,Points FROM [growfast].[dbo].[tbl_order] where Status='Active' and Orderby LIKE '" + Employeeid + ")' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";


                            double d_c = 0;
                            double s_c = 0;
                            if (cuscount != 0)
                            {
                                d_c = Convert.ToDouble(demodt.Rows.Count) / Convert.ToDouble(cuscount);
                                s_c = Convert.ToDouble(Points) / Convert.ToDouble(cuscount);
                            }
                            else
                            {
                                // Handle the case where denominator is zero
                                d_c = 0; s_c = 0;
                            }

                            htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                            htmlTable.Append("<td>" + index + "</td>");
                            htmlTable.Append("<td>" + empdt.Rows[i]["Name"] + "</td>");
                            htmlTable.Append("<td>" + attdt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + dksdt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + demodt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + Points + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(Revenue).ToString("0.00") + "</td>");
                            htmlTable.Append("<td>" + cuscount + "</td>");
                            htmlTable.Append("<td>" + d_c.ToString("0.00") + "</td>");
                            htmlTable.Append("<td>" + s_c.ToString("0.00") + "</td>");
                            htmlTable.Append("</tr>");

                            dataTable.Rows.Add(i, empdt.Rows[i]["Name"], attdt.Rows.Count, dksdt.Rows.Count, demodt.Rows.Count, Points, Revenue, cuscount, d_c, s_c);
                        }
                        htmlTable.Append("</tbody>");

                        if (dataTable.Rows.Count > 0)
                        {

                            double sumOfAttendance = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Attendance"]));
                            double sumOfD_K_S = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["D.K.S"]));
                            double sumOfDemo = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Demo"]));
                            double sumOfPoints = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Points"]));
                            double sumOfRevenue = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Revenue"]));
                            double sumOfCustomer = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Customer"]));

                            double sumOfD_C = 0, sumOfS_C = 0;
                            if (sumOfCustomer != 0)
                            {
                                sumOfD_C = sumOfDemo / sumOfCustomer;
                                sumOfS_C = sumOfRevenue / sumOfCustomer;
                            }
                            else
                            {
                                sumOfD_C = 0;
                                sumOfS_C = 0;
                            }
                            htmlTable.Append("<tfoot>");
                            htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                            htmlTable.Append("<th></th>");
                            htmlTable.Append("<th>Total</th>");
                            htmlTable.Append("<th>" + sumOfAttendance + "</th>");
                            htmlTable.Append("<th>" + sumOfD_K_S + "</th>");
                            htmlTable.Append("<th>" + sumOfDemo + "</th>");
                            htmlTable.Append("<th>" + sumOfPoints + "</th>");
                            htmlTable.Append("<th>" + sumOfRevenue.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfCustomer.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfD_C.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfS_C.ToString("0.00") + "</th>");
                            htmlTable.Append("</tr>");
                            htmlTable.Append("</tfoot>");

                            dataTable.Rows.Add("", "Total", sumOfAttendance, sumOfD_K_S, sumOfDemo, sumOfPoints, sumOfRevenue, sumOfCustomer, sumOfD_C, sumOfS_C);
                        }
                        htmlTable.Append("</table>");
                    }
                    else
                    {
                        //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                    }

                    //DataTable dt = db.GetAllRecord(squery);
                    json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                    //return View();
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        // Reports Top to Bootom Report Close//


        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SalesReport()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        public JsonResult GetSalesReport(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }

                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                    }

                }
                dataTable.Columns.Add("Total", typeof(string));
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));


                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        double[] quantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];

                        DataRow newRow = dataTable.NewRow();

                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = Session["username"];


                        string strlogid = "";
                        int customer = 0;
                        int pmd = 0, avgpmd = 0;
                        int demos = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "'  and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                }
                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);

                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";


                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            customer = customerdt.Rows.Count;
                            if (prodt.Rows.Count > 0)
                            {
                                for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                {
                                    string productname = prodt.Rows[proi]["Brand"] + "";
                                    int quantity = 0;
                                    double amount = 0;
                                    double point = 0;
                                    string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'";
                                    DataTable orderdt = db.GetAllRecord(orderquery);
                                    if (orderdt.Rows.Count > 0)
                                    {
                                        for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                        {
                                            quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                            amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                            point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                        }
                                        quantities[proi] = quantity;
                                        amounts[proi] = amount;
                                        points[proi] = point;
                                    }
                                    else
                                    {
                                        quantities[proi] = 0;
                                        amounts[proi] = 0;
                                        points[proi] = 0;
                                    }

                                }
                            }





                            avgpmd = (pmd / empdt.Rows.Count)/DateTime.DaysInMonth(Year, Month);
                        }


                        newRow["PMD"] = pmd;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total"] = Totalsum;
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = customer;

                        if (customer != 0)
                        {
                            newRow["D_C"] = demos / customer;
                            newRow["P_C"] = Pointsum / customer;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = customer / avgpmd;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                        }

                        dataTable.Rows.Add(newRow);
                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                        htmlTable.Append("<thead>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<th>Month</th>");
                        htmlTable.Append("<th>S.no.</th>");
                        htmlTable.Append("<th>Group Name</th>");
                        htmlTable.Append("<th>Name Of Head</th>");
                        htmlTable.Append("<th>PMD</th>");
                        htmlTable.Append("<th>Avg. PMD</th>");
                        htmlTable.Append("<th>Demos</th>");
                        
                        htmlTable.Append("<th>Total Units</th>");
                        htmlTable.Append("<th>Product Sales Revenue</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>D/C</th>");
                        htmlTable.Append("<th>D/P</th>");
                        htmlTable.Append("<th>P/C</th>");
                        htmlTable.Append("<th>Demos</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Revenue</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("</tr>");
                        htmlTable.Append("</thead>");
                        htmlTable.Append("<tbody>");
                        for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                        {
                            htmlTable.Append("<tr>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Group_Name"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Head"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["PMD"] + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["AVG_PMD"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Demos"] + "</td>");
                            
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Total_Units"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Customer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_P"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["P_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Demos"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_custmer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("</tr>");



                        }
                        int srcount = dataTable.Rows.Count + 1;

                        htmlTable.Append("</tbody>");
                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>"+Session["username"]+"</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["AVG_PMD"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");

                        double sumAVG_PMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["AVG_PMD"]));
                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";


                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");

                    }
                    htmlTable.Append("</table>");
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetSalesReportAdvance(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where  Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("Manpower", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk", typeof(string));
                        }
                        else
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                        }
                    }
                }
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));
                dataTable.Columns.Add("avg_Demosmp", typeof(string));
                dataTable.Columns.Add("avg_Pointsmp", typeof(string));
                dataTable.Columns.Add("avg_revenuemp", typeof(string));
                dataTable.Columns.Add("avg_custmermp", typeof(string));

                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.no.</th>");
                    htmlTable.Append("<th>Group Name</th>");
                    htmlTable.Append("<th>Name Of Head</th>");
                    htmlTable.Append("<th>PMD</th>");
                    htmlTable.Append("<th>Man Power</th>");
                    htmlTable.Append("<th>Avg. PMD</th>");
                    htmlTable.Append("<th>Demos</th>");
                    if (prodt.Rows.Count > 0)
                    {
                        for (int proi = 0; proi < prodt.Rows.Count; proi++)
                        {
                            if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                            }
                            else
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                            }

                        }

                    }
                    htmlTable.Append("<th>Total Units</th>");
                    htmlTable.Append("<th>Product Sales Revenue</th>");
                    htmlTable.Append("<th>Points</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>D/C</th>");
                    htmlTable.Append("<th>D/P</th>");
                    htmlTable.Append("<th>P/C</th>");
                    htmlTable.Append("<th>Demos/avg.PMD</th>");
                    htmlTable.Append("<th>Points/avg.PMD</th>");
                    htmlTable.Append("<th>Revenue/avg.PMD</th>");
                    htmlTable.Append("<th>Customer/avg.PMD</th>");
                    htmlTable.Append("<th>Demos/MP</th>");
                    htmlTable.Append("<th>Points/MP</th>");
                    htmlTable.Append("<th>Revenue/MP</th>");
                    htmlTable.Append("<th>Customer/MP</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double[] quantities = { };
                        double[] singlequantities = { };
                        double[] discquantities = { };
                        double[] bulkquantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        singlequantities = new double[prodt.Rows.Count];
                        discquantities = new double[prodt.Rows.Count];
                        bulkquantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];
                        DataRow newRow = dataTable.NewRow();


                        string head = "Head";
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        //string formattedEndDate = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(endMonth) + "-" + endYear;


                        //newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + (i + 1) + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[i]["Groups"] + "" + "</td>");

                        string strlogid = "";
                        float customer = 0;
                        double pmd = 0;
                        double avgpmd = 0;
                        double demos = 0;
                        double mp = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                    head = empdt.Rows[empi]["Employee_name"] + "";
                                }

                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);

                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";


                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status  IN ('Due') and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            customer = customerdt.Rows.Count;
                            if (customerdt.AsEnumerable().Any(row => row.Field<string>("Payment_status") == "Due"))
                            {
                                if (prodt.Rows.Count > 0)
                                {
                                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                    {
                                        string productname = prodt.Rows[proi]["Brand"] + "";
                                        string ptype = prodt.Rows[proi]["Ptype"] + "";
                                        if (ptype == "Plant")
                                        {
                                            int singlequantity = 0;
                                            int discquantity = 0;
                                            int bulkquantity = 0;
                                            double amount = 0;
                                            double point = 0;
                                            if (customer > 0)
                                            {
                                                string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Order_status IN ('Active', 'Dispatch', 'Confirmed')";
                                                DataTable orderdt = db.GetAllRecord(orderquery);
                                                if (orderdt.Rows.Count > 0)
                                                {
                                                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                                    {
                                                        if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 99 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 0)
                                                        {
                                                            singlequantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }
                                                        else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 199 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 99)
                                                        {
                                                            discquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }
                                                        else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 199)
                                                        {
                                                            bulkquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }

                                                        amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                        point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                                    }
                                                    singlequantities[proi] = singlequantity;
                                                    discquantities[proi] = discquantity;
                                                    bulkquantities[proi] = bulkquantity;
                                                    amounts[proi] = amount;
                                                    points[proi] = point;
                                                }
                                                else
                                                {
                                                    singlequantities[proi] = 0;
                                                    discquantities[proi] = 0;
                                                    bulkquantities[proi] = 0;
                                                    amounts[proi] = 0;
                                                    points[proi] = 0;
                                                }
                                            }
                                            else
                                            {
                                                singlequantities[proi] = 0;
                                                discquantities[proi] = 0;
                                                bulkquantities[proi] = 0;
                                                amounts[proi] = 0;
                                                points[proi] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (customer > 0)
                                            {
                                                int quantity = 0;
                                                double amount = 0;
                                                double point = 0;
                                                string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Status='Active'and Order_status IN ('Active', 'Dispatch', 'Confirmed') and Payment_status ='Due'";
                                                DataTable orderdt = db.GetAllRecord(orderquery);
                                                if (orderdt.Rows.Count > 0)
                                                {
                                                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                                    {
                                                        quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                        point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                                    }
                                                    quantities[proi] = quantity;
                                                    amounts[proi] = amount;
                                                    points[proi] = point;
                                                }
                                                else
                                                {
                                                    quantities[proi] = 0;
                                                    amounts[proi] = 0;
                                                    points[proi] = 0;
                                                }
                                            }
                                            else
                                            {
                                                quantities[proi] = 0;
                                                amounts[proi] = 0;
                                                points[proi] = 0;
                                            }
                                        }

                                    }
                                }

                                else
                                {
                                    //singlequantities[proi] = 0;
                                    //discquantities[proi] = 0;
                                    //bulkquantities[proi] = 0;
                                    //amounts[proi] = 0;
                                    //points[proi] = 0;
                                }
                            }
                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }


                        htmlTable.Append("<td>" + head + "</td>");
                        newRow["PMD"] = pmd;
                        newRow["ManPower"] = empdt.Rows.Count;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;

                        htmlTable.Append("<td>" + pmd + "</td>");
                        htmlTable.Append("<td>" + empdt.Rows.Count + "</td>");
                        htmlTable.Append("<td>" + Convert.ToDouble(avgpmd).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + demos + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "single"] = singlequantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "disc"] = discquantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "bulk"] = bulkquantities[proi];
                                    htmlTable.Append("<td>" + singlequantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + discquantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + bulkquantities[proi] + "</td>");
                                }
                                else
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                                    htmlTable.Append("<td>" + quantities[proi] + "</td>");
                                }

                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Totalsum += singlequantities[sumi] / 10;
                            Totalsum += discquantities[sumi] / 10;
                            Totalsum += bulkquantities[sumi] / 10;
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = customer;
                        htmlTable.Append("<td>" + Totalsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Revenuesum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Pointsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + customer.ToString("0.0") + "</td>");
                        if (customer != 0)
                        {
                            newRow["D_C"] = demos / customer;
                            newRow["P_C"] = Pointsum / customer;
                            htmlTable.Append("<td>" + (demos / customer).ToString("0.0") + "</td>");

                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                            htmlTable.Append("<td>" + (demos / Pointsum).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }
                        if (customer != 0)
                        {
                            htmlTable.Append("<td>" + (Pointsum / customer).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            htmlTable.Append("<td>0</td>");
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = customer / avgpmd;
                            htmlTable.Append("<td>" + (demos / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Pointsum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Revenuesum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (customer / avgpmd).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                        }
                        newRow["avg_Demosmp"] = demos / empdt.Rows.Count;
                        newRow["avg_Pointsmp"] = Pointsum / empdt.Rows.Count;
                        newRow["avg_revenuemp"] = Revenuesum / empdt.Rows.Count;
                        newRow["avg_custmermp"] = customer / empdt.Rows.Count;
                        htmlTable.Append("<td>" + (demos / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Pointsum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Revenuesum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (customer / empdt.Rows.Count).ToString("0.0") + "</td>");

                        htmlTable.Append("</tr>");
                        dataTable.Rows.Add(newRow);
                    }

                    htmlTable.Append("</tbody>");
                    if (dataTable.Rows.Count > 0)
                    {
                        int srcount = dataTable.Rows.Count + 1;
                        double sumPMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"]));
                        double sumAVG_PMD = 0;
                        double sumManPower = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"]));
                        sumAVG_PMD = (sumPMD / sumManPower) / DateTime.DaysInMonth(Year, Month);

                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"])) + "</td>");
                        htmlTable.Append("<td>" + sumAVG_PMD.ToString("0.0") + " </td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"])) + "</td>");
                                }
                                else
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                                }
                            }

                        }


                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgDemosmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumManPower).ToString("0.0") : "0";
                        string avgPointsmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumManPower).ToString("0.0") : "0";
                        string avgRevenuemp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumManPower).ToString("0.0") : "0";
                        string avgCustomermp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumManPower).ToString("0.0") : "0";



                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("<td>" + avgDemosmp + "</td>");
                        htmlTable.Append("<td>" + avgPointsmp + "</td>");
                        htmlTable.Append("<td>" + avgRevenuemp + "</td>");
                        htmlTable.Append("<td>" + avgCustomermp + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");

                    }
                    htmlTable.Append("</table>");
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
               // htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetSalesReportFinal(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid, string Start_date, string End_date)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where  Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("Manpower", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk", typeof(string));
                        }
                        else
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                        }
                    }
                }
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));
                dataTable.Columns.Add("avg_Demosmp", typeof(string));
                dataTable.Columns.Add("avg_Pointsmp", typeof(string));
                dataTable.Columns.Add("avg_revenuemp", typeof(string));
                dataTable.Columns.Add("avg_custmermp", typeof(string));

                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.no.</th>");
                    htmlTable.Append("<th>Group Name</th>");
                    htmlTable.Append("<th>Name Of Head</th>");
                    htmlTable.Append("<th>PMD</th>");
                    htmlTable.Append("<th>Man Power</th>");
                    htmlTable.Append("<th>Avg. PMD</th>");
                    htmlTable.Append("<th>Demos</th>");
                    if (prodt.Rows.Count > 0)
                    {
                        for (int proi = 0; proi < prodt.Rows.Count; proi++)
                        {
                            if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                            }
                            else
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                            }

                        }

                    }
                    htmlTable.Append("<th>Total Units</th>");
                    htmlTable.Append("<th>Product Sales Revenue</th>");
                    htmlTable.Append("<th>Points</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>D/C</th>");
                    htmlTable.Append("<th>D/P</th>");
                    htmlTable.Append("<th>P/C</th>");
                    htmlTable.Append("<th>Demos/avg.PMD</th>");
                    htmlTable.Append("<th>Points/avg.PMD</th>");
                    htmlTable.Append("<th>Revenue/avg.PMD</th>");
                    htmlTable.Append("<th>Customer/avg.PMD</th>");
                    htmlTable.Append("<th>Demos/MP</th>");
                    htmlTable.Append("<th>Points/MP</th>");
                    htmlTable.Append("<th>Revenue/MP</th>");
                    htmlTable.Append("<th>Customer/MP</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        double[] quantities = { };
                        double[] singlequantities = { };
                        double[] discquantities = { };
                        double[] bulkquantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        singlequantities = new double[prodt.Rows.Count];
                        discquantities = new double[prodt.Rows.Count];
                        bulkquantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];
                        DataRow newRow = dataTable.NewRow();

                        string head = "Head";
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        //string formattedEndDate = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(endMonth) + "-" + endYear;


                        //newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + (i + 1) + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[i]["Groups"] + "" + "</td>");

                        string strlogid = "";
                        float customer = 0;
                        int cuscount = 0;
                        double pmd = 0;
                        double avgpmd = 0;
                        double demos = 0;
                        double mp = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                    head = empdt.Rows[empi]["Employee_name"] + "";
                                }

                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);
                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";

                            }

                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }
                        if (strlogid.EndsWith("or "))
                        {
                            strlogid = strlogid.Substring(0, strlogid.Length - 3);
                            strlogid += ")";
                        }
                        string orderid = "''";
                        string customerquery1 = "SELECT Distinct Order_id from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Delivered')";
                        DataTable customerdt1 = db.GetAllRecord(customerquery1);
                        {
                            if (customerdt1.Rows.Count > 0)
                            {
                                for (int ijo = 0; ijo < customerdt1.Rows.Count; ijo++)
                                {
                                    //string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    string customerquery = "SELECT * from [tbl_order_summary] where Order_id='" + customerdt1.Rows[ijo]["Order_id"] + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    DataTable customerdt = db.GetAllRecord(customerquery);
                                    customer = customerdt.Rows.Count;

                                    if (customerdt.Rows.Count > 0)
                                    {
                                        for (int ci = 0; ci < customerdt.Rows.Count; ci++)
                                        {
                                            //string orderquery1 = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status  IN ('Active', 'Confirmed', 'Dispatch')";

                                            string orderquery1 = "SELECT * from [tbl_order] where  " + strlogid + " and Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status IN ('Active', 'Confirmed', 'Dispatch')";
                                            DataTable orderdt1 = db.GetAllRecord(orderquery1);
                                            if (orderdt1.Rows.Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                cuscount++;
                                                if (orderid != "")
                                                {
                                                    orderid += ",'" + customerdt.Rows[ci]["Order_id"] + "'";
                                                }
                                                else
                                                {
                                                    orderid += "'" + customerdt.Rows[ci]["Order_id"] + "'";
                                                }
                                            }

                                        }



                                    }
                                    else
                                    {

                                    }

                                }
                            }


                        }
                        orderid = "and Order_id in (" + orderid + ")";
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                string productname = prodt.Rows[proi]["Brand"] + "";
                                string ptype = prodt.Rows[proi]["Ptype"] + "";
                                if (ptype == "Plant")
                                {
                                    int singlequantity = 0;
                                    int discquantity = 0;
                                    int bulkquantity = 0;
                                    double amount = 0;
                                    double point = 0;
                                    //if (customer > 0)
                                    //{
                                        // string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Order_status IN ('Delivered', 'Planted', 'Counted', 'Replaced', 'Technical Service')";

                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "' and Order_status IN ('Delivered') and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Payment_status='No Due' "+ orderid + "";

                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 99 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 0)
                                                {
                                                    singlequantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 199 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 99)
                                                {
                                                    discquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 199)
                                                {
                                                    bulkquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }

                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            singlequantities[proi] = singlequantity;
                                            discquantities[proi] = discquantity;
                                            bulkquantities[proi] = bulkquantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            singlequantities[proi] = 0;
                                            discquantities[proi] = 0;
                                            bulkquantities[proi] = 0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    //}
                                    //else
                                    //{

                                    //    singlequantities[proi] = 0;
                                    //    discquantities[proi] = 0;
                                    //    bulkquantities[proi] = 0;
                                    //    amounts[proi] = 0;
                                    //    points[proi] = 0;
                                    //}
                                }
                                else
                                {
                                    //if (customer > 0)
                                    //{
                                        int quantity = 0;
                                        double amount = 0;
                                        double point = 0;
                                        //string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Status='Active'and Order_status IN ('Delivered', 'Planted', 'Counted', 'Replaced', 'Technical Service') ";

                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "' and Order_status IN ('Delivered') and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Payment_status='No Due' " + orderid + "";

                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            quantities[proi] = quantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            quantities[proi] = 0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    //}
                                    //else
                                    //{
                                    //    quantities[proi] = 0;
                                    //    amounts[proi] = 0;
                                    //    points[proi] = 0;
                                    //}
                                }

                            }
                        }
                        else
                        {
                            //singlequantities[proi] = 0;
                            //discquantities[proi] = 0;
                            //bulkquantities[proi] = 0;
                            //amounts[proi] = 0;
                            //points[proi] = 0;
                        }

                        htmlTable.Append("<td>" + head + "</td>");
                        newRow["PMD"] = pmd;
                        newRow["ManPower"] = empdt.Rows.Count;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;

                        htmlTable.Append("<td>" + pmd + "</td>");
                        htmlTable.Append("<td>" + empdt.Rows.Count + "</td>");
                        htmlTable.Append("<td>" + avgpmd.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + demos + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "single"] = singlequantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "disc"] = discquantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "bulk"] = bulkquantities[proi];
                                    htmlTable.Append("<td>" + singlequantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + discquantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + bulkquantities[proi] + "</td>");
                                }
                                else
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                                    htmlTable.Append("<td>" + quantities[proi] + "</td>");
                                }
                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Totalsum += singlequantities[sumi] / 10;
                            Totalsum += discquantities[sumi] / 10;
                            Totalsum += bulkquantities[sumi] / 10;
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = cuscount;

                        htmlTable.Append("<td>" + Totalsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Revenuesum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Pointsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + cuscount.ToString("0.0") + "</td>");
                        if (cuscount != 0)
                        {
                            newRow["D_C"] = demos / cuscount;
                            newRow["P_C"] = Pointsum / cuscount;
                            htmlTable.Append("<td>" + (demos / cuscount).ToString("0.0") + "</td>");

                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                            htmlTable.Append("<td>" + (demos / Pointsum).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }
                        if (cuscount != 0)
                        {
                            htmlTable.Append("<td>" + (Pointsum / cuscount).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            htmlTable.Append("<td>0</td>");
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = cuscount / avgpmd;
                            htmlTable.Append("<td>" + (demos / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Pointsum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Revenuesum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (cuscount / avgpmd).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                        }
                        newRow["avg_Demosmp"] = demos / empdt.Rows.Count;
                        newRow["avg_Pointsmp"] = Pointsum / empdt.Rows.Count;
                        newRow["avg_revenuemp"] = Revenuesum / empdt.Rows.Count;
                        newRow["avg_custmermp"] = cuscount / empdt.Rows.Count;
                        htmlTable.Append("<td>" + (demos / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Pointsum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Revenuesum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (cuscount / empdt.Rows.Count).ToString("0.0") + "</td>");

                        htmlTable.Append("</tr>");

                        dataTable.Rows.Add(newRow);
                    }
                    htmlTable.Append("</tbody>");
                    if (dataTable.Rows.Count > 0)
                    {
                        int srcount = dataTable.Rows.Count + 1;
                        double sumPMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"]));
                        double sumAVG_PMD = 0;
                        double sumManPower = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"]));
                        sumAVG_PMD = (sumPMD / sumManPower) / DateTime.DaysInMonth(Year, Month);

                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"])) + "</td>");
                        htmlTable.Append("<td>" + sumAVG_PMD.ToString("0.0") + " </td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"])) + "</td>");
                                }
                                else
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                                }
                            }

                        }


                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgDemosmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumManPower).ToString("0.0") : "0";
                        string avgPointsmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumManPower).ToString("0.0") : "0";
                        string avgRevenuemp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumManPower).ToString("0.0") : "0";
                        string avgCustomermp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumManPower).ToString("0.0") : "0";



                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("<td>" + avgDemosmp + "</td>");
                        htmlTable.Append("<td>" + avgPointsmp + "</td>");
                        htmlTable.Append("<td>" + avgRevenuemp + "</td>");
                        htmlTable.Append("<td>" + avgCustomermp + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");

                    }
                    htmlTable.Append("</table>");
                }
                else
                {
                   // htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetAllORG(string ORGfor,string Searchid,string Month,string Year)
        {
            string res = "";
            string res1 = "";
            try
            {
                //res += "<option selected disabled value=''>Select One</option>";
                res1 = "<option value='";
                string query = "";
                if (ORGfor == "GPS")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' and (Groupid='" + Searchid + "' or Teamid='"+ Searchid + "' or Teamid='" + Searchid + "' or Branchid='" + Searchid + "' or Divisionid='" + Searchid + "' or Regionid='" + Searchid + "' or Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Groupid,Groups,Status ";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Groupid"] + "'> " + dt.Rows[i]["Groups"] + " (Group)</option>";
                            res1+= dt.Rows[i]["Groupid"]+",";
                        }
                    }

                }
                else if (ORGfor == "TPS")
                {
                    query = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active'  and (Teamid='" + Searchid + "' or Teamid='" + Searchid + "' or Branchid='" + Searchid + "' or Divisionid='" + Searchid + "' or Regionid='" + Searchid + "' or Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Teamid"] + "'> " + dt.Rows[i]["Team"] + "</option>";
                            res1 += dt.Rows[i]["Teamid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "BPS")
                {
                    query = "Select Distinct Branchid,Branch,Status from tbl_branch1 where Status='Active' and (Branchid='" + Searchid + "' or Divisionid='" + Searchid + "' or Regionid='" + Searchid + "' or Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Branchid"] + "'> " + dt.Rows[i]["Branch"] + "</option>";
                            res1 += dt.Rows[i]["Branchid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "RPS")
                {
                    query = "Select Distinct Regionid,Region,Status from tbl_region where Status='Active' and (Regionid='" + Searchid + "' or Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Regionid,Region,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Regionid"] + "'> " + dt.Rows[i]["Region"] + "</option>";
                            res1 += dt.Rows[i]["Regionid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "DPS")
                {
                    query = "Select Distinct Divisionid,Division,Status from tbl_division where Status='Active' and (Divisionid='" + Searchid + "' or Regionid='" + Searchid + "' or Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Divisionid,Division,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Divisionid"] + "'> " + dt.Rows[i]["Division"] + "</option>";
                            res1 += dt.Rows[i]["Divisionid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "ZPS")
                {
                    query = "Select Distinct Zoneid,Zone,Status from tbl_zone where Status='Active'  and (Zoneid='" + Searchid + "' or Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Zoneid,Zone,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Zoneid"] + "'> " + dt.Rows[i]["Zone"] + "</option>";
                            res1 += dt.Rows[i]["Zoneid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "CPS")
                {
                    query = "Select Distinct Companyid,Company,Status from tbl_company where Status='Active' and (Companyid='" + Searchid + "') and Month_Year='" + Month + "-" + Year + "' group by Companyid,Company,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Companyid"] + "'> " + dt.Rows[i]["Company"] + "</option>";
                            res1 += dt.Rows[i]["Companyid"] + ",";

                        }
                    }
                }
                res1 = res1.Substring(0, res1.Length - 1);
                res1 += "'>Select All</option>";
                res += res1;
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllORGEmployee(string Month, string Year)
        {
            string res = "";
            string res1 = "";
            try
            {
                res += "<option selected value=''>Select One</option>";

                string query111 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + Month + "-" + Year + "' ";
                DataTable dt111 = db.GetAllRecord(query111);
                if (dt111.Rows.Count > 0)
                {
                    for (int i = 0; i < dt111.Rows.Count; i++)
                    {
                        if (dt111.Rows[i]["Member_type"] + "" == "Head")
                        {
                            res += "<option value= '" + @dt111.Rows[i]["Employee_name"] + "'> " + dt111.Rows[i]["Employee_name"] + " ("+ @dt111.Rows[i]["Groups"] + ") (GL/TL)</option>";
                        }
                        else
                        {
                            res += "<option value= '" + @dt111.Rows[i]["Employee_name"] + "'> " + dt111.Rows[i]["Employee_name"] + " (" + @dt111.Rows[i]["Groups"] + ") (SR/BE)</option>";
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AccountReport()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
         public JsonResult GetAccountReport(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid , string Status)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            string status = "";
            try
            {
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Date", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Employee", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("Invoice", typeof(string));

                dataTable.Columns.Add("proinfo", typeof(string));
                dataTable.Columns.Add("Productname", typeof(string));
                
                dataTable.Columns.Add("Quantity", typeof(string));
                dataTable.Columns.Add("Totalamount", typeof(string));
                dataTable.Columns.Add("advance", typeof(string));
                dataTable.Columns.Add("advancedate", typeof(string));
                dataTable.Columns.Add("Mode", typeof(string));
                dataTable.Columns.Add("Dueamount", typeof(string));
                dataTable.Columns.Add("Verifiedby", typeof(string));
                string searchby = "";
                string subs = "";
                if (Status != "" && Status != null)
                {
                    subs = " and Payment_status='" + Status + "'";
                }
                string Query = "";
                if (Session["membertype"] + "" == "Suser")
                {
                    string subquery = "";
                    string query1 = "Select * from tbl_group where Status='Active' and (Groupid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Teamid='" + Session["searchid"] + "' or Branchid='" + Session["searchid"] + "' or Divisionid='" + Session["searchid"] + "' or Regionid='" + Session["searchid"] + "' or Zoneid='" + Session["searchid"] + "' or Companyid='" + Session["searchid"] + "') and Month_Year='" + Month + "-" + Year + "' ";
                    DataTable dt1 = db.GetAllRecord(query1);
                    if (dt1.Rows.Count > 0)
                    {
                        //for (int i = 0; i < dt1.Rows.Count; i++)
                        //{
                        //    subquery += " Groupid='" + dt1.Rows[i]["Groupid"] + "' or";

                        //}
                        //if (subquery.EndsWith(" or"))
                        //{
                        //    subquery = subquery.Substring(0, subquery.Length - 3);
                        //}
                        //if (subquery != "")
                        //{
                        //    subquery = "and (" + subquery + ")";
                        //}
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            subquery += " logid='" + dt1.Rows[i]["Employee_id"] + "' or";

                        }
                        if (subquery.EndsWith(" or"))
                        {
                            subquery = subquery.Substring(0, subquery.Length - 3);
                        }
                        if (subquery != "")
                        {
                            subquery = "and (" + subquery + ")";
                        }
                    }
                    string query = "";
                    if (Session["designation"] + "" == "SALES REPRESENTATIVE" || Session["designation"] + "" == "BUSINESS EXECUTIVE")
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' and Log_ID='" + Session["userid"] + "'  and Status='Active' ORDER BY Id DESC";
                    }
                    else
                    {
                        query = "SELECT * FROM tbl_customer where RegistrationType='Lead' and BranchCode='" + Session["ubrcode"] + "' /*" + subquery + "*/  and Status='Active' ORDER BY Id DESC";
                    }
                    DataTable cusdt = db.GetAllRecord(query);
                    string cussubquery = "";
                    if (cusdt.Rows.Count > 0)
                    {
                        //for (int i = 0; i < cusdt.Rows.Count; i++)
                        //{
                        //    cussubquery += " Customer_mobile='" + cusdt.Rows[i]["Mobile"] + "' or";
                        //}
                        //if (cussubquery.EndsWith(" or"))
                        //{
                        //    cussubquery = cussubquery.Substring(0, cussubquery.Length - 3);
                        //}
                        //if (cussubquery != "")
                        //{
                        //    cussubquery = "and (" + cussubquery + ")";
                        //}
                    }
                    if (cussubquery != "" || cussubquery=="")
                    {
                        if (searchby != "")
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status in('Active','Due','No Due') and MONTH(Datetime)='" + Month + "' and Year(Datetime)='" + Year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') " + subquery + " " + subs + " order by Id desc";
                        }
                        else
                        {
                            Query = @"select * from [tbl_order_summary] where Payment_status in('Active','Due','No Due') and MONTH(Datetime)='" + Month + "' and Year(Datetime)='" + Year + "' " + subquery + " " + subs + " order by Id desc";
                        }
                    }
                }
                else
                {
                    Query = "select * from [tbl_order_summary] where Payment_status in('Active','Due','No Due') and MONTH(Datetime)='" + Month + "' and Year(Datetime)='" + Year + "' and (Customer_mobile='" + searchby + "' or Customer_name LIKE '%" + searchby + "%' or Orderby LIKE '%" + searchby + "%') and BranchCode='" + Session["ubrcode"] + "' " + subs + " order by Payment_status asc";
                }
                //string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser'";
                        DataTable customerdt = db.GetAllRecord(Query);
                string strlogid = "";

                        if (customerdt.Rows.Count > 0)
                        {
                            

                            strlogid = "(";
                            for (int empio = 0; empio < customerdt.Rows.Count; empio++)
                            {
                                DataRow newRow = dataTable.NewRow();
                                newRow["Date"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                                newRow["S.No"] = empio + 1;
                                newRow["Group_Name"] = "";

                                newRow["Employee"] = customerdt.Rows[empio]["logname"] + "";
                                newRow["Customer"] = customerdt.Rows[empio]["Customer_name"] + "";

                                string odquery = "select * from tbl_order where Order_id='" + customerdt.Rows[empio]["Order_id"] + "' and Status='Active'";
                                DataTable oddt = db.GetAllRecord(odquery);
                                if (oddt.Rows.Count > 0)
                                {
                                    newRow["proinfo"] = "<table class='table table-responsive table-bordered'><thead class='theadb text-center'><tr><th>Invoice</th><th>Product name</th><th>Quantity</th><th>Amount</th></tr></thead><tbody class='text-center'>";

                                    for (int odi = 0; odi < oddt.Rows.Count; odi++)
                                    {
                                        newRow["proinfo"] += "<tr><td>" + oddt.Rows[odi]["Invoiceid"] + "</td><td>" + oddt.Rows[odi]["Product_name"] + "</td><td> " + oddt.Rows[odi]["Product_quantity"] + " </td><td> " + (Convert.ToDouble(oddt.Rows[odi]["Total_proamount"] + "")).ToString("0.0") + " </td></tr>";
                                    }
                                    newRow["proinfo"] += "</tbody></table>";


                                }

                                newRow["Totalamount"] = (Convert.ToDouble(customerdt.Rows[empio]["Total_amount"] + "")).ToString("0.0");
                                newRow["advance"] = customerdt.Rows[empio]["Paid_amount"] + "";
                                newRow["advancedate"] = customerdt.Rows[empio]["Datetime"] + "";
                                newRow["Mode"] = customerdt.Rows[empio]["Payment_method"] + "";
                                newRow["Dueamount"] = (Convert.ToDouble(customerdt.Rows[empio]["Total_amount"] + "") - Convert.ToDouble(customerdt.Rows[empio]["Paid_amount"] + "")).ToString("0.0");


                                string trodquery = "SELECT * from [tbl_order] where Order_id='" + customerdt.Rows[empio]["Order_id"] + "' and Order_status='Confirmed'";
                                DataTable troddt = db.GetAllRecord(trodquery);
                                if (troddt.Rows.Count > 0)
                                {

                                    newRow["Verifiedby"] = troddt.Rows[0]["Actionbyname"] + "";
                                }
                                else
                                {

                                    newRow["Verifiedby"] = "";
                                }
                                dataTable.Rows.Add(newRow);
                            }


                           
                        }


                if (dataTable.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    //htmlTable.Append("<th>Date</th>");
                    htmlTable.Append("<th>S.no.</th>");
                    //htmlTable.Append("<th>Group Name</th>");
                    htmlTable.Append("<th>Employee</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>Order info</th>");
                    htmlTable.Append("<th>Total amount</th>");
                    htmlTable.Append("<th>Paid</th>");
                    htmlTable.Append("<th>Advance date</th>");
                    htmlTable.Append("<th>Mode</th>");
                    htmlTable.Append("<th>Dueamount</th>");
                    htmlTable.Append("<th>Verified by</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                    {

                        htmlTable.Append("<tr>");
                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Group_Name"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Employee"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["proinfo"] + "</td>");

                        htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Totalamount"] + "").ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["advance"] + "").ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["advancedate"] + " </td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Mode"] + " </td>");
                        htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Dueamount"] + "").ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Verifiedby"] + " </td>");
                        htmlTable.Append("</tr>");



                    }

                    double sumTotalamount = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Totalamount"]));
                    double sumadvance = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["advance"]));
                    double sumDueamount = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Dueamount"]));
                    // Calculate the value to be displayed in the HTML table

                    htmlTable.Append("</tbody>");

                    htmlTable.Append("<tfoot>");
                    htmlTable.Append("<tr class='fw-bold fs-6'>");
                    //htmlTable.Append("<td>" + dataTable.Rows[datai]["Date"] + "</td>");
                    //htmlTable.Append("<td></td>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td> Total :</td>");
                    htmlTable.Append("<td>" + sumTotalamount.ToString("0.0") + "</td>");
                    htmlTable.Append("<td>" + sumadvance.ToString("0.0") + "</td>");
                    htmlTable.Append("<td> </td>");
                    htmlTable.Append("<td> </td>");
                    htmlTable.Append("<td>" + sumDueamount.ToString("0.0") + "</td>");
                    htmlTable.Append("<td> </td>");
                    htmlTable.Append("</tr>");

                    htmlTable.Append("</tfoot>");


                    htmlTable.Append("</table>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }

        public ActionResult CHR()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }


        public JsonResult GetCHR(int Month, int Year, string Reportfor, string Uniqueid,string activity)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "invoice")
                {
                    columnname = "Invoiceid";
                }
                else if (Reportfor == "order")
                {
                    columnname = "Order_id";
                }
                else if (Reportfor == "customer")
                {
                    columnname = "Customer_id";
                }
                else if (Reportfor == "post")
                {
                    columnname = "Address";
                }
                else if (Reportfor == "block")
                {
                    columnname = "Block";
                }
                else if (Reportfor == "tahsil")
                {
                    columnname = "Tahsil";
                }
                else if (Reportfor == "district")
                {
                    columnname = "District";
                }
                else if (Reportfor == "state")
                {
                    columnname = "State";
                }
                else if (Reportfor == "pincode")
                {
                    columnname = "Pincode";
                }
                else
                {
                    columnname = "Order_id";
                }
                int srno = 0;
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Invoice", typeof(string));
                dataTable.Columns.Add("Delivery_Month", typeof(string));
                dataTable.Columns.Add("Sales_Person", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("Tahsil", typeof(string));
                dataTable.Columns.Add("District", typeof(string));
                dataTable.Columns.Add("Customer_Address", typeof(string));
                dataTable.Columns.Add("Shipping_Address", typeof(string));
                dataTable.Columns.Add("Product_Name", typeof(string));
                dataTable.Columns.Add("Quantity", typeof(string));
                dataTable.Columns.Add("Amount", typeof(decimal));
                // dataTable.Columns.Add("Amount", typeof(string));
                dataTable.Columns.Add("Current_Status", typeof(string));
                dataTable.Columns.Add("Plantation_date", typeof(string));
                dataTable.Columns.Add("Plantation_by", typeof(string));
                dataTable.Columns.Add("Counting_date", typeof(string));
                dataTable.Columns.Add("Counting_by", typeof(string));
                dataTable.Columns.Add("Good_uint", typeof(string));
                dataTable.Columns.Add("Damageunit", typeof(string));
                dataTable.Columns.Add("Reason_of_Damange", typeof(string));
                dataTable.Columns.Add("Replacement_date", typeof(string));
                dataTable.Columns.Add("Replacement_by", typeof(string));
                dataTable.Columns.Add("Replaced_plant", typeof(string));
                for (int tec = 0; tec < 5; tec++)
                {
                    dataTable.Columns.Add("Techdate" + tec, typeof(string));
                    dataTable.Columns.Add("Techby" + tec, typeof(string));
                    dataTable.Columns.Add("Techremark" + tec, typeof(string));
                }
                dataTable.Columns.Add("Complaint_For", typeof(string));
                dataTable.Columns.Add("Complaint_date", typeof(string));
                dataTable.Columns.Add("Resolve_by", typeof(string));
                dataTable.Columns.Add("Feedback_by_Customer", typeof(string));
                dataTable.Columns.Add("Feedback_by_service", typeof(string));

                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");
                string squery = "";
                if (Session["designation"] + "" == "Sr REGIONAL TECHNICIAN INCHARGE" || Session["designation"] + "" == "REGIONAL TECHNICIAN INCHARGE")
                {

                }
                else
                {
                    string servicequery = "Select * from tbl_servicearea where Employee_id='" + Session["userid"] + "' and Status='Active'";
                    DataTable servicedt = db.GetAllRecord(servicequery);
                    if (servicedt.Rows.Count > 0)
                    {
                        string State = "", District = "", Tahsil = "", Block = "", Pincode = "";
                        for (int i = 0; i < servicedt.Rows.Count; i++)
                        {
                            if (servicedt.Rows[i]["State"] + "" != "")
                            {
                                State += " State='" + servicedt.Rows[i]["State"] + "' or";
                            }
                            if (servicedt.Rows[i]["District"] + "" != "")
                            {
                                District += " District='" + servicedt.Rows[i]["District"] + "' or";
                            }
                            if (servicedt.Rows[i]["Tahsil"] + "" != "")
                            {
                                Tahsil += " Tahsil='" + servicedt.Rows[i]["Tahsil"] + "' or";
                            }
                            if (servicedt.Rows[i]["Vill_town"] + "" != "")
                            {
                                Block += " Block='" + servicedt.Rows[i]["Vill_town"] + "' or";
                            }
                            if (servicedt.Rows[i]["Pincode"] + "" != "")
                            {
                                Pincode += " Pincode='" + servicedt.Rows[i]["Pincode"] + "' or";
                            }
                        }
                        if (State.EndsWith(" or"))
                        {
                            State = State.Substring(0, State.Length - 3);
                            State = "(" + State + ")";
                        }
                        if (District.EndsWith(" or"))
                        {
                            District = District.Substring(0, District.Length - 3);
                            District = "(" + District + ")";
                        }
                        if (Tahsil.EndsWith(" or"))
                        {
                            Tahsil = Tahsil.Substring(0, Tahsil.Length - 3);
                            Tahsil = "(" + Tahsil + ")";
                        }
                        if (Block.EndsWith(" or"))
                        {
                            Block = Block.Substring(0, Block.Length - 3);
                            Block = "(" + Block + ")";
                        }
                        if (Pincode.EndsWith(" or"))
                        {
                            Pincode = Pincode.Substring(0, Pincode.Length - 3);
                            Pincode = "(" + Pincode + ")";
                        }

                        if (State != "")
                        {
                            squery += " AND " + State;
                        }
                        if (District != "")
                        {
                            squery += " AND " + District;
                        }
                        if (Tahsil != "")
                        {
                            squery += " AND " + Tahsil;
                        }
                        if (Block != "")
                        {
                            squery += " AND " + Block;
                        }
                        if (Pincode != "")
                        {
                            squery += " AND " + Pincode;
                        }


                    }
                }
                string orderquery = "SELECT * from [tbl_order] where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'"+ squery + " ";

                if (Uniqueid != null && Uniqueid != "")
                {
                    orderquery += " and " + columnname + "='" + Uniqueid + "'";
                }
                if (activity != null && activity != "")
                {
                    orderquery += " and Order_status='" + activity + "'";
                }
                DataTable orderdt = db.GetAllRecord(orderquery);
                if (orderdt.Rows.Count > 0)
                {
                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                    {
                        srno++;
                        DataRow newRow = dataTable.NewRow();
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = srno;

                        if (orderdt.Rows[orderi]["Product_type"] + "" == "Plant")
                        {
                            if (orderdt.Rows[orderi]["Order_status"] + "" == "Active" || orderdt.Rows[orderi]["Order_status"] + "" == "Cancelled")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Confirmed")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Dispatch")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Delivered")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Planted")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];


                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Counted")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";


                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Replaced")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Replacement_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Technical Service")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Replacement_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    int hh = tec + 1
; if (orderdt.Rows[orderi]["Order_status"] + "" == "Technical Service" && orderdt.Rows[orderi]["Service_status"] + "" == "Service " + hh)
                                    {
                                        newRow["Techdate" + tec] = orderdt.Rows[orderi]["ActionDatetime"];
                                        newRow["Techby" + tec] = orderdt.Rows[orderi]["Actionbyname"];
                                        newRow["Techremark" + tec] = "-";
                                    }

                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                            }
                        }
                        else
                        {
                            if (orderdt.Rows[orderi]["Order_status"] + "" == "Active" || orderdt.Rows[orderi]["Order_status"] + "" == "Cancelled")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Confirmed")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Dispatch")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Delivered")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }

                        }
                        dataTable.Rows.Add(newRow);
                    }

                }
                else
                {

                }
                if (dataTable.Rows.Count > 0)
                {

                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    // htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.No</th>");
                    htmlTable.Append("<th>Invoice</th>");
                    htmlTable.Append("<th>Delivery Month</th>");
                    htmlTable.Append("<th>Sales Person</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>Tahsil</th>");
                    htmlTable.Append("<th>District</th>");
                    htmlTable.Append("<th>Customer Address</th>");
                    htmlTable.Append("<th>Shipping Address</th>");
                    htmlTable.Append("<th>Product Name</th>");
                    htmlTable.Append("<th>Quantity</th>");
                    //htmlTable.Append("<th>Amount</th>");
                    htmlTable.Append("<th>Current Status</th>");
                    htmlTable.Append("<th>Plantation date</th>");
                    htmlTable.Append("<th>Plantation by</th>");
                    htmlTable.Append("<th>Counting date</th>");
                    htmlTable.Append("<th>Counting by</th>");
                    //htmlTable.Append("<th>Good uint</th>");
                    htmlTable.Append("<th>Damage unit</th>");
                    htmlTable.Append("<th>Reason of Damange</th>");
                    htmlTable.Append("<th>Replacement date</th>");
                    htmlTable.Append("<th>Replacement by</th>");
                    htmlTable.Append("<th>Replaced plant unit</th>");
                    for (int tec = 1; tec < 6; tec++)
                    {
                        htmlTable.Append("<th>Technical service date " + tec + "</th>");
                        htmlTable.Append("<th>Technical service by " + tec + "</th>");
                        htmlTable.Append("<th>Technical service remark " + tec + "</th>");
                    }
                    htmlTable.Append("<th>Complaint For</th>");
                    htmlTable.Append("<th>Complaint date</th>");
                    htmlTable.Append("<th>Resolve by</th>");
                    htmlTable.Append("<th>Feedback by Customer</th>");
                    htmlTable.Append("<th>Feedback by service</th>");

                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("</tbody>");
                    for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                    {
                        htmlTable.Append("<tr>");

                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Invoice"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Delivery_Month"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Sales_Person"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Tahsil"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["District"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer_Address"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Shipping_Address"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Product_Name"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Quantity"] + "</td>");
                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Amount"] + "</td>");
                        //htmlTable.Append("<td>" + ((decimal)dataTable.Rows[datai]["Amount"]).ToString("0.00") + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Current_Status"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Plantation_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Plantation_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Counting_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Counting_by"] + "</td>");
                        // htmlTable.Append("<td>" + dataTable.Rows[datai]["Good_uint"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Damageunit"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Reason_of_Damange"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replacement_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replacement_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replaced_plant"] + "</td>");
                        for (int tec = 0; tec < 5; tec++)
                        {
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techdate" + tec] + " </td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techby" + tec] + " </td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techremark" + tec] + " </td>");
                        }
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Complaint_For"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Complaint_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Resolve_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Feedback_by_Customer"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Feedback_by_service"] + "</td>");



                        htmlTable.Append("</tr>");



                    }
                    htmlTable.Append("</tbody>");

                    htmlTable.Append("</table>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }





                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult ProductFeedback()
        {
            string msg = "";
            try
            {
                var OrderId = Request.Form["fOrderid"];
                var OrderId2 = Request.Form["fOrderid2"];
                var productid = Request.Form["fproduct_id"];
                var customername = Request.Form["fcustomer"];
                var invoice = Request.Form["fInvoiceid"];
                var feedbacka = Request.Form["rangeValueA"];
                var feedbackb = Request.Form["rangeValueB"];
                var feedbackc = Request.Form["rangeValueC"];
                var feedbackd = Request.Form["rangeValueD"];
                var feedbacke = Request.Form["rangeValueE"];
                var feedbackf = Request.Form["rangeValueF"];
                var feedbackg = Request.Form["rangeValueG"];
                var feedbackh = Request.Form["rangeValueH"];
                var feedbacki = Request.Form["rangeValueI"];
                var feedbackj = Request.Form["rangeValueJ"];


                string query = "SELECT * FROM tbl_productfeedback WHERE orderid='" + OrderId + "' AND orderid2 ='" + OrderId2 + "' AND Status='Active'";
                activitylog.Activitylogins("tbl_productfeedback", "", query, "Failed", "", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                msg = "Feedback already Exits";

                if (dt.Rows.Count == 0)
                {
                    string insertQuery = "INSERT INTO tbl_productfeedback (orderid,orderid2,Productid,customer_name,invoiceid,feedback_executive_conduct,feedback_Commitment_Delivery,feedback_PDS_Experience,feedback_Planting_Advice,feedback_replacement_system,feedback_technical_advice,feedback_Product_Maintenance,feedback_company_phone_response,feedback_product_quantity,feedback_conduct_of_officer,Datetime,Status) VALUES ('" + OrderId + "', '" + OrderId2 + "','" + productid + "','" + customername + "','" + invoice + "','" + feedbacka + "','" + feedbackb + "','" + feedbackc + "','" + feedbackd + "','" + feedbacke + "','" + feedbackf + "','" + feedbackg + "','" + feedbackh + "','" + feedbacki + "','" + feedbackj + "', GETDATE(),'Active')";

                    if (db.InsertUpdateDelete(insertQuery))
                    {
                        activitylog.Activitylogins("tbl_productfeedback", db.getmaxid("tbl_productfeedback").ToString(), insertQuery, "Success", "Insert Success", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Feedback inserted successfully";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_productfeedback", "", insertQuery, "Failed", "Insert Failed", Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                        msg = "Failed to insert feedback";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["userid"].ToString(), Session["username"].ToString(), Session["usermail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult RenewSession()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                Session["membertype"] = Session["membertype"];
                Session["usermail"] = Session["usermail"];
                Session["userid"] = Session["userid"];
                Session["userphon"] = Session["userphon"];
                Session["username"] = Session["username"];

                Session["emprid"] = Session["emprid"];
                Session["shiftstarttime"] = Session["shiftstarttime"];
                Session["shiftendtime"] = Session["shiftendtime"];
                Session["ubrname"] = Session["ubrname"];
                Session["ubrcode"] = Session["ubrcode"];
                Session["desigorder"] = Session["desigorder"];

                Session["Companyid"] = Session["Companyid"];
                Session["Zoneid"] = Session["Zoneid"];
                Session["shiftendtime"] = Session["shiftendtime"];
                Session["ubrname"] = Session["ubrname"];
                Session["ubrcode"] = Session["ubrcode"];
                Session["desigorder"] = Session["desigorder"];
                Session["designation"] = Session["designation"];
                Session["Premises"] = Session["Premises"];

                Session["Yardid"] = Session["Yardid"];
                Session["Yardname"] = Session["Yardname"];
                Session["Yardrowid"] = Session["Yardrowid"];
                if (Session["membertype"] + "" == "Suser")
                {
                    Session["Companyid"] = Session["Companyid"];
                    Session["Zoneid"] = Session["Zoneid"];
                    Session["Regionid"] = Session["Regionid"];
                    Session["Divisionid"] = Session["Divisionid"];
                    Session["Branchid"] = Session["Branchid"];
                    Session["Teamid"] = Session["Teamid"];
                    Session["Groupname"] = Session["Groupname"];
                    Session["Groupid"] = Session["Groupid"];

                    Session["CGroupname"] = Session["CGroupname"];
                    Session["CGroupid"] = Session["CGroupid"];

                }
                if (Session["membertype"] + "" == "Auser")
                {
                    Session["State"] = Session["State"] + "";
                    Session["District"] = Session["District"];
                    Session["Tahsil"] = Session["Tahsil"];
                    Session["Block"] = Session["Block"];
                    Session["Pincode"] = Session["Pincode"];
                    Session["reporting_id"] = Session["reporting_id"];
                    Session["reporting_rowid"] = Session["reporting_rowid"];
                    Session["reporting_name"] = Session["reporting_name"];

                }

                Session["gtokenid"] = Session["gtokenid"];
                Session["leaveregionid"] = Session["leaveregionid"];
                Session["Leadid"] = Session["Leadid"];
                Session["Rowid"] = Session["Rowid"];
                Session["Groupname"] = Session["Groupname"];
                Session["Card"] = Session["Card"];
                Session["support"] = Session["support"];
                Session["searchid"] = Session["searchid"];
                return Json("true", JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json("False", JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult onchange(string Ptype)
        {
            string json = "";
            try
            {
                string query = "select DISTINCT proid,Brand from tbl_pro_price_circlar WHERE Status = 'Active' AND ptype = '" + Ptype + "'ORDER BY proid ASC";/* "select * from tbl_pro_price_circlar where ptype='" + Ptype + "'";*/
                DataTable dt = db.GetAllRecord(query);

                if (dt != null && dt.Rows.Count > 0)
                {
                    json = JsonConvert.SerializeObject(dt, Formatting.None);
                }
                else
                {
                    ViewBag.msg = "No data available for " + Ptype + ".";
                }
            }
            catch (Exception ex)
            {
                // Handle exceptions
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(json, JsonRequestBehavior.AllowGet);
        }
        public ActionResult OTPVerify()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }

        public JsonResult ChangeMonth(string Month,string Year)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                Session["Month"] = Month;
                Session["Year"] = Year;
                return Json("true", JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json("False", JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult ChangeORG(string Month, string Year)
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {
                string MonthYear = Month + "-" + Year;
                if (Session["membertype"] + "" == "Suser")
                {
                    string companyquery = "Select * from tbl_company where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                    DataTable companysesdt = db.GetAllRecord(companyquery);
                    DataTable zonesesdt = null, regionsesdt = null, divisionsesdt = null, branchsesdt = null, teamsesdt = null, groupsesdt = null;
                    if (companysesdt.Rows.Count > 0)
                    {
                        Session["Companyid"] = companysesdt.Rows[0]["Companyid"] + "";
                        Session["searchid"] = companysesdt.Rows[0]["Companyid"] + "";
                    }
                    else
                    {
                        string zonequery = "Select * from tbl_zone where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                        zonesesdt = db.GetAllRecord(zonequery);

                        if (zonesesdt.Rows.Count > 0)
                        {
                            Session["Companyid"] = zonesesdt.Rows[0]["Companyid"] + "";
                            Session["Zoneid"] = zonesesdt.Rows[0]["Zoneid"] + "";
                            Session["searchid"] = zonesesdt.Rows[0]["Zoneid"] + "";
                        }
                        else
                        {
                            string regionquery = "Select * from tbl_region where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                            regionsesdt = db.GetAllRecord(regionquery);

                            string divisionquery = "Select * from tbl_division where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                            divisionsesdt = db.GetAllRecord(divisionquery);
                            if (regionsesdt.Rows.Count > 0)
                            {
                                Session["Companyid"] = regionsesdt.Rows[0]["Companyid"] + "";
                                Session["Zoneid"] = regionsesdt.Rows[0]["Zoneid"] + "";
                                Session["Regionid"] = regionsesdt.Rows[0]["Regionid"] + "";
                                Session["searchid"] = regionsesdt.Rows[0]["Regionid"] + "";
                            }
                            else
                            {
                                if (divisionsesdt.Rows.Count > 0)
                                {
                                    Session["Companyid"] = divisionsesdt.Rows[0]["Companyid"] + "";
                                    Session["Zoneid"] = divisionsesdt.Rows[0]["Zoneid"] + "";
                                    Session["Regionid"] = divisionsesdt.Rows[0]["Regionid"] + "";
                                    Session["Divisionid"] = divisionsesdt.Rows[0]["Divisionid"] + "";
                                    Session["searchid"] = divisionsesdt.Rows[0]["Divisionid"] + "";
                                }
                                else
                                {
                                    string branchquery = "Select * from tbl_branch1 where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                                    branchsesdt = db.GetAllRecord(branchquery);

                                    string teampquery = "Select * from tbl_team where Uniquid='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                                    teamsesdt = db.GetAllRecord(teampquery);
                                    if (branchsesdt.Rows.Count > 0)
                                    {
                                        Session["Companyid"] = branchsesdt.Rows[0]["Companyid"] + "";
                                        Session["Zoneid"] = branchsesdt.Rows[0]["Zoneid"] + "";
                                        Session["Regionid"] = branchsesdt.Rows[0]["Regionid"] + "";
                                        Session["Divisionid"] = branchsesdt.Rows[0]["Divisionid"] + "";
                                        Session["Branchid"] = branchsesdt.Rows[0]["Branchid"] + "";
                                        Session["searchid"] = branchsesdt.Rows[0]["Branchid"] + "";
                                    }
                                    else
                                    {
                                        if (teamsesdt.Rows.Count > 0)
                                        {
                                            Session["Companyid"] = teamsesdt.Rows[0]["Companyid"] + "";
                                            Session["Zoneid"] = teamsesdt.Rows[0]["Zoneid"] + "";
                                            Session["Regionid"] = teamsesdt.Rows[0]["Regionid"] + "";
                                            Session["Divisionid"] = teamsesdt.Rows[0]["Divisionid"] + "";
                                            Session["Branchid"] = teamsesdt.Rows[0]["Branchid"] + "";
                                            Session["Teamid"] = teamsesdt.Rows[0]["Teamid"] + "";
                                            Session["searchid"] = teamsesdt.Rows[0]["Teamid"] + "";
                                        }
                                        else
                                        {
                                            string groupquery = "Select * from tbl_group where Employee_id='" + Session["Userid"] + "' and Status='Active' and Month_Year='" + MonthYear + "'";
                                            groupsesdt = db.GetAllRecord(groupquery);
                                            if (groupsesdt.Rows.Count > 0)
                                            {
                                                Session["Companyid"] = groupsesdt.Rows[0]["Companyid"] + "";
                                                Session["Zoneid"] = groupsesdt.Rows[0]["Zoneid"] + "";
                                                Session["Regionid"] = groupsesdt.Rows[0]["Regionid"] + "";
                                                Session["Divisionid"] = groupsesdt.Rows[0]["Divisionid"] + "";
                                                Session["Branchid"] = groupsesdt.Rows[0]["Branchid"] + "";
                                                Session["Teamid"] = groupsesdt.Rows[0]["Teamid"] + "";
                                                Session["Groupid"] = groupsesdt.Rows[0]["Groupid"] + "";
                                                Session["Groupname"] = groupsesdt.Rows[0]["Groups"] + "";
                                                Session["searchid"] = groupsesdt.Rows[0]["Groupid"] + "";
                                            }
                                            else
                                            {

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {

                }
                return Json("true", JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json("False", JsonRequestBehavior.AllowGet);
            }
        }

        public string linebreakfun(string input)
        {
            string uf=string.Join("\n", Enumerable.Range(0, (input.Length + 39) / 40).Select(ij => input.Substring(ij* 40, Math.Min(40, input.Length - ij* 40))));
            return uf;
        }
        
        
        // HRMS Releted Pages

        
        public ActionResult RegistrationBydrive()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url); ;
            }
            return View();
        }
        [HttpPost]
        public ActionResult RegistrationBydrive(FormCollection form, HttpPostedFileBase canimage, string prevAttachement, string hfile, string photoview, HttpPostedFileBase upresume)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var restableObject2 = Request.Form["restableObject2"];
            var hid = Request.Form["hid"];
            //var forupdate = Request.Form["forupdate"];
            try
            {
                string productxml2 = "";
                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (restableObject2 != "null" || restableObject2 != "")
                {
                    DataTable dtres2 = Encryption.ConvertJSONToDataTable2(restableObject2);
                    productxml2 = Encryption.ConvertDatatableTo_XML(dtres2);
                }
                string productxml = Encryption.ConvertDatatableTo_XML(dtres);

                string fileName = ""; string str = "", str2 = ""; string fpth = ""; string qrpth = "";
                string acode = Session["auid"] + "";
                string auname = Session["auname"] + "";

                hid = form["hid"];
                if (hid != "" && hid != null)
                {
                    string fdpath = "";
                    if (canimage != null && canimage.ContentLength > 0)
                    {
                        fdpath = APIs.Candidatedocs(canimage, "cnimg");
                    }
                    string resume = "";
                    if (upresume != null && upresume.ContentLength > 0)
                    {
                        fdpath = APIs.Candidatedocs(upresume, "rsm");
                    }
                    if (dtres.Rows.Count > 0)
                    {
                        string query = "update tbl_HRM set Drive_id='" + form["Drive_id"] + "', Drive_Name='" + form["Drive_Name"] + "', Drive_Location='" + form["Drive_Location"] + "', Appliedfor='" + form["Appliedfor"] + "', canname='" + form["canname"] + "', cangardian='" + form["cangardian"] + "', canmail='" + form["canmail"] + "', canmobile='" + form["canmobile"] + "', canage='" + form["canage"] + "', cangender='" + form["cangender"] + "', canmaritalstatus='" + form["canmaritalstatus"] + "', canNationality='" + form["canNationality"] + "', canReligion='" + form["canReligion"] + "', canimage='" + fdpath + "', Pcity='" + form["Pcity"] + "', Ppincode='" + form["Ppincode"] + "', Pstate='" + form["Pstate"] + "', Pcountry='" + form["Pcountry"] + "', Tcity='" + form["Tcity"] + "', Tcountry='" + form["Tcountry"] + "', Tstate='" + form["Tstate"] + "', XML_qualification= '" + productxml + "', Tpincode='" + form["Tpincode"] + "', logname='" + Session["logname"] + "', logid='" + Session["logid"] + "', candob='" + form["candob"] + "',DateTime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',XML_precompany='" + productxml2 + "',vehicle='" + form["vehicle"] + "',Licenceno='" + form["Licenceno"] + "',reference='" + form["reference"] + "',referalName='" + form["referalName"] + "',referalMob='" + form["referalMob"] + "',upresume='" + resume + "',workStatus='Filled',status='Active',Vehicleno='" + form["Vehicleno"] + "',Jobtittlefor='" + form["Jobtittlefor"] + "' where Id='" + hid + "'";

                        string query2 = "update tbl_redrive set workStatus='Filled' where Id='" + form["forupdate"] + "'";

                        if (db.InsertUpdateDelete(query))
                        {
                            msg = "Success";

                        }
                        else
                        {
                            msg = "Fail";
                        }
                    }
                }
                else
                {
                    string fdpath = "";
                    if (canimage != null && canimage.ContentLength > 0)
                    {
                        fdpath = APIs.Candidatedocs(canimage, "cnimg");
                    }
                    string resume = "";
                    if (upresume != null && upresume.ContentLength > 0)
                    {
                        fdpath = APIs.Candidatedocs(upresume, "rsm");
                    }
                    if (dtres.Rows.Count > 0)
                    {
                        string query = " insert into tbl_HRM (Drive_id,Drive_Name,Drive_Location,Appliedfor,canname,cangardian,canmail,canmobile,canage,cangender,canmaritalstatus,canNationality,canReligion,canimage,Pcity,Ppincode,Pstate,Pcountry,Tcity,Tcountry,Tstate,XML_qualification,Tpincode,logname,logid,candob,DateTime,XML_precompany,vehicle,Licenceno,reference,referalName,referalMob,upresume,workStatus,status,Vehicleno,Jobtittlefor,Branchname,Branchcode) values('" + form["Drive_id"] + "','" + form["Drive_Name"] + "','" + form["Drive_Location"] + "','" + form["Appliedfor"] + "','" + form["canname"] + "','" + form["cangardian"] + "','" + form["canmail"] + "','" + form["canmobile"] + "','" + form["canage"] + "','" + form["cangender"] + "','" + form["canmaritalstatus"] + "','" + form["canNationality"] + "','" + form["canReligion"] + "','" + fdpath + "','" + form["Pcity"] + "','" + form["Ppincode"] + "','" + form["Pstate"] + "','" + form["Pcountry"] + "','" + form["Tcity"] + "','" + form["Tcountry"] + "','" + form["Tstate"] + "','" + productxml + "','" + form["Tpincode"] + "','" + Session["logname"] + "','" + Session["logid"] + "','" + form["candob"] + "','" + DateTime.Now.ToString("yyyy-MM-dd  HH:mm:ss") + "','" + productxml2 + "','" + form["vehicle"] + "','" + form["Licenceno"] + "','" + form["reference"] + "','" + form["referalName"] + "','" + form["referalMob"] + "','" + resume + "','Filled','Active','" + form["Vehicleno"] + "','" + form["Jobtittlefor"] + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";

                        string query2 = "update tbl_redrive set workStatus='Filled' where Id='" + form["forupdate"] + "'";
                        if (db.InsertUpdateDelete(query)/* && db.InsertUpdateDelete(query2)*/)
                        {
                            msg = "Success";
                        }
                        else
                        {
                            msg = "Fail";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["auid"].ToString(), Session["auname"].ToString(), Session["amail"].ToString());
                }
                catch
                {
                    ViewBag.msg = "Please check Url";
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public ActionResult Generatepayslip()
        {
            //string url = "";
            //string id = Session["userid"] + "";
            //string token = Session["gtokenid"] + "";
            //if (token != null && token != "")
            //{
            //    url = "/Home/AppLogin?token=" + token;
            //}
            //else
            //{
            //    url = "/Home/Login";
            //}
            //if (id != null && id != "")
            //{

            //}
            //else
            //{
            //    Response.Redirect(url); 
            //}
            return View();
        }
        public JsonResult Updategeneratewe(string Up, string Month, string Year)
        {
            string[] res = { };
            try
            {
                string query = "SELECT * FROM tbl_registration WHERE Employee_id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);

                string queryert = "SELECT COUNT(Punchin_time) AS PunchinCount FROM tbl_attendance WHERE Employeeid='" + Up + "' AND MONTH(Date) = '" + Month + "' AND YEAR(Date) = '" + Year + "'";
                DataTable dter = db.GetAllRecord(queryert);

                string queryitt = "SELECT Loanamount FROM tbl_loan WHERE Employeeid='" + Up + "'";
                DataTable itder = db.GetAllRecord(queryitt);

                if (dt.Rows.Count > 0 && dter.Rows.Count > 0 && itder.Rows.Count > 0)
                {
                    // Case where all conditions are satisfied
                    string allowance = "";
                    string id = dt.Rows[0]["Id"].ToString();
                    string EPF = dt.Rows[0]["EPF"].ToString();
                    string Basicsalary = dt.Rows[0]["Basicsalary"].ToString();
                    string Totaldeduction = dt.Rows[0]["Totaldeduction"].ToString();
                    string Professionaltax = dt.Rows[0]["Professionaltax"].ToString();

                    if (!string.IsNullOrEmpty(Basicsalary))
                    {
                        allowance = (Convert.ToDecimal(dt.Rows[0]["Grosssalary"]) - Convert.ToDecimal(dt.Rows[0]["Basicsalary"])).ToString();
                    }
                    else
                    {
                        allowance = "0";
                    }
                    string name = dt.Rows[0]["Name"].ToString();
                    string Ecode = dt.Rows[0]["Employee_id"].ToString();
                    string Punchin_times = dter.Rows[0]["PunchinCount"].ToString();
                    string loanammount = itder.Rows[0]["Loanamount"].ToString();
                    string Designation = dt.Rows[0]["Designation"].ToString();
                    string Department_name = dt.Rows[0]["Department_name"].ToString();
                    string Dateofjoining = dt.Rows[0]["Dateofjoining"].ToString();
                    string District = dt.Rows[0]["District"].ToString();
                    string State = dt.Rows[0]["State"].ToString();
                    string UANNo = dt.Rows[0]["UANNo"].ToString();
                    string PAN = dt.Rows[0]["PAN"].ToString();
                    string Accountnumber = dt.Rows[0]["Accountnumber"].ToString();

                    res = new string[18] { id, EPF, Basicsalary, Totaldeduction, allowance, Professionaltax, name, Ecode, Punchin_times, loanammount, Designation, Department_name, Dateofjoining, District, State, UANNo, PAN, Accountnumber };
                }
                else if (dt.Rows.Count > 0 && dter.Rows.Count > 0)
                {
                    // Case where itder.Rows.Count <= 0
                    string allowance = "";
                    string id = dt.Rows[0]["Id"].ToString();
                    string EPF = dt.Rows[0]["EPF"].ToString();
                    string Basicsalary = dt.Rows[0]["Basicsalary"].ToString();
                    string Totaldeduction = dt.Rows[0]["Totaldeduction"].ToString();
                    string Professionaltax = dt.Rows[0]["Professionaltax"].ToString();

                    if (!string.IsNullOrEmpty(Basicsalary))
                    {
                        allowance = (Convert.ToDecimal(dt.Rows[0]["Grosssalary"]) - Convert.ToDecimal(dt.Rows[0]["Basicsalary"])).ToString();
                    }
                    else
                    {
                        allowance = "0";
                    }
                    string name = dt.Rows[0]["Name"].ToString();
                    string Ecode = dt.Rows[0]["Employee_id"].ToString();
                    string Punchin_times = dter.Rows[0]["PunchinCount"].ToString();
                    string loanammount = ""; // No loan amount available
                    string Designation = dt.Rows[0]["Designation"].ToString();
                    string Department_name = dt.Rows[0]["Department_name"].ToString();
                    string Dateofjoining = dt.Rows[0]["Dateofjoining"].ToString();
                    string District = dt.Rows[0]["District"].ToString();
                    string State = dt.Rows[0]["State"].ToString();
                    string UANNo = dt.Rows[0]["UANNo"].ToString();
                    string PAN = dt.Rows[0]["PAN"].ToString();
                    string Accountnumber = dt.Rows[0]["Accountnumber"].ToString();

                    res = new string[18] { id, EPF, Basicsalary, Totaldeduction, allowance, Professionaltax, name, Ecode, Punchin_times, loanammount, Designation, Department_name, Dateofjoining, District, State, UANNo, PAN, Accountnumber };
                }
                else if (dt.Rows.Count > 0 && itder.Rows.Count > 0)
                {
                    // Case where dter.Rows.Count <= 0
                    string allowance = "";
                    string id = dt.Rows[0]["Id"].ToString();
                    string EPF = dt.Rows[0]["EPF"].ToString();
                    string Basicsalary = dt.Rows[0]["Basicsalary"].ToString();
                    string Totaldeduction = dt.Rows[0]["Totaldeduction"].ToString();
                    string Professionaltax = dt.Rows[0]["Professionaltax"].ToString();

                    if (!string.IsNullOrEmpty(Basicsalary))
                    {
                        allowance = (Convert.ToDecimal(dt.Rows[0]["Grosssalary"]) - Convert.ToDecimal(dt.Rows[0]["Basicsalary"])).ToString();
                    }
                    else
                    {
                        allowance = "0";
                    }
                    string name = dt.Rows[0]["Name"].ToString();
                    string Ecode = dt.Rows[0]["Employee_id"].ToString();
                    string Punchin_times = ""; // No attendance record available
                    string loanammount = itder.Rows[0]["Loanamount"].ToString();
                    string Designation = dt.Rows[0]["Designation"].ToString();
                    string Department_name = dt.Rows[0]["Department_name"].ToString();
                    string Dateofjoining = dt.Rows[0]["Dateofjoining"].ToString();
                    string District = dt.Rows[0]["District"].ToString();
                    string State = dt.Rows[0]["State"].ToString();
                    string UANNo = dt.Rows[0]["UANNo"].ToString();
                    string PAN = dt.Rows[0]["PAN"].ToString();
                    string Accountnumber = dt.Rows[0]["Accountnumber"].ToString();


                    res = new string[18] { id, EPF, Basicsalary, Totaldeduction, allowance, Professionaltax, name, Ecode, Punchin_times, loanammount, Designation, Department_name, Dateofjoining, District, State, UANNo, PAN, Accountnumber };
                }
                else if (dter.Rows.Count > 0 && itder.Rows.Count > 0)
                {
                    // Case where all conditions are satisfied
                    string allowance = "";
                    string id = "";
                    string EPF = "";
                    string Basicsalary = "";
                    string Totaldeduction = "";
                    string Professionaltax = "";

                    if (!string.IsNullOrEmpty(Basicsalary))
                    {
                        allowance = (Convert.ToDecimal(dt.Rows[0]["Grosssalary"]) - Convert.ToDecimal(dt.Rows[0]["Basicsalary"])).ToString();
                    }
                    else
                    {
                        allowance = "0";
                    }
                    string name = "";
                    string Ecode = "";
                    string Punchin_times = dter.Rows[0]["PunchinCount"].ToString();
                    string loanammount = itder.Rows[0]["Loanamount"].ToString();
                    string Designation = dt.Rows[0]["Designation"].ToString();
                    string Department_name = "";
                    string Dateofjoining = "";
                    string District = "";
                    string State = "";
                    string UANNo = "";
                    string PAN = "";
                    string Accountnumber = "";

                    res = new string[18] { id, EPF, Basicsalary, Totaldeduction, allowance, Professionaltax, name, Ecode, Punchin_times, loanammount, Designation, Department_name, Dateofjoining, District, State, UANNo, PAN, Accountnumber };
                }
                // Handle other combinations as needed
            }
            catch (Exception ex)
            {
                // Handle exceptions
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Updategeneratetrt(string startdate, string enddatere, string monthre, string yearre)
        {
            DataTable dt = new DataTable();
            // string[] res = { };
            string jsonResultww = "";
            try
            {
                // Construct SQL query to fetch data from tbl_registration
                string querye = "SELECT Employee_id,Name,Mobile_no,Email,Department_name,Designation,Employeementtype,Dateofjoining,Branchname FROM tbl_registration WHERE MONTH(Date_time) = '" + monthre + "' AND YEAR(Date_time) = '" + yearre + "' ";

                dt = db.GetAllRecord(querye);

                jsonResultww = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                // Handle exceptions and log errors
            }
            finally
            {
                db.connectionstate();
            }

            return Json(jsonResultww, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Newdrive()
        {
            string url = "";
            string id = Session["userid"] + "";
            string token = Session["gtokenid"] + "";
            if (token != null && token != "")
            {
                url = "/Home/AppLogin?token=" + token;
            }
            else
            {
                url = "/Home/Login";
            }
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect(url);
            }
            return View();
        }
        public JsonResult driveshow()
        {
            string res = "";
            try
            {
                string query = "select * from tbl_redrive where status='Active' AND Managerid= '" + Session["userid"] + "' ";

                // Assuming you have a method to execute the query and return a DataTable
                DataTable dts = db.GetAllRecord(query);

                if (dts.Rows.Count > 0)
                {
                    res = "1";
                }
                else
                {
                    res = "0";
                }
            }
            catch (Exception ex)
            {
                // Log or handle the exception appropriately
                res = "0"; // or handle differently based on your application's needs
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetEmployee2(string Desig, string pagename, string Month, string Year)
        {
            string res = "";
            string query = "";
            string tablename = "", columnname = "";

            try
            {
                res += "<option selected disabled value=''>Select one</option>";
                if (Desig == "SR_BE")
                {
                    query = "select * from tbl_registration where (Designation='SALES REPRESENTATIVE' or Designation='BUSINESS EXECUTIVE')";
                }
                else if (Desig == "GL_TL")
                {
                    query = "select * from tbl_registration where (Designation='GROUP LEADER' or Designation='TEAM LEADER')";
                }
                else if (Desig == "ASM_DBM_BM")
                {
                    query = "select * from tbl_registration where (Designation='AREA SALES MANAGER' or Designation='DEPUTY BRANCH MANAGER' or Designation='BRANCH MANAGER' or Designation='Sr BRANCH MANAGER' or Designation='DIVISIONAL SALES MANAGER' or Designation='Sr DIVISIONAL SALES MANAGER' or Designation='ASSISTANT REGIONAL SALES MANAGER' or Designation='REGIONAL SALES MANAGER' or Designation='Sr REGIONAL SALES MANAGER' or Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR' )";
                }
                else if (Desig == "SRBM_DSM_SRDSM_ARSM_RSM_SRRSM")
                {
                    query = "select * from tbl_registration where (Designation='Sr BRANCH MANAGER' or Designation='DIVISIONAL SALES MANAGER' or Designation='Sr DIVISIONAL SALES MANAGER' or Designation='ASSISTANT REGIONAL SALES MANAGER' or Designation='REGIONAL SALES MANAGER' or Designation='Sr REGIONAL SALES MANAGER' or Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }
                else if (Desig == "AGM_DGM_GM_SRGM_AVP")
                {
                    query = "select * from tbl_registration where (Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }
                else if (Desig == "MD_VP_SRVP_D_ED_CED")
                {
                    query = "select * from tbl_registration where (Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }

                //activitylog.Activitylogins("tbl_registration", Desig, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (pagename == "Group")
                {
                    tablename = "tbl_group";
                    columnname = "Employee_rowid";
                }
                else if (pagename == "Team")
                {
                    tablename = "tbl_team";
                    columnname = "Rowid";
                }
                else if (pagename == "Branch")
                {
                    tablename = "tbl_branch1";
                    columnname = "Rowid";
                }
                else if (pagename == "Division")
                {
                    tablename = "tbl_division";
                    columnname = "Rowid";
                }
                else if (pagename == "Region")
                {
                    tablename = "tbl_region";
                    columnname = "Rowid";
                }
                else if (pagename == "Zone")
                {
                    tablename = "tbl_zone";
                    columnname = "Rowid";
                }
                else if (pagename == "Company")
                {
                    tablename = "tbl_company";
                    columnname = "Rowid";
                }
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string selquery = "select * from " + tablename + " where " + columnname + "='" + dt.Rows[i]["Id"] + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable seldt = db.GetAllRecord(selquery);
                        if (seldt.Rows.Count > 0)
                        {

                        }
                        else
                        {
                            res += "<option value= '" + dt.Rows[i]["Id"] + "'> " + dt.Rows[i]["Name"] + "</option>";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }


    }
}