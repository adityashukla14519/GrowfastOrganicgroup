using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using System.Xml.Linq;
using Formatting = Newtonsoft.Json.Formatting;

namespace Growfast.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin
        DbManager db = new DbManager();
        Activitylog activitylog = new Activitylog();
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Index()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AttendanceInfo(string type, string date, string mtype, string locationId, string subLocationId, string departmentId, string subDepartmentId, string designationId, string shiftId, string areaId)
        {
            List<Attendanceinfo> Attendanceinfo = new List<Attendanceinfo>();
            try
            {
                ViewBag.nm = type;
                string query = "";
                if (type == "in")
                {
                    query = "SELECT * FROM tbl_attendance WHERE Punchin_time IS NOT NULL AND DATE='" + date + "'";

                }
                else if (type == "out")
                {
                    query = "SELECT * FROM tbl_attendance WHERE Punchout_time IS NOT NULL AND DATE='" + date + "'";
                }
                else
                {
                    query = "SELECT * FROM tbl_attendance WHERE (Punchin_time IS NOT NULL or Punchout_time IS NOT NULL) AND DATE='" + date + "'";
                }
                activitylog.Activitylogins("tbl_attendance", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        Attendanceinfo attendanceinfo = new Attendanceinfo
                        {
                            id = Convert.ToInt32(row["id"]),
                            Employeeid = Convert.ToString(row["Employeeid"]),
                            Name = Convert.ToString(row["Name"]),
                            Department = Convert.ToString(row["Department"]),
                            Designation = Convert.ToString(row["Designation"]),
                            Shiftname = Convert.ToString(row["Shiftname"]),
                            Starttime = Convert.ToString(row["Starttime"]),
                            Endtime = Convert.ToString(row["Endtime"]),
                            date = Convert.ToString(row["Date"]),
                            punchintime = Convert.ToString(row["Punchin_time"]),
                            punchouttime = Convert.ToString(row["Punchout_time"]),
                            Workhours = Convert.ToString(row["Working_hours"]),
                            punchinlocation = Convert.ToString(row["Punchin_location"]),
                            punchoutlocation = Convert.ToString(row["Punchout_location"]),
                        };

                        Attendanceinfo.Add(attendanceinfo);
                    }
                }
                else
                {
                    ViewBag.msg = "failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View(Attendanceinfo);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult EmployeeInfo(string type, string date,string mtype, string locationId, string subLocationId, string departmentId, string subDepartmentId, string designationId, string shiftId, string areaId)
        {
            List<EmployeeInfo> EmployeeInfo = new List<EmployeeInfo>();
            try
            {
                ViewBag.nm = type;
                ViewBag.mtype = mtype;
                string query = "";
                if (type == "all")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_attendance.Date = '" + date + "'";

                }
                else if (type == "active")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_attendance.Date = '" + date + "'  WHERE  tbl_registration.Status='Approved'";
                }
                else if (type == "inactive")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_attendance.Date = '" + date + "'  WHERE  tbl_registration.Status!='Approved'";
                }
                else if (type == "present")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_attendance.Date = '" + date + "' WHERE tbl_attendance.Employeeid IS NOT NULL ";
                }
                else if (type == "absent")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_attendance.Date = '" + date + "' WHERE tbl_attendance.Employeeid IS NULL";
                }
                else if (type == "late-comers")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND DATEADD(MINUTE, 10, tbl_registration.Shiftstarttime) <= tbl_attendance.Punchin_time and  tbl_attendance.Date = '" + date + " WHERE tbl_attendance.Employeeid IS NOT NULL";
                }
                else if (type == "on-leave")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_leave ON tbl_registration.Employee_id = tbl_leave.Employeeid where (Day(tbl_leave.From_date)<='" + DateTime.Parse(date).ToString("dd") + "' and Day(tbl_leave.To_date)>='" + DateTime.Parse(date).ToString("dd") + "') and ((MONTH(tbl_leave.From_date)='" + DateTime.Parse(date).ToString("MM") + "' and YEAR(tbl_leave.From_date)='" + DateTime.Parse(date).ToString("yyyy") + "') or (MONTH(tbl_leave.To_date)='" + DateTime.Parse(date).ToString("MM") + "' and YEAR(tbl_leave.To_date)='" + DateTime.Parse(date).ToString("yyyy") + "')) and tbl_leave.Status='Approved' and tbl_leave.Employeeid IS NOT NULL";
                }
                else if (type == "early-leavers")
                {
                    query = "SELECT * FROM tbl_registration LEFT OUTER JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND tbl_registration.Shiftendtime > tbl_attendance.Punchout_time and tbl_attendance.Date = '" + date + "' WHERE tbl_attendance.Employeeid IS NOT NULL";
                }
                if (mtype != null && mtype!="") {
                    query += " and tbl_registration.Employee_type='" + mtype + "'";
                }
                activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                DataTable dt = db.GetAllRecord(query);
                
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if(type == "on-leave")
                        {
                            DataRow row = dt.Rows[i];
                            EmployeeInfo employeeInfo = new EmployeeInfo
                            {
                                id = Convert.ToInt32(row["id"]),
                                Employeeid = Convert.ToString(row["Employee_id"]),
                                Name = Convert.ToString(row["Name"]),
                                Department = Convert.ToString(row["Department_name"]),
                                Designation = Convert.ToString(row["Designation"]),
                                Managername = Convert.ToString(row["Managername"]),
                                Branchname = Convert.ToString(row["Branchname"]),
                                Branchcode = Convert.ToString(row["Branchcode"]),
                                Email = Convert.ToString(row["Email"]),
                                Premice = Convert.ToString(row["Premises"]),
                                //Location = Convert.ToString(row["Location"]),
                                punchintime = "",
                                punchouttime ="",
                                Status = Convert.ToString(row["Status"]),
                                imagepath = Convert.ToString(row["Employeeimage"]),
                            };

                            EmployeeInfo.Add(employeeInfo);
                        }
                        else
                        {
                            DataRow row = dt.Rows[i];
                            EmployeeInfo employeeInfo = new EmployeeInfo
                            {
                                id = Convert.ToInt32(row["id"]),
                                Employeeid = Convert.ToString(row["Employee_id"]),
                                Name = Convert.ToString(row["Name"]),
                                Department = Convert.ToString(row["Department_name"]),
                                Designation = Convert.ToString(row["Designation"]),
                                Managername = Convert.ToString(row["Managername"]),
                                Branchname = Convert.ToString(row["Branchname"]),
                                Branchcode = Convert.ToString(row["Branchcode"]),
                                Email = Convert.ToString(row["Email"]),
                                Premice = Convert.ToString(row["Premises"]),
                                //Location = Convert.ToString(row["Location"]),
                                punchintime = Convert.ToString(row["Punchin_time"]),
                                punchouttime = Convert.ToString(row["Punchout_time"]),
                                Status = Convert.ToString(row["Status"]),
                                imagepath = Convert.ToString(row["Employeeimage"]),
                            };

                            EmployeeInfo.Add(employeeInfo);
                        }
                        
                    }
                }
                else
                {
                    ViewBag.msg = "failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View(EmployeeInfo);
        }
        //Open Employee info
        public JsonResult GetEmpdata(string Empid)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_registration where Id='" + Empid + "'";
                DataTable dt = db.GetAllRecord(query);
                if (dt.Rows.Count > 0)
                {
                    //string id = dt.Rows[0]["Id"]+"";
                    string empid = dt.Rows[0]["Employee_id"] + "";
                    string emptype = dt.Rows[0]["Employee_Type"] + "";
                    string empname = dt.Rows[0]["Name"] + "";
                    string empmobile = dt.Rows[0]["Mobile_no"] + "";
                    string empmail = dt.Rows[0]["Email"] + "";
                    string empdepart = dt.Rows[0]["Department_name"] + "";
                    string empdesig = dt.Rows[0]["Designation"] + "";
                    string empgardian = dt.Rows[0]["Gardianname"] + "";
                    string empadd = dt.Rows[0]["Address"] + "";
                    string emptempadd = dt.Rows[0]["Temporaryaddress"] + "";
                    string empaltmobile = dt.Rows[0]["Alternatemobile"] + "";
                    string empdob = dt.Rows[0]["Dateofbirth"] + "";
                    string empgender = dt.Rows[0]["Gender"] + "";
                    string empmarital = dt.Rows[0]["Maritalstatus"] + "";
                    string workpremis = dt.Rows[0]["Premises"] + "";
                    string empblood = dt.Rows[0]["Bloodgroup"] + "";
                    string empsubdepart = "";
                    string empmanagername = dt.Rows[0]["Managercode"] + "";
                    string empmanagerid = dt.Rows[0]["Managername"] + "";
                    string empemptype = dt.Rows[0]["Employeementtype"] + "";
                    string banknm = dt.Rows[0]["Bankname"] + "";
                    string empaccnumber = dt.Rows[0]["Accountnumber"] + "";
                    string empaccholdnm = dt.Rows[0]["Accountholdername"] + "";
                    string checkin = dt.Rows[0]["Activatecheckin"] + "";
                    string ifsc = dt.Rows[0]["IFSC"] + "";
                    string pfno = dt.Rows[0]["PFNo"] + "";
                    string esic = dt.Rows[0]["ESIC"] + "";
                    string paymentmode = dt.Rows[0]["Paymentmode"] + "";
                    string dol = dt.Rows[0]["DOL"] + "";
                    string pan = dt.Rows[0]["PAN"] + "";
                    string emerconname = dt.Rows[0]["Emerconname"] + "";
                    string emerconmob = dt.Rows[0]["Emerconmobile"] + "";
                    string emerconrel = dt.Rows[0]["Emerconrelation"] + "";
                    string shifttiming = dt.Rows[0]["Shifttiming"] + "";
                    string shiftname = dt.Rows[0]["Shiftname"] + "";
                    string shiftstart = dt.Rows[0]["Shiftstarttime"] + "";
                    string shiftend = dt.Rows[0]["Shiftendtime"] + "";
                    string doj = dt.Rows[0]["Dateofjoining"] + "";
                    string nofchild = dt.Rows[0]["Nofchild"] + "";
                    string citizen = dt.Rows[0]["Citizenship"] + "";
                    string flexhr = dt.Rows[0]["Flexigours"] + "";
                    string empimg = dt.Rows[0]["Employeeimage"] + "";
                    string qrimg = dt.Rows[0]["QRpath"] + "";



                    string basicsal = dt.Rows[0]["Basicsalary"] + "";
                    string horentall = dt.Rows[0]["Houserentallowance"] + "";
                    string convetall = dt.Rows[0]["Conveyanceallowance"] + "";
                    string mediall = dt.Rows[0]["Medicalallowance"] + "";
                    string spacall = dt.Rows[0]["Specialallowance"] + "";
                    string grosalary = dt.Rows[0]["Grosssalary"] + "";
                    string epf = dt.Rows[0]["EPF"] + "";
                    string healthens = dt.Rows[0]["HealthInsurance"] + "";
                    string profetax = dt.Rows[0]["Professionaltax"] + "";
                    string tds = dt.Rows[0]["TDS"] + "";
                    string totaldeduc = dt.Rows[0]["Totaldeduction"] + "";
                    string netpay = dt.Rows[0]["Netpay"] + "";
                    res = new string[55] { empid, emptype, empname, empmobile, empmail, empdepart, empdesig, empgardian, empadd, emptempadd, empaltmobile, empdob, empgender, empmarital, workpremis, empblood, empsubdepart, empmanagername, empmanagerid, empemptype, banknm, empaccnumber, empaccholdnm, checkin, ifsc, pfno, esic, paymentmode, dol, pan, emerconname, emerconmob, emerconrel, shifttiming, shiftname, shiftstart, shiftend, doj, nofchild, citizen, flexhr, empimg, qrimg, basicsal, horentall, convetall, mediall, spacall, grosalary, epf, healthens, profetax, tds, totaldeduc, netpay };
                }
            }
            catch (Exception ex)
            {
                ViewBag.msg = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetORGdata(string Orgid,string Type,string Month,string Year)
        {
            string[] res = { };
            try
            {
                string query = "";
                if (Type == "Group")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' and Groupid='"+ Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Groupid,Groups,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Groupid"]+"", dt.Rows[0]["Groups"] +"" };
                    }
                    else
                    {
                        //query = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active' and Teamid='" + Orgid + "' group by Teamid,Team,Status";
                        //DataTable dt1 = db.GetAllRecord(query);
                        //if (dt1.Rows.Count > 0)
                        //{
                        //    res = new string[2] { dt1.Rows[0]["Teamid"] + "", dt1.Rows[0]["Team"] + "" };
                        //}
                    }
                }
                else if (Type == "Team")
                {
                    query = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active' and Teamid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Teamid"] + "", dt.Rows[0]["Team"] + "" };
                    }
                }
                else if (Type == "Branch")
                {
                    query = "Select Distinct Branchid,Branch,Status from tbl_branch1 where Status='Active' and Branchid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Branchid"] + "", dt.Rows[0]["Branch"] + "" };
                    }
                }
                else if (Type == "Region")
                {
                    query = "Select Distinct Regionid,Region,Status from tbl_region where Status='Active' and Regionid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Regionid,Region,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Regionid"] + "", dt.Rows[0]["Region"] + "" };
                    }
                }
                else if (Type == "Division")
                {
                    query = "Select Distinct Divisionid,Division,Status from tbl_division where Status='Active' and Divisionid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Divisionid,Division,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Divisionid"] + "", dt.Rows[0]["Division"] + "" };
                    }
                }
                else if (Type == "Zone")
                {
                    query = "Select Distinct Zoneid,Zone,Status from tbl_zone where Status='Active' and Zoneid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Zoneid,Zone,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Zoneid"] + "", dt.Rows[0]["Zone"] + "" };
                    }
                }
                else if (Type == "Company")
                {
                    query = "Select Distinct Companyid,Company,Status from tbl_company where Status='Active' and Companyid='" + Orgid + "' and Month_Year='" + Month + "-" + Year + "' group by Companyid,Company,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        res = new string[2] { dt.Rows[0]["Companyid"] + "", dt.Rows[0]["Company"] + "" };
                    }
                }
            }
            catch (Exception ex)
            {
                ViewBag.msg = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetORG(string Type,string Month,string Year)
        {
            string res = "";
            try
            {
                res += "<option selected disabled value=''>Select one</option>";
                string query = "";
                if (Type == "Group")
                {
                    query = "Select Distinct Groupid,Groups,Status,Month,Year from tbl_group where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Groupid,Groups,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_team where Rowid='" + dt.Rows[i]["Groupid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                res += "<option value= '" + dt.Rows[i]["Groupid"] + "'> " + dt.Rows[i]["Groups"] + " (Group)</option>";
                            }

                        }
                    }

                    //string query1 = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active' group by Teamid,Team,Status";
                    //DataTable dt1 = db.GetAllRecord(query1);
                    //if (dt1.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < dt1.Rows.Count; i++)
                    //    {
                    //        res += "<option value= '" + dt1.Rows[i]["Teamid"] + "'> " + dt1.Rows[i]["Team"] + " (Team)</option>";

                    //    }
                    //}
                }
                else if (Type == "Team")
                {
                    query = "Select Distinct Teamid,Team,Status,Month,Year from tbl_team where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_branch1 where Rowid='" + dt.Rows[i]["Teamid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {

                                res += "<option value= '" + dt.Rows[i]["Teamid"] + "'> " + dt.Rows[i]["Team"] + "</option>";
                            }

                        }
                    }
                }
                else if (Type == "Branch")
                {
                    query = "Select Distinct Branchid,Branch,Status,Month,Year from tbl_branch1 where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_division where Rowid='" + dt.Rows[i]["Branchid"] + "' and Status='Active' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {

                                res += "<option value= '" + dt.Rows[i]["Branchid"] + "'> " + dt.Rows[i]["Branch"] + "</option>";
                            }
                            
                        }
                    }
                }
                else if (Type == "Region")
                {
                    query = "Select Distinct Regionid,Region,Status,Month,Year from tbl_region where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Regionid,Region,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_zone where Rowid='" + dt.Rows[i]["Regionid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {

                                res += "<option value= '" + dt.Rows[i]["Regionid"] + "'> " + dt.Rows[i]["Region"] + "</option>";
                            }
                            
                        }
                    }
                }
                else if (Type == "Division")
                {
                    query = "Select Distinct Divisionid,Division,Status,Month,Year from tbl_division where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Divisionid,Division,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_region where Rowid='" + dt.Rows[i]["Divisionid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                res += "<option value= '" + dt.Rows[i]["Divisionid"] + "'> " + dt.Rows[i]["Division"] + "</option>";
                            }
                        }
                    }
                }
                else if (Type == "Zone")
                {
                    query = "Select Distinct Zoneid,Zone,Status,Month,Year from tbl_zone where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Zoneid,Zone,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_company where Rowid='" + dt.Rows[i]["Zoneid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                res += "<option value= '" + dt.Rows[i]["Zoneid"] + "'> " + dt.Rows[i]["Zone"] + "</option>";
                            }
                        }
                    }
                }
                else if (Type == "Company")
                {
                    query = "Select Distinct Companyid,Company,Status,Month,Year from tbl_company where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Companyid,Company,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string selquery = "select * from tbl_company where Rowid='" + dt.Rows[i]["Companyid"] + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                            DataTable seldt = db.GetAllRecord(selquery);
                            if (seldt.Rows.Count > 0)
                            {

                            }
                            else
                            {
                                res += "<option value= '" + dt.Rows[i]["Companyid"] + "'> " + dt.Rows[i]["Company"] + "</option>";
                            }
                            
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetSalesORG(string Type,string Month,string Year)
        {
            string res = "";
            try
            {
                res += "<option selected disabled value=''>Select one</option>";
                string query = "";
                if (Type == "Group")
                {
                    query = "Select Distinct Groupid,Groups,Status,Month,Year from tbl_group where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Groupid,Groups,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Groupid"] + "'> " + dt.Rows[i]["Groups"] + " (Group)</option>";

                        }
                    }

                    //string query1 = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active' group by Teamid,Team,Status";
                    //DataTable dt1 = db.GetAllRecord(query1);
                    //if (dt1.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < dt1.Rows.Count; i++)
                    //    {
                    //        res += "<option value= '" + dt1.Rows[i]["Teamid"] + "'> " + dt1.Rows[i]["Team"] + " (Team)</option>";

                    //    }
                    //}
                }
                else if (Type == "Team")
                {
                    query = "Select Distinct Teamid,Team,Status,Month,Year from tbl_team where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Teamid"] + "'> " + dt.Rows[i]["Team"] + "</option>";

                        }
                    }
                }
                else if (Type == "Branch")
                {
                    query = "Select Distinct Branchid,Branch,Status,Month,Year from tbl_branch1 where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Branchid"] + "'> " + dt.Rows[i]["Branch"] + "</option>";

                        }
                    }
                }
                else if (Type == "Region")
                {
                    query = "Select Distinct Regionid,Region,Status,Month,Year from tbl_region where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Regionid,Region,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Regionid"] + "'> " + dt.Rows[i]["Region"] + "</option>";
                        }
                    }
                }
                else if (Type == "Division")
                {
                    query = "Select Distinct Divisionid,Division,Status,Month,Year from tbl_division where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Divisionid,Division,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Divisionid"] + "'> " + dt.Rows[i]["Division"] + "</option>";
                        }
                    }
                }
                else if (Type == "Zone")
                {
                    query = "Select Distinct Zoneid,Zone,Status,Month,Year from tbl_zone where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Zoneid,Zone,Status,Month,Year";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Zoneid"] + "'> " + dt.Rows[i]["Zone"] + "</option>";
                        }
                    }
                }
                else if (Type == "Company")
                {
                    query = "Select Distinct Companyid,Company,Status from tbl_company where Status='Active' and Month_Year='" + Month + "-" + Year + "' group by Companyid,Company,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Companyid"] + "'> " + dt.Rows[i]["Company"] + "</option>";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetOrgPageDetails(string Type,string OrgId,string Pagename, string Month, string Year)
        {
            string res = "";
            try
            {
                string columnname = "";
                string query = "";
                if (Type == "Group")
                {
                    columnname = "Groupid";
                }
                else if (Type == "Team")
                {
                    columnname = "Teamid";
                }
                else if (Type == "Branch")
                {
                    columnname = "Branchid";
                }
                else if (Type == "Region")
                {
                    columnname = "Regionid";
                }
                else if (Type == "Division")
                {
                    columnname = "Divisionid";
                }
                else if (Type == "Zone")
                {
                    columnname = "Zoneid";
                }
                else if (Type == "Company")
                {
                    columnname = "Companyid";
                }
                string subquery = "";
                if (OrgId == "")
                {

                }
                else
                {
                    subquery = "and " + columnname + "='" + OrgId + "'";
                }
                if (columnname != "" || columnname == "")
                {
                    if (Pagename == "Group")
                    {
                        query = "Select Distinct Groupid,Groups,Status,Month,Year from tbl_group where Status='Active' "+ subquery + " and Month_Year='" + Month + "-" + Year + "'  group by Groupid,Groups,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Team")
                    {
                        query = "Select Distinct Teamid,Team,Status,Month,Year from tbl_team where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Branch")
                    {
                        query = "Select Distinct Branchid,Branch,Status,Month,Year from tbl_branch1 where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Division")
                    {
                        query = "Select Distinct Divisionid,Division,Status,Month,Year from tbl_division where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "'  group by Divisionid,Division,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Region")
                    {
                        query = "Select Distinct Regionid,Region,Status,Month,Year from tbl_region where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "'  group by Regionid,Region,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Zone")
                    {
                        query = "Select Distinct Zoneid,Zone,Status,Month,Year from tbl_zone where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "'  group by Zoneid,Zone,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }
                    else if (Pagename == "Company")
                    {
                        query = "Select Distinct Companyid,Company,Status,Month,Year from tbl_company where Status='Active' " + subquery + " and Month_Year='" + Month + "-" + Year + "'  group by Companyid,Company,Status,Month,Year";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            res = JsonConvert.SerializeObject(dt, Formatting.None);
                        }

                    }

                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllORG(string ORGfor,string company,string Month,string Year)
        {
            string res = "";
            string res1 = "";
            try
            {
                //res += "<option selected disabled value=''>Select One</option>";
                res1 = "<option value='";
                string subq = "";
                if (company!="" && company != null)
                {
                    subq = " and Companyid='" + company + "'";
                }
                res += "<option selected disabled value=''>Select one</option>";
                string query = "";
                if (ORGfor == "GPS")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active' "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Groupid,Groups,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Groupid"] + "'> " + dt.Rows[i]["Groups"] + " (Group)</option>";
                            res1 += dt.Rows[i]["Groupid"] + ",";
                        }
                    }

                }
                else if (ORGfor == "TPS")
                {
                    query = "Select Distinct Teamid,Team,Status from tbl_team where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Teamid,Team,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Teamid"] + "'> " + dt.Rows[i]["Team"] + "</option>";
                            res1 += dt.Rows[i]["Teamid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "BPS")
                {
                    query = "Select Distinct Branchid,Branch,Status from tbl_branch1 where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Branchid,Branch,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Branchid"] + "'> " + dt.Rows[i]["Branch"] + "</option>";
                            res1 += dt.Rows[i]["Branchid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "RPS")
                {
                    query = "Select Distinct Regionid,Region,Status from tbl_region where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Regionid,Region,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Regionid"] + "'> " + dt.Rows[i]["Region"] + "</option>";
                            res1 += dt.Rows[i]["Regionid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "DPS")
                {
                    query = "Select Distinct Divisionid,Division,Status from tbl_division where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Divisionid,Division,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Divisionid"] + "'> " + dt.Rows[i]["Division"] + "</option>";
                            res1 += dt.Rows[i]["Divisionid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "ZPS")
                {
                    query = "Select Distinct Zoneid,Zone,Status from tbl_zone where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Zoneid,Zone,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Zoneid"] + "'> " + dt.Rows[i]["Zone"] + "</option>";
                            res1 += dt.Rows[i]["Zoneid"] + ",";
                        }
                    }
                }
                else if (ORGfor == "CPS")
                {
                    query = "Select Distinct Companyid,Company,Status from tbl_company where Status='Active'  "+ subq + "  and Month_Year='" + Month + "-" + Year + "' group by Companyid,Company,Status";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            res += "<option value= '" + dt.Rows[i]["Companyid"] + "'> " + dt.Rows[i]["Company"] + "</option>";
                            res1 += dt.Rows[i]["Companyid"] + ",";

                        }
                    }
                }
                res1 = res1.Substring(0, res1.Length - 1);
                res1 += "'>Select All</option>";
                res += res1;
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Getorderdetails(string orderfor,int Month,int Year)
        {
            string res = "";
            try
            {
                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");

                res += "<option selected value=''>Select one</option>";
                string query = "";
                if (orderfor == "invoice")
                {
                    query = "Select Distinct Invoiceid from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Invoiceid"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Invoiceid"] + "'> " + dt.Rows[i]["Invoiceid"] + "</option>";
                            }
                        }
                    }

                }
                else if (orderfor == "order")
                {
                    query = "Select Distinct Order_id from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Order_id"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Order_id"] + "'> " + dt.Rows[i]["Order_id"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "customer")
                {
                    query = "Select Distinct Customer_id, Customer_name from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Customer_id"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Customer_id"] + "'> " + dt.Rows[i]["Customer_name"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "post")
                {
                    query = "Select Distinct Address from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Address"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Address"] + "'> " + dt.Rows[i]["Address"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "block")
                {
                    query = "Select Distinct Block from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Block"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Block"] + "'> " + dt.Rows[i]["Block"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "tahsil")
                {
                    query = "Select Distinct Tahsil from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Tahsil"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Tahsil"] + "'> " + dt.Rows[i]["Tahsil"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "district")
                {
                    query = "Select Distinct District from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["District"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["District"] + "'> " + dt.Rows[i]["District"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "state")
                {
                    query = "Select Distinct State from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["State"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["State"] + "'> " + dt.Rows[i]["State"] + "</option>";
                            }
                        }
                    }
                }
                else if (orderfor == "pincode")
                {
                    query = "Select Distinct Pincode from tbl_order where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'";
                    DataTable dt = db.GetAllRecord(query);
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            if (dt.Rows[i]["Pincode"] + "" != "")
                            {
                                res += "<option value= '" + dt.Rows[i]["Pincode"] + "'> " + dt.Rows[i]["Pincode"] + "</option>";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        //Close Employee info
        public JsonResult UpdateBranchofEmp(string id, string empid, string branchname, string branchcode)
        {
            string msg = "";
            try
            {
                string query = "Update tbl_login set Branchname='" + branchname + "',Branchcode='"+branchcode+ "',Emprowid='"+id+"' where Userid='" + empid + "' ";
                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins("tbl_login", "", query, "Success", "Password Update", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    string query1 = "Update tbl_registration set Branchname='" + branchname + "',Branchcode='"+branchcode+"' where Id='" + id + "' ";
                    if (db.InsertUpdateDelete(query1))
                    {
                        activitylog.Activitylogins("tbl_registration", "", query1, "Success", "Password Update", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        msg = "Branch Updated";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_registration", "", query1, "Failed", "Password Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        msg = "Branch Update Failed";
                    }
                }
                else
                {
                    activitylog.Activitylogins("tbl_login", "", query, "Failed", "Password Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    msg = "Branch Update Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg,JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult View(int id, string name)
        {
            List<regmastermodel> registrations = new List<regmastermodel>();
            try
            {
                ViewBag.nm = name;
                string query = "";
                if (name == "department")
                {
                    query = "SELECT * FROM tbl_registration LEFT JOIN tbl_department ON tbl_registration.Department_name = tbl_department.Departmant WHERE tbl_department.Id='" + id + "'";

                }
                else if (name == "designation")
                {
                    query = "SELECT * FROM tbl_registration LEFT JOIN tbl_designation ON tbl_registration.Designation = tbl_designation.Designation WHERE tbl_designation.Id='" + id + "'";

                }
                else if (name == "subdepartment")
                {
                    query = "SELECT * FROM tbl_registration LEFT JOIN tbl_subdepartment ON tbl_registration.Subdepartment = tbl_subdepartment.Subdepartmant WHERE tbl_subdepartment.Id='" + id + "'";

                }
                else if (name == "shift")
                {
                    query = "SELECT * FROM tbl_registration LEFT JOIN tbl_shift ON tbl_registration.Shiftname = tbl_shift.Shiftname WHERE tbl_shift.Id='" + id + "'";

                }
                activitylog.Activitylogins("tbl_registration,tbl_" + name + "", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];

                        regmastermodel registration = new regmastermodel
                        {
                            Employeeid = Convert.ToString(row["Employee_id"]),
                            Name = Convert.ToString(row["Name"]),
                            Department = Convert.ToString(row["Department_name"]),
                            Shift = Convert.ToString(row["Shifttiming"]),
                            Designation = Convert.ToString(row["Designation"]),
                            Status = Convert.ToString(row["Status"]),
                            Designation_order= Convert.ToString(row["Designation_order"]),
                        };

                        registrations.Add(registration);
                    }
                }
                else
                {
                    ViewBag.msg = "failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View(registrations);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Department()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Department(string hid, string depart, string status)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_department set Departmant='" + depart + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        db.InsertUpdateDelete("update tbl_registration set Department_name='" + depart + "' where Departmentid='" + hid + "'");
                        activitylog.Activitylogins("tbl_department", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_department", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_department where Departmant='" + depart + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Department Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_department(Departmant,Status,Logname,Logid,Date_time) values('" + depart + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_department", db.getmaxid("tbl_department").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_department", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult UploadForms()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult UploadForms(string hid, HttpPostedFileBase upload, string status,string frmtype,string filname)
        {
            string filepath = "";
            try
            {
                if (hid != "" && hid != null)
                {
                    if(upload!=null)
                    {
                        filepath = APIs.Forms(upload);
                        //string path = Path.Combine(Server.MapPath("~/Content/Forms"), upload.FileName);
                        //upload.SaveAs(path);
                        //filepath = "Content/Forms" + upload.FileName;
                    }
                    else
                    {
                        filepath = filname;
                    }
                    string query = "update tbl_forms set Formtype='" + frmtype + "',Formpath='" + filepath + "',Status='" + status + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_forms", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_forms", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_forms where Formtype='" + frmtype + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Form type Already Exist";
                    }
                    else
                    {
                        if (upload != null)
                        {
                            //string path = Path.Combine(Server.MapPath("~/Content/Forms"), upload.FileName);
                            //upload.SaveAs(path);
                            //filepath = "Content/Forms/" + upload.FileName;
                            filepath = APIs.Forms(upload);
                        }
                        string query = "insert into tbl_forms(Formtype,Formpath,Status,Logname,Logid,Datetime) values('" + frmtype + "','" + filepath + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_forms", db.getmaxid("tbl_forms").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_forms", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Branch()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Branch(string hid, string Statename, string Cityname, string status, string branchnm,string state,string city,string officetype,string yardrowid,string companyid,string Companyname,string Companyprefix,string Gstinnumber,string branchaddress,string billno,string Branchcontact)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            string yardid = "", yardname = "";
            try
            {
                string squery = "select * from tbl_godown where Id='" + yardrowid + "'";
                DataTable ydt = db.GetAllRecord(squery);
                if (ydt.Rows.Count > 0)
                {
                    yardid = ydt.Rows[0]["GodownId"] + "";
                    yardname = ydt.Rows[0]["GodownName"] + "";
                }
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_branch set State='" + Statename + "',City='" + Cityname + "',Stateid='" + state + "',Cityid='" + city + "',Branch='" + branchnm + "',Status='" + status + "',Officetype='"+officetype+"',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Yardid='" + yardid + "',Yardname='" + yardname + "',Yardrowid='" + yardrowid + "',Companyid='"+companyid+"' ,Companyname='"+Companyname+"' ,Companyprefix='"+Companyprefix+ "',Gstinnumber='" + Gstinnumber + "',Branchaddress='" + branchaddress + "',Billpre='" + billno + "',Branchcontact='"+ Branchcontact + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        DataTable hdsg = db.GetAllRecord("select * from tbl_branch where Id='" + hid + "'");
                        db.InsertUpdateDelete("update tbl_registration set Branchname='" + branchnm + "' where Branchcode='" + hdsg.Rows[0]["Branchid"] + "'");

                        activitylog.Activitylogins("tbl_branch", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_branch", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_branch where Branch='" + branchnm + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Branch Already Exist";
                    }
                    else
                    {
                        string branchcode = "B_" + random(5);
                        string query = "insert into tbl_branch(Branchid,State,City,Branch,Status,Logname,Logid,Datetime,Stateid,Cityid,Officetype,Yardid,Yardname,Yardrowid,[Companyid],[Companyname],[Companyprefix],Gstinnumber,Branchaddress,Billpre,Branchcontact) values('" + branchcode + "','" + Statename + "','" + Cityname + "','" + branchnm + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + state + "','" + city + "','" + officetype + "','" + yardid + "','" + yardname + "','" + yardrowid + "','" + companyid + "' ,'" + Companyname + "' ,'" + Companyprefix + "','" + Gstinnumber + "','" + branchaddress + "','" + billno + "','"+ Branchcontact + "')";
                        
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_branch", db.getmaxid("tbl_branch").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_branch", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri; 
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Weekoff()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Weekoff(string hid, string weekoff, string status)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_weekoff set Weekday='" + weekoff + "',Status='" + status + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_weekoff", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_weekoff", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_weekoff where Weekday='" + weekoff + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Weekday Already Added";
                    }
                    else
                    {
                        string query = "insert into tbl_weekoff(Weekday,Status,Logname,Logid,Datetime) values('" + weekoff + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_weekoff", db.getmaxid("tbl_weekoff").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_weekoff", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Designation()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Designation(string hid, string desig, string status, string department, string departid,string designation_order,string designation_short)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_designation set Designation='" + desig + "', Status='" + status + "',Department='" + department + "', Departmentid='" + departid + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Designation_order='" + designation_order + "',Designation_shortname='"+ designation_short + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        db.InsertUpdateDelete("update tbl_registration set Designation='" + desig + "',designation_order='" + designation_order + "' where designationid='" + hid + "'");
                        activitylog.Activitylogins("tbl_designation", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_designation", hid, query, "Failed", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Update Error";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_designation where Designation='" + desig + "' and Departmentid='" + departid + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Designation Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_designation(Designation,Status,Logname,Logid,Date_time,Designation_order,Department,Departmentid,Designation_shortname) values('" + desig + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + designation_order + "','" + department + "','" + departid + "','"+ designation_short + "')";
                        
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_designation", db.getmaxid("tbl_designation").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_designation", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult HRAdmin()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else  
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult HRAdmin(string hid,FormCollection form)
        {
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_login set Username='" + form["uname"] + "',Emailid='" + form["mailuid"] + "',Mobile='" + form["contact"] + "',Branchname='" + form["branchname"] + "',Branchcode='" + form["branchcode"] + "', Status='" + form["status"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_login", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_login", hid, query, "Failed", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Update Error";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_login where Emailid='" + form["mailuid"] + "' or Mobile='" + form["contact"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Email or Mobile Already Exist";
                    }
                    else
                    {
                        string hrcode = "H_"+random(5);
                        string pass = random(5);
                        string query = "insert into tbl_login(Username,Userid,Emailid,Mobile,Password,Type,Status,Datetime,OTP_Time,Branchname,Branchcode) values('" + form["uname"] + "','" + hrcode + "','" + form["mailuid"] + "','" + form["contact"] + "','" + pass + "','" +  form["mtype"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("HH:mm:ss") + "','" + form["branchname"] + "','" + form["branchcode"] + "')";
                        
                        if (db.InsertUpdateDelete(query))
                        {
                            //Messaging.SendMailEmployee("", form["mailuid"], "Registration Successfully", bodytext);

                            string[] replacementValues = { "GROWFAST ORGANIC DIMOND" };
                            //Messaging.SendSMS(form["contact"], replacementValues, "Thank You Message for Joining", form["uname"]);
                            //Messaging.SendWhatsappSMSNew(form["contact"], replacementValues, "Thank You Message for Joining", form["uname"] + "", Session["suid"] + "", Session["suname"] + "", "");

                            activitylog.Activitylogins("tbl_login", db.getmaxid("tbl_designation").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_login", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }


        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Shifts()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Shifts(string hid, string shiftname, string starttime, string endtime, string status)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_shift set Shiftname='" + shiftname + "',Starttime='" + starttime + "',Endtime='" + endtime + "',Status='" + status + "',Logname='" + suname + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        db.InsertUpdateDelete("update tbl_registration set Shifttiming='" + shiftname + "(" + starttime + "-" + endtime + ")',Shiftname='" + shiftname + "',Shiftstarttime='" + starttime + "',Shiftendtime='" + endtime + "' where Shiftid='" + hid + "'");

                        activitylog.Activitylogins("tbl_shift", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_shift", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_shift where Shiftname='" + shiftname + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Designation Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_shift(Shiftname,Starttime,Endtime,Status,Logname,Logid,Datetime) values('" + shiftname + "','" + starttime + "','" + endtime + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_shift", db.getmaxid("tbl_shift").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_shift", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult UserType()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult UserType(string hid, string usertype, string status)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_usertype set Usertype='" + usertype + "',Status='" + status + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_usertype", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_usertype", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_usertype where Usertype='" + usertype + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Usertype Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_usertype(Usertype,Status,Logname,Logid,Datetime) values('" + usertype + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_usertype", db.getmaxid("tbl_usertype").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_usertype", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Holiday()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Holiday(string hid, string holiday, string status, string date)
        {
            try
            {
                string suid = Session["suid"] + "";
                string suname = Session["suname"] + "";
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_Holiday set Holiday='" + holiday + "',Date='" + date + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_Holiday", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Holiday", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_Holiday where Holiday='" + holiday + "' and CONVERT(date, Date)='" + date + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Holiday Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_Holiday(Holiday,Date,Status,Logname,Logid,Date_time) values('" + holiday + "','" + date + "','Active','" + suname + "','" + suid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_Holiday", db.getmaxid("tbl_Holiday").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_Holiday", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult PaymentMethod()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult PaymentMethod(string hid, HttpPostedFileBase upload, string status, string type, string upiid, string filname)
        {
            string filepath = "";
            string upiqr = "";
            try
            {
                if (hid != "" && hid != null)
                {
                    if (type == "UPI")
                    {
                        upiqr = upiid;
                    }
                    else
                    {
                        if (upload != null)
                        {
                            string path = Path.Combine(Server.MapPath("~/Content/PaymentQR"), upload.FileName);
                            upload.SaveAs(path);
                            filepath = "Content/PaymentQR" + upload.FileName;
                            upiqr = filepath;
                        }
                        else
                        {
                            filepath = filname;
                            upiqr = filepath;
                        }
                    }
                    
                    string query = "update tbl_paymentmethod set Methodtype='" + type + "',UPIQR='" + upiqr + "',Status='" + status + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_paymentmethod", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_paymentmethod", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_paymentmethod where Methodtype='UPI' and UPIQR='" + upiqr + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Payment Id Already Exist";
                    }
                    else
                    {
                        if (type == "UPI")
                        {
                            upiqr = upiid;
                        }
                        else
                        {
                            if (upload != null)
                            {
                                string path = Path.Combine(Server.MapPath("~/Content/PaymentQR"), upload.FileName);
                                upload.SaveAs(path);
                                filepath = "Content/PaymentQR/" + upload.FileName;
                                upiqr = filepath;
                            }
                        }
                        
                        string query = "insert into tbl_paymentmethod(Methodtype,UPIQR,Status,Logname,Logid,Datetime) values('" + type + "','" + upiqr + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_paymentmethod", db.getmaxid("tbl_forms").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_paymentmethod", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }


        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult DLT()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult DLT(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl="growfastgroups.com";
            try
            {
                string squery = "select * from tbl_DLTdetails where PEID='" + form["peid"] + "'";
                activitylog.Activitylogins("tbl_DLTdetails", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["peid"] + " PEID -- Already Axist";
                }
                else
                {

                    string query = "insert into tbl_DLTdetails(PEID,Companyname,Companymobile,Companymail,Companyurl,Renewdate,Status,Datetime,logname,logid) values('" + form["peid"] + "','" + compname + "','" + compcont + "','" + compmail + "','" + compnurl + "','" + form["renewdate"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_DLTdetails", db.getmaxid("tbl_DLTdetails") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["PEID"] + " DLT -- Added";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_DLTdetails", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["PEID"] + " DLT -- failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult DLTHeader()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult DLTHeader(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_DLTHeader where Header_id='" + form["headerid"] + "'";
                activitylog.Activitylogins("tbl_DLTHeader", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["headerid"] + " Header_id -- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_DLTHeader(PEID,Header_id,Companyname,Companymobile,Companymail,Companyurl,Status,Datetime,logname,logid) values('" + form["peid"] + "','" + form["headerid"] + "','" + compname + "','" + compcont + "','" + compmail + "','" + compnurl + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_DLTHeader", db.getmaxid("tbl_DLTHeader") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["headerid"] + " Header_id -- Added";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_DLTHeader", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["headerid"] + " Header_id -- failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult DLTTemplate()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult DLTTemplate(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_DLTTemplate where Templateid='" + form["tempid"] + "' or Template_name='" + form["tempname"] + "'";
                activitylog.Activitylogins("tbl_DLTTemplate", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["tempname"] + " Template_name or " + form["tempid"] + " Template Id-- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_DLTTemplate(PEID,Header_id,Templateid,Template_name,Template_text,Companyname,Companymobile,Companymail,Companyurl,Status,Datetime,logname,logid) values('" + form["peid"] + "','" + form["headerid"] + "','" + form["tempid"] + "','" + form["tempname"] + "','" + form["temptext"].Replace("'", "`").Replace("\\", "``") + "','" + compname + "','" + compcont+ "','" + compmail + "','" + compnurl + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_DLTTemplate", db.getmaxid("tbl_DLTTemplate") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["tempname"] + " Template -- Added";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_DLTTemplate", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = form["tempname"] + " Template -- failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SMSAPI()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult SMSAPI(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_sms_api where Sms_userid='" + form["smsuid"] + "'";
                activitylog.Activitylogins("tbl_sms_api", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["smsuid"] + " Sms_userid -- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_sms_api(Companyname,Sms_userid,Sms_password,Apikey,Status,Datetime,logname,logid) values('" + compname + "','" + form["smsuid"] + "','" + form["smspass"] + "','" + form["apikey"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_sms_api", db.getmaxid("tbl_sms_api") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Api Registered";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_sms_api", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Registration Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult FirebaseAPI()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult FirebaseAPI(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_firebase_api where Serverkey='" + form["serverkey"] + "'";
                activitylog.Activitylogins("tbl_firebase_api", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["serverkey"] + " Serverkey -- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_firebase_api(Companyname,Serverkey,Apikey,Status,Datetime,logname,logid) values('" + compname + "','" + form["serverkey"] + "','" + form["apikey"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_firebase_api", db.getmaxid("tbl_firebase_api") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Api Registered";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_firebase_api", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Registration Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult WhatsappAPI()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();

        }
        [HttpPost]
        public ActionResult WhatsappAPI(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_whatsapp_api where Authenticationkey='" + form["instanceid"] + "'";
                activitylog.Activitylogins("tbl_whatsapp_api", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["instanceid"] + " Instance Id -- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_whatsapp_api(Companyname,Authenticationkey,Apikey,Status,Datetime,logname,logid) values('" + compname + "','" + form["instanceid"] + "','" + form["apikey"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    db.InsertUpdateDelete("update tbl_whatsapp_api set Status='Inactive'");
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_whatsapp_api", db.getmaxid("tbl_whatsapp_api") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Api Registered";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_whatsapp_api", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Registration Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult EmailAPI()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult EmailAPI(FormCollection form)
        {
            string sacode = Session["suid"] + "";
            string saname = Session["suname"] + "";
            string compname = "GROWFAST ORGANIC DIAMOND";
            string compcont = "9956292345";
            string compmail = "dileep.growfast@gmail.com";
            string compnurl = "growfastgroups.com";
            try
            {
                string squery = "select * from tbl_email_api where Userid='" + form["mailuid"] + "'";
                activitylog.Activitylogins("tbl_email_api", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    ViewBag.msg = form["mailuid"] + " Userid -- Already Axist";
                }
                else
                {
                    string query = "insert into tbl_email_api(Companyname,Hostname,Userid,Password,Portno,Status,Datetime,logname,logid) values('" + compname + "','" + form["hostnm"] + "','" + form["mailuid"] + "','" + form["mailpass"] + "','" + form["portnum"] + "','Active','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + saname + "','" + sacode + "')";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_email_api", db.getmaxid("tbl_email_api") + "", query, "Success", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Api Registered";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_email_api", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Registration Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        
        public JsonResult GetDltPEID()
        {
            string res = "";
            try
            {
                string query = "select * from tbl_DLTdetails";
                DataTable dt = db.GetAllRecord(query);
                res += "<option selected disabled value=''>Select one</option>";
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        res += "<option value= '" + dt.Rows[i]["PEID"] + "'> " + dt.Rows[i]["PEID"] + "</option>";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetDltHeader(string Peid)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_DLTHeader where PEID='" + Peid + "'";
                DataTable dt = db.GetAllRecord(query);
                res += "<option selected disabled value=''>Select one</option>";
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        res += "<option value= '" + dt.Rows[i]["Header_id"] + "'> " + dt.Rows[i]["Header_id"] + "</option>";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ChangePassword()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ChangePassword(string opass, string npass, string cnpass, string emp)
        {
            try
            {
                if (emp == "Self")
                {
                    if (npass == opass)
                    {
                        ViewBag.msg = "New Password and Old Password Can not be Same.";
                    }
                    else if (npass != cnpass)
                    {
                        ViewBag.msg = "New Password and Confirm Password Not matched.";
                    }
                    else
                    {
                        string query = "Update tbl_login set Password='" + npass + "' where Emailid='" + Session["smail"].ToString() + "' ";


                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_login", db.getrowid("select Id from tbl_login where Emailid='" + Session["smail"].ToString() + "'").ToString(), query, "Success", "Password Update", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Password Updated";
                            Logout();
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_login", db.getrowid("select Id from tbl_login where Emailid='" + Session["smail"].ToString() + "'").ToString(), query, "Failed", "Password Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Password Update Failed";
                        }

                    }
                }
                else
                {
                    if (npass == opass)
                    {
                        ViewBag.msg = "New Password and Old Password Can not be Same.";
                    }
                    else if (npass != cnpass)
                    {
                        ViewBag.msg = "New Password and Confirm Password Not matched.";
                    }
                    else
                    {
                        string query = "Update tbl_login set Password='" + npass + "' where Userid='" + emp + "' ";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_login", "", query, "Success", "Password Update", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            //ViewBag.msg = "Password Updated";

                            string query1 = "Update tbl_registration set pass='" + npass + "' where Employee_id='" + emp + "' ";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_registration", "", query1, "Success", "Password Update", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                // ViewBag.msg = "Password Updated";

                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_registration", "", query1, "Failed", "Password Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                ViewBag.msg = "Password Update Failed";
                            }
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_login", "", query, "Failed", "Password Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Password Update Failed";
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateShift(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_shift where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_shift", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Shiftname"] + "";
                    string starttime = dt.Rows[0]["Starttime"] + "";
                    string endtime = dt.Rows[0]["Endtime"] + "";
                    //string notifyalert = dt.Rows[0]["Notifyalert"] + "";
                    //string missedalert = dt.Rows[0]["Missedalert"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[7] { id, name, starttime, endtime, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetLoanDetail(string Reqid,string Status)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_loan where Reqid='" + Reqid + "' and Status='"+ Status + "'";
                //activitylog.Activitylogins("tbl_department", Reqid, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                //activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Employeeid = dt.Rows[0]["Employeeid"] + "";
                    string Reqidq = dt.Rows[0]["Reqid"] + "";
                    string Name = dt.Rows[0]["Name"] + "";
                    string Department = dt.Rows[0]["Department"] + "";
                    string Designation = dt.Rows[0]["Designation"] + "";
                    string Loanamount = dt.Rows[0]["Loanamount"] + "";
                    string Reason = dt.Rows[0]["Reason"] + "";

                    string Approvedbyname = dt.Rows[0]["Approvedbyname"] + "";
                    string Approvedbyid = dt.Rows[0]["Approvedbyid"] + "";
                    string Remark = dt.Rows[0]["Remark"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string Logid = dt.Rows[0]["Logid"] + "";
                    string Logname = dt.Rows[0]["Logname"] + "";
                    string Datetime = dt.Rows[0]["Datetime"] + "";
                    string Downloaddocument = dt.Rows[0]["Downloaddocument"] + "";
                    string Uploaddocument = dt.Rows[0]["Uploaddocument"] + "";
                    string Branchname = dt.Rows[0]["Branchname"] + "";
                    string Branchcode = dt.Rows[0]["Branchcode"] + "";

                    res = new string[11] { id, Reqidq, Name, Department, Designation, Loanamount, Reason, Employeeid, Branchname, Branchcode, Uploaddocument };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAdvanceDetail(string Reqid, string Status)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_advance where Reqid='" + Reqid + "' and Status='" + Status + "'";
                //activitylog.Activitylogins("tbl_department", Reqid, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                //activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Employeeid = dt.Rows[0]["Employeeid"] + "";
                    string Reqidq = dt.Rows[0]["Reqid"] + "";
                    string Name = dt.Rows[0]["Name"] + "";
                    string Department = dt.Rows[0]["Department"] + "";
                    string Designation = dt.Rows[0]["Designation"] + "";
                    string Advanceamount = dt.Rows[0]["Advanceamount"] + "";
                    string Reason = dt.Rows[0]["Reason"] + "";

                    string Approvedbyname = dt.Rows[0]["Approvedbyname"] + "";
                    string Approvedbyid = dt.Rows[0]["Approvedbyid"] + "";
                    string Remark = dt.Rows[0]["Remark"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string Logid = dt.Rows[0]["Logid"] + "";
                    string Logname = dt.Rows[0]["Logname"] + "";
                    string Datetime = dt.Rows[0]["Datetime"] + "";
                    string Downloaddocument = dt.Rows[0]["Downloaddocument"] + "";
                    string Uploaddocument = dt.Rows[0]["Uploaddocument"] + "";
                    string Branchname = dt.Rows[0]["Branchname"] + "";
                    string Branchcode = dt.Rows[0]["Branchcode"] + "";

                    res = new string[11] { id, Reqidq, Name, Department, Designation, Advanceamount, Reason, Employeeid, Branchname, Branchcode, Uploaddocument };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateDepartment(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_department where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_department", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Departmant"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[5] { id, name, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateForms(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_forms where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_forms", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Formtype = dt.Rows[0]["Formtype"] + "";
                    string Formpath = dt.Rows[0]["Formpath"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[6] { id, Formtype,Formpath, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult Updatepaymentmethod(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_paymentmethod where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_paymentmethod", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Methodtype = dt.Rows[0]["Methodtype"] + "";
                    string UPIQR = dt.Rows[0]["UPIQR"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[6] { id, Methodtype, UPIQR, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetStatedetail(string State)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_state where Statecode='" + State + "'";
                activitylog.Activitylogins("tbl_state", State, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Statecode = dt.Rows[0]["Statecode"] + "";
                    string Statename = dt.Rows[0]["Statename"] + "";

                    res = new string[2] { Statecode, Statename };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetCitydetail(string City)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_city where Id='" + City + "'";
                activitylog.Activitylogins("tbl_city", City, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string Citycode = dt.Rows[0]["Id"] + "";
                    string Cityname = dt.Rows[0]["Cityname"] + "";

                    res = new string[2] { Citycode, Cityname };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateBranch(string Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_branch where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_branch", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Officetype = dt.Rows[0]["Officetype"] + "";
                    string name = dt.Rows[0]["Branch"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    string State = dt.Rows[0]["State"] + "";
                    string City = dt.Rows[0]["City"] + "";
                    string Cityid = dt.Rows[0]["Cityid"] + "";
                    string Stateid = dt.Rows[0]["Stateid"] + "";
                    string Branchid = dt.Rows[0]["Branchid"] + "";
                    string Yardrowid = dt.Rows[0]["Yardrowid"] + "";


                    string Companyname = dt.Rows[0]["Companyname"] + "";
                    string Companyid = dt.Rows[0]["Companyid"] + "";
                    string Companyprefix = dt.Rows[0]["Companyprefix"] + "";

                    string Gstinnumber = dt.Rows[0]["Gstinnumber"] + "";
                    string Branchaddress = dt.Rows[0]["Branchaddress"] + "";
                    string Billpre = dt.Rows[0]["Billpre"] + "";
                    string Branchcontact = dt.Rows[0]["Branchcontact"] + "";
                    res = new string[19] { id, name, status, companyname, companyid,State,City,Cityid,Stateid, Branchid, Yardrowid, Officetype, Gstinnumber, Branchaddress, Billpre, Branchcontact, Companyname, Companyprefix, Companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetBranch(string Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_branch where Branchid='" + Up + "'";
                activitylog.Activitylogins("tbl_branch", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Branch"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    string State = dt.Rows[0]["State"] + "";
                    string City = dt.Rows[0]["City"] + "";
                    string Cityid = dt.Rows[0]["Cityid"] + "";
                    string Stateid = dt.Rows[0]["Stateid"] + "";
                    string Branchid = dt.Rows[0]["Branchid"] + "";

                    res = new string[10] { id, name, status, companyname, companyid, State, City, Cityid, Stateid, Branchid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateWeekOff(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_weekoff where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_weekoff", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string day = dt.Rows[0]["Weekday"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[5] { id, day, status, companyname, companyid };

                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateSubDepartment(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_subdepartment where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_subdepartment", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string subdname = dt.Rows[0]["Subdepartmant"] + "";
                    string dname = dt.Rows[0]["Departmant"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[6] { id, dname, subdname, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateHRAdmin(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_login where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_login", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Username = dt.Rows[0]["Username"] + "";
                    string Userid = dt.Rows[0]["Userid"] + "";
                    string Email = dt.Rows[0]["Emailid"] + "";
                    string Mobile = dt.Rows[0]["Mobile"] + "";
                    string Type = dt.Rows[0]["Type"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Branchname = dt.Rows[0]["Branchname"] + "";
                    string Branchcode = dt.Rows[0]["Branchcode"] + "";

                    res = new string[9] { id, Username, Userid, Email, Mobile, Type, Status, Branchname, Branchcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateDesignation(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_designation where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_designation", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Designation"] + "";
                    //string orderno = dt.Rows[0]["Ordernumber"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string departmentid = dt.Rows[0]["Departmentid"] + "";
                    string department = dt.Rows[0]["Department"] + "";
                    string Designation_order = dt.Rows[0]["Designation_order"] + "";
                    string Designation_shortname = dt.Rows[0]["Designation_shortname"] + "";


                    res = new string[9] { id, name, status, companyname, companyid, departmentid, department, Designation_order, Designation_shortname };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateCustomer(int Up)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_customer where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_customer", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateUserType(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_usertype where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_usertype", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Usertype"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[5] { id, name, status, companyname, companyid };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateHolidayList(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_Holiday where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_Holiday", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string holiday = dt.Rows[0]["Holiday"] + "";
                    //DateTime fdate = DateTime.ParseExact(dt.Rows[0]["Date"] + "", "d/M/yyyy", CultureInfo.InvariantCulture);
                    string fromDate = dt.Rows[0]["Date"]+"";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[6] { id, holiday, fromDate, status, companyname, companyid };

                }
            }

            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetDesignation(string Depart)
        {
            string res = "";
            try
            {
                res = "<option selected value=''>Select one</option>";
                string query = "select * from tbl_designation where Department='" + Depart + "' and Status='Active'";
                activitylog.Activitylogins("tbl_designation", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Status"] + "" == "Active")
                        {
                            res += "<option value='" + dt.Rows[i]["Designation"] + "'>" + dt.Rows[i]["Designation"] + "</option>";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetEmployeerep(string Desig,string Depart)
        {
            string res = "";
            try
            {

                res = "<option selected value=''>Select one</option>";
                string query = "select * from tbl_registration where Status='Approved'";
                if (Depart!="" && Depart != null)
                {
                    query += " and Department_name='" + Depart + "'";
                }
                if (Desig != "" && Desig != null)
                {
                    query += " and Designation='" + Desig + "'";
                }

                activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Status"] + "" == "Approved")
                        {
                            res += "<option value='" + dt.Rows[i]["Employee_id"] + "'>" + dt.Rows[i]["Name"] + " (" + dt.Rows[i]["Branchname"] + ")</option>";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Logout()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {
                activitylog.Activitylogins("", "", "", "Success", "Logout Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                Session.Clear();
                Session.Abandon();
                Session.RemoveAll();
                Response.Redirect("/Home/Login");
            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }



        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult EMonthsummary()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult EDaysummary()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SMonthsummary()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SDaysummary()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult MonthlyPerformance()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SalaryReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ExpenceReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProSalesReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetMonthsummary(int Month, int Year, string Managernm, string Depart, string Desig, string Empid)
        {
            string res = "", tbldata = "", tbl = "", subquery = " Where tbl_registration.Status='Approved'", regsubquery = ""; int holidaycount = 0;
            StringBuilder htmlTable = new StringBuilder();
            try
            {
                string holidayquery = "select * from tbl_Holiday where MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_Holiday", "", holidayquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable holidaydt = db.GetAllRecord(holidayquery);
                activitylog.Activitylogupd("Success", "");
                if (holidaydt.Rows.Count > 0)
                {
                    holidaycount = holidaydt.Rows.Count;
                }
                else
                {
                    holidaycount = 0;
                }
                int count = 1;
                for (int j = 1; j <= DateTime.DaysInMonth(Year, Month); j++)
                {
                    count++;
                }
                int addday = count - 2;
                int span = count / 2;
                int span2 = span + 1;
                DateTime startDate = new DateTime(Year, Month, 1);
                DateTime endDate = startDate.AddDays(addday);
                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    if (date != null)
                    {
                        regsubquery += "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchin_time, '') ELSE NULL END) AS PI" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchout_time,'' ) ELSE NULL END) AS PO" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Working_hours,'' ) ELSE NULL END) AS WH" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_leave.From_date) = " + date.Day + " THEN ISNULL(tbl_leave.Total_day,0 ) ELSE NULL END) AS Totalleave" + date.Day + ",";

                    }

                }
                regsubquery = regsubquery.Substring(0, regsubquery.Length - 1);

                string empquery = "", desigquery = "", departquery = "", managerquery = "";
                if (Managernm != null && Managernm != "")
                {
                    string[] managerArray = Managernm.Split(',');
                    foreach (string id in managerArray)
                    {
                        managerquery += " tbl_attendance.Managercode='" + id + "' or";
                    }
                    managerquery = managerquery.Substring(0, managerquery.Length - 3);
                    subquery += " and (" + managerquery + ")";
                }
                if (Empid != null && Empid != "")
                {
                    string[] empArray = Empid.Split(',');
                    foreach (string id in empArray)
                    {
                        empquery += " tbl_attendance.Employeeid='" + id + "' or";
                    }
                    empquery = empquery.Substring(0, empquery.Length - 3);
                    subquery += " and (" + empquery + ")";
                }
                if (Desig != null && Desig != "")
                {
                    string[] desigArray = Desig.Split(',');
                    foreach (string designame in desigArray)
                    {
                        desigquery += " tbl_registration.Designation='" + designame + "' or";
                    }
                    desigquery = desigquery.Substring(0, desigquery.Length - 3);
                    subquery += " and (" + desigquery + ")";
                }
                if (Depart != null && Depart != "")
                {
                    string[] departArray = Depart.Split(',');
                    foreach (string departnm in departArray)
                    {
                        departquery += " tbl_registration.Department_name='" + departnm + "' or";
                    }
                    departquery = departquery.Substring(0, departquery.Length - 3);
                    subquery += " and (" + departquery + ")";
                }
                if (subquery.EndsWith(" and"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 4);
                }
                //string squery = "select * from tbl_attendance where MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "' and ("+subquery+")";
                string attquery = "SELECT tbl_registration.Name,tbl_registration.Employee_id,tbl_registration.Employee_type,tbl_registration.Department_name,tbl_registration.Designation,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime," +
     regsubquery + " FROM tbl_registration LEFT JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND MONTH(tbl_attendance.Date) = " + Month + " LEFT JOIN tbl_leave ON tbl_registration.Employee_id = tbl_leave.Employeeid AND MONTH(tbl_attendance.Date) = " + Month + " " + subquery + " GROUP BY  tbl_registration.Name,tbl_registration.Employee_id,tbl_registration.Employee_type,tbl_registration.Department_name,tbl_registration.Designation,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime";
                activitylog.Activitylogins("tbl_registration,tbl_attendance", "", attquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                if (attdt.Rows.Count > 0)
                {
                    htmlTable.Append("<tbody>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>ID</th>");
                    htmlTable.Append("<th>Employee Id</th>");
                    htmlTable.Append("<th>Name</th>");
                    htmlTable.Append("<th>Department</th>");
                    htmlTable.Append("<th>Designation</th>");
                    //htmlTable.Append("<th>Type</th>");
                    htmlTable.Append("<th>Total Day</th>");
                    htmlTable.Append("<th>Present</th>");
                    htmlTable.Append("<th>Holiday</th>");
                    htmlTable.Append("<th>Absent</th>");
                    htmlTable.Append("<th>Week Off</th>");
                    htmlTable.Append("<th>Leaves</th>");
                    htmlTable.Append("<th>Half Day</th>");
                    htmlTable.Append("<th>Total Paid Day</th>");
                    htmlTable.Append("<th>Total Late Arrival</th>");
                    htmlTable.Append("<th>Early Departure</th>");
                    htmlTable.Append("</tr>");
                    for (int i = 0; i < attdt.Rows.Count; i++)
                    {
                        int present = 0, absent = 0, leavecount = 0, latearrival = 0, earlydeparture = 0, halfday = 0, totalday = 0, weekofcount = 0, paiddaycount;
                        int j = i + 1;

                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            totalday++;

                        }
                        DataTable weekoffdt = db.GetAllRecord("select * from tbl_weekoff where Status='Active'");
                        if (weekoffdt.Rows.Count > 0)
                        {
                            for (int wo = 0; wo < weekoffdt.Rows.Count; wo++)
                            {
                                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                                {
                                    if (date.ToString("dddd") == weekoffdt.Rows[wo]["Weekday"] + "")
                                    {
                                        weekofcount++;
                                    }

                                }
                            }

                        }
                        else
                        {
                            weekofcount = 0;
                        }

                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                            {
                                if (DateTime.Parse(attdt.Rows[i]["PI" + date.Day + ""] + "") > DateTime.Parse(attdt.Rows[i]["Shiftstarttime"] + ""))
                                {
                                    latearrival++;
                                }

                            }

                        }
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                if (DateTime.Parse(attdt.Rows[i]["PO" + date.Day + ""] + "") < DateTime.Parse(attdt.Rows[i]["Shiftendtime"] + ""))
                                {
                                    earlydeparture++;
                                }

                            }

                        }
                        TimeSpan dur = DateTime.Parse(attdt.Rows[i]["Shiftendtime"] + "") - DateTime.Parse(attdt.Rows[i]["Shiftstarttime"] + "");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["WH" + date.Day + ""] + "" != "" && attdt.Rows[i]["WH" + date.Day + ""] + "" != null)
                            {
                                if (TimeSpan.Parse(attdt.Rows[i]["WH" + date.Day + ""] + "") < dur)
                                {
                                    halfday++;
                                }

                            }

                        }
                        //for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        //{
                        //    if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null && attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                        //    {
                        //        present++;
                        //    }

                        //}
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null && attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                present++;
                            }

                        }
                        //for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        //{
                        //    if (attdt.Rows[i]["Totalleave" + date.Day + ""] + "" != "" && attdt.Rows[i]["Totalleave" + date.Day + ""] + "" != null )
                        //    {
                        //        leavecount += Convert.ToInt32(attdt.Rows[i]["Totalleave" + date.Day + ""]);
                        //    }

                        //}
                        absent = totalday - (present + holidaycount + leavecount + weekofcount);
                        paiddaycount = present + holidaycount + weekofcount;
                        //halfday = latearrival + earlydeparture;
                        htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                        htmlTable.Append("<td>" + j + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Employee_id"] + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Name"] + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Department_name"] + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Designation"] + "</td>");
                        //htmlTable.Append("<td>" + attdt.Rows[i]["Employee_type"] + "</td>");
                        htmlTable.Append("<td>" + totalday + "</td>");
                        htmlTable.Append("<td>" + present + "</td>");
                        htmlTable.Append("<td>" + holidaycount + "</td>");
                        htmlTable.Append("<td>" + absent + "</td>");
                        htmlTable.Append("<td>" + weekofcount + "</td>");
                        htmlTable.Append("<td>" + leavecount + "</td>");
                        htmlTable.Append("<td>" + halfday + "</td>");
                        htmlTable.Append("<td>" + paiddaycount + "</td>");
                        htmlTable.Append("<td>" + latearrival + "</td>");
                        htmlTable.Append("<td>" + earlydeparture + "</td>");
                        htmlTable.Append("</tr>");



                    }
                    htmlTable.Append("</tbody>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }


                //DataTable dt = db.GetAllRecord(squery);
                string json = JsonConvert.SerializeObject(attdt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetDaysummary(int Month, int Year, string Managernm, string Depart, string Desig, string Empid)
        {
            string res = "", tbldata = "", tbl = "", subquery = " Where tbl_registration.Status='Approved' ", regsubquery = "";
            StringBuilder htmlTable = new StringBuilder();
            try
            {
                int count = 1;
                for (int j = 1; j <= DateTime.DaysInMonth(Year, Month); j++)
                {
                    count++;
                }
                int addday = count - 2;
                int span = count / 2;
                int span2 = span + 1;
                DateTime startDate = new DateTime(Year, Month, 1);
                DateTime endDate = startDate.AddDays(addday);
                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    if (date != null)
                    {
                        regsubquery += "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchin_time, '') ELSE NULL END) AS PI" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchout_time,'' ) ELSE NULL END) AS PO" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Overtime,'' ) ELSE NULL END) AS OT" + date.Day + ",";

                    }

                }
                regsubquery = regsubquery.Substring(0, regsubquery.Length - 1);

                string empquery = "", desigquery = "", departquery = "", managerquery = "";
                if (Managernm != null && Managernm != "")
                {
                    string[] managerArray = Managernm.Split(',');
                    foreach (string id in managerArray)
                    {
                        managerquery += " tbl_attendance.Managercode='" + id + "' or";
                    }
                    managerquery = managerquery.Substring(0, managerquery.Length - 3);
                    subquery += " and (" + managerquery + ")";
                }
                if (Empid != null && Empid != "")
                {
                    string[] empArray = Empid.Split(',');
                    foreach (string id in empArray)
                    {
                        empquery += " tbl_attendance.Employeeid='" + id + "' or";
                    }
                    empquery = empquery.Substring(0, empquery.Length - 3);
                    subquery += " and (" + empquery + ")";
                }
                if (Desig != null && Desig != "")
                {
                    string[] desigArray = Desig.Split(',');
                    foreach (string designame in desigArray)
                    {
                        desigquery += " tbl_registration.Designation='" + designame + "' or";
                    }
                    desigquery = desigquery.Substring(0, desigquery.Length - 3);
                    subquery += " and (" + desigquery + ")";
                }
                if (Depart != null && Depart != "")
                {
                    string[] departArray = Depart.Split(',');
                    foreach (string departnm in departArray)
                    {
                        departquery += " tbl_registration.Department_name='" + departnm + "' or";
                    }
                    departquery = departquery.Substring(0, departquery.Length - 3);
                    subquery += " and (" + departquery + ")";
                }
                if (subquery.EndsWith(" and"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 4);
                }
                //string squery = "select * from tbl_attendance where MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'  and ("+subquery+")";
                string attquery = "SELECT tbl_registration.Name,tbl_registration.Department_name,tbl_registration.Designation,tbl_registration.Employee_Type,tbl_registration.Employee_id," +
     regsubquery + " FROM tbl_registration LEFT JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND MONTH(tbl_attendance.Date) = " + Month + " " + subquery + " GROUP BY tbl_registration.Name,tbl_registration.Department_name,tbl_registration.Designation,tbl_registration.Employee_Type,tbl_registration.Employee_id";
                activitylog.Activitylogins("tbl_registration,tbl_attendance", "", attquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                //string monthName = new DateTime(Year, Month, 1).ToString("MMMM");
                //int spancount = count + 7;
                if (attdt.Rows.Count > 0)
                {
                    htmlTable.Append("<tbody>");
                    //htmlTable.Append("<tr><td colspan='" + spancount + "' class='text-center fs-6 hrow'>reheh Daily Performance Report " + monthName + " - " + Year + "</th></tr>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Employee Code</th>");
                    //htmlTable.Append("<th>Device Person Id</th>");
                    htmlTable.Append("<th>Name</th>");
                    htmlTable.Append("<th>Department</th>");
                    htmlTable.Append("<th>Designation</th>");
                    //htmlTable.Append("<th>Type</th>");
                    for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                    {
                        htmlTable.Append("<th>" + date.Day + "</th>");

                    }
                    htmlTable.Append("<th>Total Duty</th>");
                    htmlTable.Append("<th>Totl OT(Hours)</th>");
                    htmlTable.Append("</tr>");
                    for (int i = 0; i < attdt.Rows.Count; i++)
                    {
                        int totalduty = 0;
                        int totalovertime = 0;
                        htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Employee_id"] + "</td>");
                        //htmlTable.Append("<td>-</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Name"] + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Department_name"] + "</td>");
                        htmlTable.Append("<td>" + attdt.Rows[i]["Designation"] + "</td>");
                        //htmlTable.Append("<td>" + attdt.Rows[i]["Employee_Type"] + "</td>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            string pival = "", poval = "";
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                            {
                                DateTime pidate = DateTime.ParseExact(attdt.Rows[i]["PI" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                pival = "P";
                            }
                            else
                            {
                                pival = "A"
        ;
                            }
                            if (attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                DateTime podate = DateTime.ParseExact(attdt.Rows[i]["PO" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                poval = "P";
                                totalduty++;
                            }
                            else
                            {
                                poval = "A";
                            }
                            htmlTable.Append("<td>" + pival + " " + poval + "</td>");
                            if (attdt.Rows[i]["OT" + date.Day + ""] + "" != "" && attdt.Rows[i]["OT" + date.Day + ""] + "" != null)
                            {
                                DateTime otdate = DateTime.ParseExact(attdt.Rows[i]["OT" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                totalovertime += Convert.ToInt32(otdate.ToString("HH"));
                            }
                            else
                            {
                                totalovertime += 0;
                            }

                        }


                        htmlTable.Append("<td>" + totalduty + "</td>");
                        htmlTable.Append("<td>" + totalovertime + "</td>");
                        htmlTable.Append("</tr>");
                    }

                    htmlTable.Append("</tbody>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                string json = JsonConvert.SerializeObject(attdt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetMonthperfor(int Month, int Year, string Managernm, string Depart, string Desig, string Empid)
        {
            string res = "", tbldata = "", tbl = "", subquery = " Where tbl_registration.Status='Approved' ", regsubquery = ""; int holidaycount;
            StringBuilder htmlTable = new StringBuilder();
            try
            {
                string holidayquery = "select * from tbl_Holiday where MONTH(Date)='" + Month + "' and YEAR(Date)='" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_Holiday", "", holidayquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable holidaydt = db.GetAllRecord(holidayquery);
                activitylog.Activitylogupd("Success", "");
                if (holidaydt.Rows.Count > 0)
                {
                    holidaycount = holidaydt.Rows.Count;
                }
                else
                {
                    holidaycount = 0;
                }
                int count = 1;
                for (int j = 1; j <= DateTime.DaysInMonth(Year, Month); j++)
                {
                    count++;
                }
                int addday = count - 2;
                int span = count / 2;
                int span2 = span + 1;
                DateTime startDate = new DateTime(Year, Month, 1);
                DateTime endDate = startDate.AddDays(addday);
                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    if (date != null)
                    {
                        regsubquery += "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchin_time, '') ELSE NULL END) AS PI" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Punchout_time,'' ) ELSE NULL END) AS PO" + date.Day + "," +
    "MAX(CASE WHEN DAY(tbl_attendance.Date) = " + date.Day + " THEN ISNULL(tbl_attendance.Working_hours,'' ) ELSE NULL END) AS WH" + date.Day + ",";

                    }

                }
                regsubquery = regsubquery.Substring(0, regsubquery.Length - 1);

                string empquery = "", desigquery = "", departquery = "", managerquery = "";
                if (Managernm != null && Managernm != "")
                {
                    string[] managerArray = Managernm.Split(',');
                    foreach (string id in managerArray)
                    {
                        managerquery += " tbl_attendance.Managercode='" + id + "' or";
                    }
                    managerquery = managerquery.Substring(0, managerquery.Length - 3);
                    subquery += " and (" + managerquery + ")";
                }
                if (Empid != null && Empid != "")
                {
                    string[] empArray = Empid.Split(',');
                    foreach (string id in empArray)
                    {
                        empquery += " tbl_attendance.Employeeid='" + id + "' or";
                    }
                    empquery = empquery.Substring(0, empquery.Length - 3);
                    subquery += " and (" + empquery + ")";
                }
                if (Desig != null && Desig != "")
                {
                    string[] desigArray = Desig.Split(',');
                    foreach (string designame in desigArray)
                    {
                        desigquery += " tbl_registration.Designation='" + designame + "' or";
                    }
                    desigquery = desigquery.Substring(0, desigquery.Length - 3);
                    subquery += " and (" + desigquery + ")";
                }
                if (Depart != null && Depart != "")
                {
                    string[] departArray = Depart.Split(',');
                    foreach (string departnm in departArray)
                    {
                        departquery += " tbl_registration.Department_name='" + departnm + "' or";
                    }
                    departquery = departquery.Substring(0, departquery.Length - 3);
                    subquery += " and (" + departquery + ")";
                }
                if (subquery.EndsWith(" and"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 4);
                }
                //string squery = "select * from tbl_attendance where MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "' and ("+subquery+")";
                string attquery = "SELECT tbl_registration.Name,tbl_registration.Employee_type,tbl_registration.Employee_id,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime," +
     regsubquery + " FROM tbl_registration LEFT JOIN tbl_attendance ON tbl_registration.Employee_id = tbl_attendance.Employeeid AND MONTH(tbl_attendance.Date) = " + Month + " " + subquery + " GROUP BY tbl_registration.Name,tbl_registration.Employee_type,tbl_registration.Employee_id,tbl_registration.Shiftstarttime,tbl_registration.Shiftendtime";
                activitylog.Activitylogins("tbl_registration,tbl_attendance", "", attquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable attdt = db.GetAllRecord(attquery);
                activitylog.Activitylogupd("Success", "");
                if (attdt.Rows.Count > 0)
                {

                    htmlTable.Append("<tbody class='text-center'>");
                    for (int i = 0; i < attdt.Rows.Count; i++)
                    {

                        int present = 0, absent = 0, leavecount = 0, latearrival = 0, earlydeparture = 0, halfday = 0, totalday = 0, weekofcount = 0;
                        int j = i + 1;

                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            totalday++;

                        }

                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                            {
                                if (DateTime.Parse(attdt.Rows[i]["PI" + date.Day + ""] + "") > DateTime.Parse(attdt.Rows[i]["Shiftstarttime"] + ""))
                                {
                                    latearrival++;
                                }

                            }

                        }
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                if (DateTime.Parse(attdt.Rows[i]["PO" + date.Day + ""] + "") < DateTime.Parse(attdt.Rows[i]["Shiftendtime"] + ""))
                                {
                                    earlydeparture++;
                                }

                            }

                        }
                        TimeSpan dur = DateTime.Parse(attdt.Rows[i]["Shiftendtime"] + "") - DateTime.Parse(attdt.Rows[i]["Shiftstarttime"] + "");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["WH" + date.Day + ""] + "" != "" && attdt.Rows[i]["WH" + date.Day + ""] + "" != null)
                            {
                                if (TimeSpan.Parse(attdt.Rows[i]["WH" + date.Day + ""] + "") < dur)
                                {
                                    halfday++;
                                }

                            }

                        }
                        //for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        //{
                        //    if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null && attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                        //    {
                        //        present++;
                        //    }

                        //}
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null && attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                present++;
                            }

                        }
                        //for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        //{
                        //    if (attdt.Rows[i]["Totalleave" + date.Day + ""] + "" != "" && attdt.Rows[i]["Totalleave" + date.Day + ""] + "" != null)
                        //    {
                        //        leavecount += Convert.ToInt32(attdt.Rows[i]["Totalleave" + date.Day + ""]);
                        //    }

                        //}
                        DataTable weekoffdt = db.GetAllRecord("select * from tbl_weekoff where Status='Active'");
                        if (weekoffdt.Rows.Count > 0)
                        {
                            for (int wo = 0; wo < weekoffdt.Rows.Count; wo++)
                            {
                                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                                {
                                    if (date.ToString("dddd") == weekoffdt.Rows[wo]["Weekday"] + "")
                                    {
                                        weekofcount++;
                                    }

                                }
                            }

                        }
                        else
                        {
                            weekofcount = 0;
                        }
                        absent = totalday - (present + holidaycount + leavecount + weekofcount);


                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<td colspan='" + span + "' class='text-start'> <b> Name:</b> " + attdt.Rows[i]["Name"] + "(" + attdt.Rows[i]["Employee_id"] + ")</td>");
                        htmlTable.Append("<td colspan='" + span2 + "' class='text-end'> <b>Present:</b> " + present + "  <b>Absent:</b> " + absent + "  <b>Leaves:</b> " + leavecount + "  <b>Holiday:</b> " + holidaycount + "  <b>Weekoff:</b> " + weekofcount + " </td>");
                        htmlTable.Append("</tr>");
                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td></td>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            htmlTable.Append("<th>" + date.Day + "</th>");

                        }
                        htmlTable.Append("</tr>");

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<th>In :</th>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                            {
                                DateTime pidate = DateTime.ParseExact(attdt.Rows[i]["PI" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                htmlTable.Append("<td>" + pidate.ToString("HH:mm") + "</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td> - </td>");
                            }

                        }
                        htmlTable.Append("</tr>");

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<th>Out :</th>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                DateTime podate = DateTime.ParseExact(attdt.Rows[i]["PO" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                htmlTable.Append("<td>" + podate.ToString("HH:mm") + "</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td> - </td>");
                            }

                        }
                        htmlTable.Append("</tr>");
                        htmlTable.Append("<tr>");
                        htmlTable.Append("<th>Work Hours :</th>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["WH" + date.Day + ""] + "" != "" && attdt.Rows[i]["WH" + date.Day + ""] + "" != null)
                            {
                                DateTime whdate = DateTime.ParseExact(attdt.Rows[i]["WH" + date.Day + ""] + "", "HH:mm:ss", CultureInfo.InvariantCulture);
                                htmlTable.Append("<td>" + whdate.ToString("HH:mm") + "</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td> - </td>");
                            }

                        }
                        htmlTable.Append("</tr>");
                        //htmlTable.Append("<tr>");
                        //htmlTable.Append("<td>Overtime: :</td>");
                        //for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        //{
                        //    if (attdt.Rows[i]["PI" + date.Day + ""]+"" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                        //    {
                        //        htmlTable.Append("<td>" + attdt.Rows[i]["PI" + date.Day + ""] + "</td>");
                        //    }
                        //    else
                        //    {
                        //        htmlTable.Append("<td> - </td>");
                        //    }

                        //}
                        //htmlTable.Append("</tr>");
                        htmlTable.Append("<tr>");
                        htmlTable.Append("<th>In Status :</th>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PI" + date.Day + ""] + "" != "" && attdt.Rows[i]["PI" + date.Day + ""] + "" != null)
                            {
                                htmlTable.Append("<td>P</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td>A</td>");
                            }

                        }
                        htmlTable.Append("</tr>");
                        htmlTable.Append("<tr>");
                        htmlTable.Append("<th>Out Status :</th>");
                        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                        {
                            if (attdt.Rows[i]["PO" + date.Day + ""] + "" != "" && attdt.Rows[i]["PO" + date.Day + ""] + "" != null)
                            {
                                htmlTable.Append("<td>P</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td>A</td>");
                            }

                        }
                        htmlTable.Append("</tr>");

                    }
                    htmlTable.Append("</tbody>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }
                //DataTable dt = db.GetAllRecord(squery);
                string json = JsonConvert.SerializeObject(attdt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Loan()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Loan(FormCollection form)
        {
            string updoc = "";
            try
            {
                if (form["status"] != "Rejected")
                {
                    updoc = "Content/Forms/Loan_App_form.pdf";
                }
                string upquery = "update tbl_loan set Status='Inactive' where Reqid='" + form["reqid"] + "'";
                string iquery = "INSERT INTO tbl_loan(Reqid,Employeeid,Name,Department,Designation,Loanamount,Reason,Status,application_status,Approvedbyname,Approvedbyid,Remark,Logid,Logname,Datetime,Downloaddocument,BranchName,BranchCode,Uploaddocument)VALUES('" + form["reqid"] + "','" + form["empid"] + "','" + form["name"] + "','" + form["department"] + "','" + form["designation"] + "','" + form["amount"] + "','" + form["reason"] + "','"+form["status"]+ "','" + form["status"] + "','" + Session["suid"] + "','" + Session["suname"] + "','"+ form["remark"] + "','" + Session["suid"] + "','" + Session["suname"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+updoc+ "','" + form["branchname"] + "','" + form["branchcode"] + "','" + form["uploaddocument"] + "')";
                if (db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(iquery))
                {
                    ViewBag.msg = "Request "+ form["status"] + "";
                }
                else
                {
                    ViewBag.msg = "Request Failed";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Advance()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Advance(FormCollection form)
        {
            string updoc = "";
            try
            {
                if (form["status"] != "Rejected")
                {
                    updoc = "Content/Forms/Advance_App_form.pdf";
                }
                string upquery = "update tbl_advance set Status='Inactive' where Reqid='" + form["reqid"] + "'";
                string iquery = "INSERT INTO tbl_advance(Reqid,Employeeid,Name,Department,Designation,Advanceamount,Reason,Status,application_status,Approvedbyname,Approvedbyid,Remark,Logid,Logname,Datetime,Downloaddocument,BranchName,BranchCode,Uploaddocument)VALUES('" + form["reqid"] + "','" + form["empid"] + "','" + form["name"] + "','" + form["department"] + "','" + form["designation"] + "','" + form["amount"] + "','" + form["reason"] + "','" + form["status"] + "','" + form["status"] + "','" + Session["suid"] + "','" + Session["suname"] + "','" + form["remark"] + "','" + Session["suid"] + "','" + Session["suname"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + updoc + "','" + form["branchname"] + "','" + form["branchcode"] + "','" + form["uploaddocument"] + "')";
                if (db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(iquery))
                {
                    ViewBag.msg = "Request " + form["status"] + "";
                }
                else
                {
                    ViewBag.msg = "Request Failed";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        private string random(int numlength)
        {
            var random = new Random();
           
            var number = string.Empty;
            var possibleChar = "1234567890";

            for (var i = 0; i < numlength; i++)
            {
                var randomIndex = random.Next(0, possibleChar.Length - 1);
                number += possibleChar[randomIndex];
            }
            return number;
        }
        public JsonResult GetCity(string State)
        {
            string res = "";
            try
            {
                res = "<option selected disabled value=''>Select one</option>";
                string query = "select * from tbl_city where Statecode='" + State + "'";
                activitylog.Activitylogins("tbl_city", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        res += "<option value='" + dt.Rows[i]["Id"] + "'>" + dt.Rows[i]["Cityname"] + "</option>";
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Notification()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Notification(string brname, string empid, string desig, string depart, string manager, string title, string description)
        {
            try
            {
                string subquery = ""; string query = "", Employeeid = "", Employeename = "", inssubquery = "";
                string suid = Session["suid"] + "";
                string suname = Session["suname"] + "";
                if (brname != null && brname != "")
                {
                    string[] brnameArray = brname.Split(',');
                    foreach (string id in brnameArray)
                    {
                        subquery += " BranchCode='" + id + "' or";
                    }
                }
                if (empid != null && empid != "")
                {
                    string[] empArray = empid.Split(',');
                    foreach (string id in empArray)
                    {
                        subquery += " Employee_id='" + id + "' or";
                    }
                }
                if (desig != null && desig != "")
                {
                    string[] desigArray = desig.Split(',');
                    foreach (string designame in desigArray)
                    {
                        subquery += " Designation='" + designame + "' or";
                    }
                }
                if (depart != null && depart != "")
                {
                    string[] departArray = depart.Split(',');
                    foreach (string departnm in departArray)
                    {
                        subquery += " Department_name='" + departnm + "' or";
                    }
                }
                if (manager != null && manager != "")
                {
                    string[] managerArray = manager.Split(',');
                    foreach (string managernm in managerArray)
                    {
                        subquery += " Managername='" + managernm + "' or";
                    }
                }
                if (subquery.EndsWith(" or"))
                {
                    subquery = subquery.Substring(0, subquery.Length - 3);
                }
                //if (subquery != null && subquery != "")
                //{
                //    subquery = " and (" + subquery + ")";
                //}
                query = "select Employee_id,Name from tbl_registration where " + subquery + "";
               
                ViewBag.msg = query;
                activitylog.Activitylogins("tbl_registration", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query); ;
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        Employeeid += dt.Rows[i]["Employee_id"] + ",";
                        Employeename += dt.Rows[i]["Name"] + ",";
                    }
                    Employeeid = Employeeid.Substring(0, Employeeid.Length - 1);
                    Employeename = Employeename.Substring(0, Employeename.Length - 1);
                    string[] Employeearray = Employeeid.Split(',');
                    string[] Employeenmarray = Employeename.Split(',');

                    for (int i = 0; i < Employeearray.Length; i++)
                    {
                        inssubquery += "('" + Employeearray[i] + "','" + Employeenmarray[i] + "','" + title + "','" + description + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + suname + "','" + suid + "','" + suname + "','" + suid + "'),";
                    }
                    //foreach (string id in Employeearray)
                    //{
                    //    foreach (string name in Employeenmarray)
                    //    {
                    //        inssubquery += "('" + id + "','" + name + "','" + title + "','" + description + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + suname + "','" + suid + "'),";
                    //        break;
                    //    }
                    //}
                    if (inssubquery.EndsWith(","))
                    {
                        inssubquery = inssubquery.Substring(0, inssubquery.Length - 1);
                    }
                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,logname,logid,BranchName,BranchCode) values " + inssubquery + "";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        for (int i = 0; i < Employeearray.Length; i++)
                        {
                            Messaging.SendPushNotification(title, description, Employeearray[i]);
                        }
                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.AlertMessage = "Notification Send";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.AlertMessage = "Notification Sending Failed";
                    }
                }
                else
                {
                    ViewBag.AlertMessage = "No Employee Found";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.AlertMessage = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }

        //Purchase Mgt Start

        public JsonResult Statuschangetive(string id ,string status, string tblnm)
        {
            string msg = "";
            try
            {
                string squery = "select Status from " + tblnm + " where Id='" + id + "'";
                DataTable dt = db.GetAllRecord(squery);
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["Status"] + "" == "Active")
                    {
                        string query = "Update " + tblnm + " set Status='Inactive' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Inactive";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Failed";
                        }
                    }
                    else if (dt.Rows[0]["Status"] + "" == "Inactive")
                    {
                        string query = "Update " + tblnm + " set Status='Active' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Active";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Failed";
                        }
                    }
                }


                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);

        }


        public JsonResult ORGStatuschangetive(string id, string status, string tblnm)
        {
            string msg = "";
            try
            {
                string squery = "select Status from " + tblnm + " where Id='" + id + "'";
                DataTable dt = db.GetAllRecord(squery);
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["Status"] + "" == "Active")
                    {
                        string query = "Update " + tblnm + " set Status='Inactive' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Inactive";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Failed";
                        }
                    }
                    else if (dt.Rows[0]["Status"] + "" == "Inactive")
                    {
                        string query = "Update " + tblnm + " set Status='Active' where Id='" + id + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Active";
                        }
                        else
                        {
                            activitylog.Activitylogins(tblnm, id, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Failed";
                        }
                    }
                }



            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);

        }



        // Sales Open //

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult DSales()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult LeadEmployeeInfo(string type,string month,string year)
        {
            List<EmpLead> EmpLead = new List<EmpLead>();
            try
            {
                ViewBag.nm = type;
                ViewBag.month = month;
                ViewBag.year = year;
                string query = "";
                if (type == "Lead")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }
                else if (type == "DKS")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done' and Lead_status_for='DKS' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }
                else if (type == "BSA")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status in ('Done','Follow Up')   and Lead_status_for='BSA' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }
                else if (type == "Demo")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status in ('Done','Follow Up')   and Lead_status_for='Demo' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }
                else if (type == "Order")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done'  and Lead_status_for='Order' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }
                else if (type == "Documentation")
                {
                    query = "SELECT * FROM tbl_leadnew where Lead_status='Done'  and Lead_status_for='Documentation' and MONTH(Datetime)='" + month + "' And YEAR(Datetime)='" + year + "'";
                }

                activitylog.Activitylogins("tbl_leadnew", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow row = dt.Rows[i];
                        EmpLead EmpLeadinfo = new EmpLead
                        {
                            Id = Convert.ToString(row["Id"]),
                            Customerid = Convert.ToString(row["Customerid"]),
                            Name = Convert.ToString(row["Name"]),
                            Mobile = Convert.ToString(row["Mobile"]),
                            Email = Convert.ToString(row["Email"]),
                            Statename = Convert.ToString(row["Statename"]),
                            Cityname = Convert.ToString(row["Cityname"]),
                            Address = Convert.ToString(row["Address"]),
                            Pincode = Convert.ToString(row["Pincode"]),
                            Occupation = Convert.ToString(row["Occupation"]),
                            Land_Irrigation = Convert.ToString(row["Land_Irrigation"]),
                            Support = Convert.ToString(row["Support"]),
                            Feedback = Convert.ToString(row["Feedback"]),
                            Supportempname = Convert.ToString(row["Supportempname"]),
                        };

                        EmpLead.Add(EmpLeadinfo);
                    }
                }
                else
                {
                    ViewBag.msg = "failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View(EmpLead);
        }
        public JsonResult getLeaddetails(string Cid)
        {
            string res1 = "";
            try 
            { 
            string getcmp = "SELECT * FROM tbl_leadnew where Id='" + Cid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);
            res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        // Sales Close //










        #region Support
        //Open Support Dasboard //

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Dsupport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Complaintype()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Complaintype(string hid, FormCollection form)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_complaintype set Complaintype='" + form["complaintype"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_complaintype", hid, query, "Success", "Update Success", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "");
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_complaintype", hid, query, "Failed", "Update Failed", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_complaintype where Complaintype='" + form["complaintype"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Complain Type Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_complaintype(Complaintype,Status,Logname,Logid,Date_time) values('" + form["complaintype"] + "','" + form["status"] + "','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_complaintype", db.getmaxid("tbl_complaintype").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_complaintype", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateComplaintype(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_complaintype where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_complaintype", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Complaintype"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[7] { id, name, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ComplainSubject()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ComplainSubject(string hid, FormCollection form)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_complain_subject set Complaintype='" + form["complaintype"] + "',Complaintypeid='" + form["complaintypeid"] + "',Complainsubject='" + form["complainsubject"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_complain_subject", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_complain_subject", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_complain_subject where Complaintype='" + form["complaintype"] + "' and  Complainsubject='" + form["complainsubject"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Sub Category Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_complain_subject(Complaintype,Complaintypeid,Complainsubject,Status,Logname,Logid,Date_time) values('" + form["complaintype"] + "','" + form["complaintypeid"] + "','" + form["complainsubject"] + "','" + form["status"] + "','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_complain_subject", db.getmaxid("tbl_complain_subject").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_complain_subject", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateComplainSubject(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_complain_subject where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_complain_subject", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Complaintype"] + "";
                    string catid = dt.Rows[0]["Complaintypeid"] + "";
                    string subcate = dt.Rows[0]["Complainsubject"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, name, catid, subcate, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult ComplaintInfo(string type)
        {
            List<Complaint> Complaint = new List<Complaint>();
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {
                try
                {
                    ViewBag.nm = type;
                    string query = "";
                    if (type == "all")
                    {
                        query = "SELECT * FROM tbl_Complaint where Status='Active'";

                    }
                    else if (type == "open")
                    {
                        query = "SELECT * FROM tbl_Complaint where Complaint_status='Open' and Status='Active'";
                    }
                    else if (type == "InProgress")
                    {
                        query = "SELECT * FROM tbl_Complaint where Complaint_status='InProgress' OR Status='Assign' and Status='Active'";
                    }
                    else if (type == "close")
                    {
                        query = "SELECT * FROM tbl_Complaint where Complaint_status='Close' and Status='Active'";
                    }


                    activitylog.Activitylogins("tbl_Complaint", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            DataRow row = dt.Rows[i];
                            Complaint CompInfo = new Complaint
                            {

                                Cmpid = Convert.ToString(row["CmpID"]),
                                name = Convert.ToString(row["Logname"]),
                                date = Convert.ToDateTime(row["datetime"]),
                                type = type,
                            };
                            Complaint.Add(CompInfo);
                        }
                    }
                    else
                    {
                        ViewBag.msg = "failed";
                    }
                }
                catch (Exception ex)
                {
                    try
                    {
                        Error_15_16 error_15_16 = new Error_15_16();
                        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                        // Get the page URL, if available
                        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                        // Get the module name
                        moduleName = ex.TargetSite.Module.Name;
                        // Get the error line number, if available
                        var stackTrace = ex.StackTrace;
                        if (!string.IsNullOrEmpty(stackTrace))
                        {
                            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                            if (lineNumberIndex >= 0)
                            {
                                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                                if (newLineIndex >= 0)
                                {
                                    errorLine = lineNumber.Substring(0, newLineIndex);
                                }
                                else
                                {
                                    errorLine = lineNumber;
                                }
                            }
                        }
                        // Get the error message and name
                        if (ex.Message.ToString().Length >= 1000)
                        {
                            errorMessage = ex.Message.Substring(1, 500);
                        }
                        else
                        {
                            errorMessage = ex.Message;
                        }
                        errorName = ex.GetType().FullName;
                        // Get the error trace
                        errorTrace = ex.StackTrace;
                        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                    }

                    catch
                    {

                    }
                    ViewBag.msg = "Error";
                }
                finally
                {
                    db.connectionstate();
                }
            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View(Complaint);
        }
        public JsonResult GetComplaintbydate(string Start_date, string End_date, string tp)
        {
            string res = "", tbldata = "", tbl = "", json = "", squery = "";
            try
            {
                DateTime startdate = DateTime.ParseExact(Start_date, "d/M/yyyy", null);
                string formatteStart_date = startdate.ToString("yyyy-MM-dd");
                DateTime enddate = DateTime.ParseExact(End_date, "d/M/yyyy", null);
                string formattedEnd_date = enddate.ToString("yyyy-MM-dd");
                if (tp == "all")
                {
                    squery = "select * from tbl_Complaint where (CONVERT(datetime, datetime)>='" + formatteStart_date + "' and CONVERT(datetime, datetime)<='" + formattedEnd_date + "') and Status='Active'";
                }
                else
                {
                    squery = "select * from tbl_Complaint where (CONVERT(datetime, datetime)>='" + formatteStart_date + "' and CONVERT(datetime, datetime)<='" + formattedEnd_date + "') and Complaint_status='" + tp + "' and Status='Active'";
                }


                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        public JsonResult getcmpdetails(string Cmpid)
        {
            string res1 = "";
            try
            {
                string getcmp = "SELECT * FROM tbl_Complaint where CmpID='" + Cmpid + "'";
                DataTable tbll = db.GetAllRecord(getcmp);
                res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult AssignComplaint()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult AssignComplaint(string remark, string complaintid, string employee)
        {
            try
            {
                string emppid = "", empname = "";
                string query6 = "select * from tbl_registration where Id='" + employee + "'";
                DataTable dt6 = db.GetAllRecord(query6);
                if (dt6.Rows.Count > 0)
                {
                    empname = dt6.Rows[0]["Name"].ToString();
                    emppid = dt6.Rows[0]["Employee_id"].ToString();

                }
                string compquery = "select * from tbl_Complaint where CmpID='" + complaintid + "' and Status='Active'";
                DataTable compdt = db.GetAllRecord(compquery);
                if (compdt.Rows.Count > 0)
                {
                    string status = "Assign";
                    
                    string addcmpl = "INSERT INTO [dbo].[tbl_Complaint] ([CmpID] ,[ComplaintType] ,[Subject] ,[Priority] ,[Complaint] ,[Attachment] ,[Branchname] ,[Branchcode] ,[Complaint_status] ,[Remark] ,[Reply] ,[Assignname] ,[Assignid] ,[Status] ,[Logid] ,[Logname] ,[Datetime],Complaintbyid,Complaintbyname,[Product_Img],[Product_id],[Product_name],[Product_price],[Product_quantity],[Total_proamount],[Product_type],Order_id,Orderid2,order_rowid,Complaintbycontact) VALUES ('" + complaintid + "','" + compdt.Rows[0]["ComplaintType"] + "','" + compdt.Rows[0]["Subject"] + "','" + compdt.Rows[0]["Priority"] + "','" + compdt.Rows[0]["Complaint"] + "','" + compdt.Rows[0]["Attachment"] + "','','','" + status + "','" + remark + "','" + remark + "','" + empname+ "','" + emppid + "','Active','" + Session["suid"] + "','" + Session["suname"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + compdt.Rows[0]["Complaintbyid"] + "','" + compdt.Rows[0]["Complaintbyname"] + "','" + compdt.Rows[0]["Product_Img"] + "','" + compdt.Rows[0]["Product_id"] + "','" + compdt.Rows[0]["Product_name"] + "','" + compdt.Rows[0]["Product_price"] + "','" + compdt.Rows[0]["Product_quantity"] + "','" + compdt.Rows[0]["Total_proamount"] + "','" + compdt.Rows[0]["Product_type"] + "','" + compdt.Rows[0]["Order_id"] + "','" + compdt.Rows[0]["Orderid2"] + "','" + compdt.Rows[0]["order_rowid"] + "','" + compdt.Rows[0]["Complaintbycontact"] + "')";

                    db.InsertUpdateDelete("update tbl_Complaint set Status='Inactive' where CmpID='" + complaintid + "'");
                    if (db.InsertUpdateDelete(addcmpl))
                    {
                        activitylog.Activitylogins("tbl_Complaint", db.getmaxid("tbl_Complaint").ToString(), addcmpl, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Saved";
                        
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Complaint", "", addcmpl, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Save Failed";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult Getcomplaintcount(string employee)
        {
            string res = "", emppid = "", tbl = "", json = "";
            int res1 = 0;
            try
            {
                string query6 = "select * from tbl_registration where Id='" + employee + "'";
                DataTable dt6 = db.GetAllRecord(query6);
                if (dt6.Rows.Count > 0)
                {
                    emppid = dt6.Rows[0]["Employee_id"].ToString();

                }
                string squery = "select * from tbl_Complaint where Assignid='" + emppid + "' and Status='Active' and Complaint_status!='Close'";
                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
                res1 = dt.Rows.Count;
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                json = "Error";

            }
            finally
            {
                db.connectionstate();
            }

            return Json(res1, JsonRequestBehavior.AllowGet);

        }

        /// <Reports Service Report Open>

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ServiceReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetServiceReport(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                    }

                }
                dataTable.Columns.Add("Total", typeof(string));
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));


                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'   and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        double[] quantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];

                        DataRow newRow = dataTable.NewRow();

                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";


                        string strlogid = "";
                        int customer = 0;
                        int pmd = 0, avgpmd = 0;
                        int demos = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                }
                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Employeeid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);

                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";


                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            customer = customerdt.Rows.Count;
                            if (prodt.Rows.Count > 0)
                            {
                                for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                {
                                    string productname = prodt.Rows[proi]["Brand"] + "";
                                    int quantity = 0;
                                    double amount = 0;
                                    double point = 0;
                                    string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'";
                                    DataTable orderdt = db.GetAllRecord(orderquery);
                                    if (orderdt.Rows.Count > 0)
                                    {
                                        for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                        {
                                            quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                            amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                            point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                        }
                                        quantities[proi] = quantity;
                                        amounts[proi] = amount;
                                        points[proi] = point;
                                    }
                                    else
                                    {
                                        quantities[proi] = 0;
                                        amounts[proi] = 0;
                                        points[proi] = 0;
                                    }

                                }
                            }

                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }


                        newRow["PMD"] = pmd;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total"] = Totalsum;
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = customer;

                        if (customer != 0)
                        {
                            newRow["D_C"] = demos / customer;
                            newRow["P_C"] = Pointsum / customer;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = customer / avgpmd;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                        }

                        dataTable.Rows.Add(newRow);
                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        htmlTable.Append("<tbody>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<th>Month</th>");
                        htmlTable.Append("<th>S.no.</th>");
                        htmlTable.Append("<th>Group Name</th>");
                        htmlTable.Append("<th>Name Of Head</th>");
                        htmlTable.Append("<th>PMD</th>");
                        htmlTable.Append("<th>Avg. PMD</th>");
                        htmlTable.Append("<th>Demos</th>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                htmlTable.Append("<th>" + prodt.Rows[proi]["Brand"] + "" + "</th>");
                            }

                        }
                        htmlTable.Append("<th>Total</th>");
                        htmlTable.Append("<th>Total Units</th>");
                        htmlTable.Append("<th>Product Sales Revenue</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>D/C</th>");
                        htmlTable.Append("<th>D/P</th>");
                        htmlTable.Append("<th>P/C</th>");
                        htmlTable.Append("<th>Demos</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Revenue</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("</tr>");

                        for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                        {
                            htmlTable.Append("<tr>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Group_Name"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Head"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["PMD"] + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["AVG_PMD"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Demos"] + "</td>");
                            if (prodt.Rows.Count > 0)
                            {
                                for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                {
                                    htmlTable.Append("<td>" + dataTable.Rows[datai][prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""] + "</td>");
                                }

                            }
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Total"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Total_Units"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Customer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_P"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["P_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Demos"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_custmer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("</tr>");



                        }
                        int srcount = dataTable.Rows.Count + 1;

                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["AVG_PMD"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                            }
                        }
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["D_C"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["D_P"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["P_C"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["avg_Demos"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["avg_Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["avg_revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["avg_custmer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tbody>");
                    }
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }


        /// <Reports Service Report Close>
        //report

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Complaintreport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }

        public JsonResult GetComplaint(string Start_date, string End_date, string branch, string status, string empnm)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                DateTime startdate = DateTime.ParseExact(Start_date, "d/M/yyyy", null);
                string formatteStart_date = startdate.ToString("yyyy-MM-dd");
                DateTime enddate = DateTime.ParseExact(End_date, "d/M/yyyy", null);
                string formattedEnd_date = enddate.ToString("yyyy-MM-dd");

                string squery = "select * from tbl_Complaint where (CONVERT(datetime, datetime)>='" + formatteStart_date + "' and CONVERT(datetime, datetime)<='" + formattedEnd_date + "') and Status='Active'";
                if (!string.IsNullOrEmpty(branch))
                {
                    squery += " AND Branchname = '" + branch + "'";
                }
                if (!string.IsNullOrEmpty(empnm))
                {
                    squery += " AND Logid = '" + empnm + "'";
                }

                if (!string.IsNullOrEmpty(status))
                {
                    squery += " AND Complaint_status = '" + status + "'";
                }
                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }

        public JsonResult GetallComplaint()
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                string squery = "select * from tbl_Complaint where Status='Active'";

                activitylog.Activitylogins("tbl_Complaint", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }

        //Close support //

        #endregion


        #region Order

        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult DOrder()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        #endregion





        ///  Inventry Module  Open ///



        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult BrandName()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult BrandName(string hid, string brand, string status)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_brand set Brandname='" + brand + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_brand", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_brand", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_brand where Brandname='" + brand + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Brand Name Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_brand(Brandname,Status,Logname,Logid,Date_time) values('" + brand + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_brand", db.getmaxid("tbl_brand").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_brand", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateBrandName(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_brand where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_brand", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Brandname"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[5] { id, name, status, companyname, companyid};

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductName1()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductName1(string hid, string product, string status,string unittype)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_Product_name set Productname='" + product + "',UnitType='" + unittype+"',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_Product_name", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Product_name", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_Product_name where Productname='" + product + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Name Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_Product_name(Productname,Status,Logname,Logid,Date_time,UnitType) values('" + product + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+unittype+"')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_Product_name", db.getmaxid("tbl_Product_name").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_Product_name", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateProductName(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_Product_name where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_Product_name", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["Productname"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string UnitType = dt.Rows[0]["UnitType"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string XML = dt.Rows[0]["XML"] + "";
                    string Brandname = dt.Rows[0]["Brandname"] + "";
                    string Category = dt.Rows[0]["Category"] + "";
                    string Mfgstatus = dt.Rows[0]["Mfgstatus"] + "";

                    res = new string[10] { id, name, XML, status, companyname, companyid, UnitType,Brandname,Category,Mfgstatus };



                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductPriceCircular()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductPriceCircular(string hid1, FormCollection form, HttpPostedFileBase productprimg, IEnumerable<HttpPostedFileBase> productothimg)
        {
            string msg = "";
            string pimgpth = "", oimgpth = "", Brandnm="", Productnm="";
            //var restableObjectJson = Request.Form["restableObject"];
            //string xmltable = JsontoXML(restableObjectJson);

            var unittype1 = Request.Form["unittype1"];
            var productid = Request.Form["productid"];
            var description = Request.Form["description"];
            var sellprice = Request.Form["sellprice"];
            var offerprice = Request.Form["offerprice"];
            var category = Request.Form["category"];
            var points = Request.Form["points"];
            var unittype = Request.Form["unittype"];
            var brand = Request.Form["brand"];
            var quantity = Request.Form["quantity"];
            var productname = Request.Form["productname"];
            var ptype = Request.Form["ptype"];
            var unittypep = Request.Form["unittypep"];
            var status = Request.Form["status"];
            var pron = Request.Form["pron"];
            var hid = Request.Form["hid"];
            var oimage = Request.Form["oimage"];
            var pimage = Request.Form["pimage"];
            var productdisc = Request.Form["productdisc"];
            var bulkrate = Request.Form["bulkrate"];
            var Gst_per = Request.Form["Gst_per"];
            string subcategory = "";

            try
            {
                if (hid != "" && hid != null)
                {
                    if (productprimg != null)
                    {
                        pimgpth = APIs.ProductImage(productprimg);

                    }
                    else
                    {
                        pimgpth = pimage;
                    }

                    if(productothimg!=null)
                    {
                        foreach (var file in productothimg)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                oimgpth += APIs.ProductImage(file) + ",";
                            }
                            else
                            {
                                oimgpth = oimage;
                            }
                        }
                    }
                    string query = "";
                    if (ptype == "Plant")
                    {
                        query = "update tbl_pro_price_circlar set Ptype='" + ptype + "',Unittype='" + unittype + "',Points='" + points + "',ProductCategory='" + category + "',ProductSubCategory='" + subcategory + "',Offerprice='" + offerprice + "',Sellprice='" + sellprice + "',Discountpercent='" + productdisc + "',Bulkprice='" + bulkrate + "',Pimage='" + pimgpth + "',Oimage='" + oimgpth + "',Status='" + status + "',logid='" + Session["suid"] + "',logname='" + Session["suname"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',proid='" + productid + "',punit='" + unittype1 + "', Gst_per='" + Gst_per + "' where Id='" + hid + "'";
                    }
                    else
                    {
                        query = "update tbl_pro_price_circlar set Ptype='" + ptype + "',Unittype='" + unittype + "',Points='" + points + "',ProductCategory='" + category + "',ProductSubCategory='" + subcategory + "',Offerprice='" + offerprice + "',Sellprice='" + sellprice + "',Discountpercent='" + productdisc + "',Pimage='" + pimgpth + "',Oimage='" + oimgpth + "',Status='" + status + "',logid='" + Session["suid"] + "',logname='" + Session["suname"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',proid='" + productid + "',punit='" + unittype1 + "' ,Gst_per='" + Gst_per + "' where Id='" + hid + "'";
                    }
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_pro_price_circlar", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                        msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_pro_price_circlar", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_pro_price_circlar where [Ptype]='"+ptype + "' and [Productname]='" + productname + "' and [Quantity]='" + quantity + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        msg = "This Product Already Exist";
                    }
                    else
                    {
                        if (productprimg != null)
                        {
                            pimgpth = APIs.ProductImage(productprimg);

                        }
                        if (productothimg != null)
                        {
                            foreach (var file in productothimg)
                            {
                                if (file != null && file.ContentLength > 0)
                                {
                                    oimgpth += APIs.ProductImage(file) + ",";
                                }
                            }
                        }
                        string query = "";
                        if (ptype == "Plant")
                        {
                            query = "insert into tbl_pro_price_circlar([Ptype],[Brand],[Productname],[Quantity],[Unittype],[Unitvalue],[Points],[ProductCategory],[ProductSubCategory],[Offerprice],[Sellprice],[Discountpercent],[Status],[Pimage],[Oimage],[Datetime],[logid],[logname],Description,proid,punit,packaging_material,Gst_per) values('" + ptype + "','" + brand + "','" + productname + "','" + quantity + "','" + unittype + "','1','" + points + "','" + category + "','" + subcategory + "','" + offerprice + "','" + sellprice + "','" + productdisc + "','Active','" + pimgpth + "','" + oimgpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "','" + description + "','" + productid + "','" + unittype1 + "','','" + bulkrate + "','" + Gst_per + "')";
                        }
                        else
                        {
                            query = "insert into tbl_pro_price_circlar([Ptype],[Brand],[Productname],[Quantity],[Unittype],[Unitvalue],[Points],[ProductCategory],[ProductSubCategory],[Offerprice],[Sellprice],[Discountpercent],[Status],[Pimage],[Oimage],[Datetime],[logid],[logname],Description,proid,punit,packaging_material,Bulkprice,Gst_per) values('" + ptype + "','" + brand + "','" + productname + "','" + quantity + "','" + unittype + "','1','" + points + "','" + category + "','" + subcategory + "','" + offerprice + "','" + sellprice + "','" + productdisc + "','Active','" + pimgpth + "','" + oimgpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "','" + description + "','" + productid + "','" + unittype1 + "','','"+ Gst_per + "')";
                        }

                        if (db.InsertUpdateDelete(query))
                        {
                            msg = "Data Saved";

                            activitylog.Activitylogins("tbl_pro_price_circlar", db.getmaxid("tbl_pro_price_circlar").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_pro_price_circlar", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }

        public JsonResult GetProductDetailsforstock(string Productid, string addstock)
        {
            string[] res = { };
            string json = "";
            try
            {
                if (addstock == "")
                {
                    addstock = "0";
                }
                string query = "select * from tbl_pro_price_circlar where proid='" + Productid + "' and Quantity='" + addstock + "'";

                string pquery = "select * from tbl_Product_name where Id='" + Productid + "'";
                DataTable pdt = db.GetAllRecord(pquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Rawmaterialname", typeof(string));
                dataTable.Columns.Add("Rawmaterialid", typeof(string));
                dataTable.Columns.Add("Unittype", typeof(string));
                dataTable.Columns.Add("Quantity1p", typeof(string));
                dataTable.Columns.Add("Totalbalance", typeof(string));
                dataTable.Columns.Add("Usebalance", typeof(string));
                dataTable.Columns.Add("Balancestatus", typeof(string));

                activitylog.Activitylogins("tbl_Product_name", Productid, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {

                    string id = dt.Rows[0]["Id"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Brand = dt.Rows[0]["Brand"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Quantity = dt.Rows[0]["Quantity"] + "";
                    string Unittype = dt.Rows[0]["Unittype"] + "";
                    string Points = dt.Rows[0]["Points"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string ProductSubCategory = dt.Rows[0]["ProductSubCategory"] + "";
                    string Offerprice = dt.Rows[0]["Offerprice"] + "";
                    string Sellprice = dt.Rows[0]["Sellprice"] + "";
                    string Discountpercent = dt.Rows[0]["Discountpercent"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Pimage = dt.Rows[0]["Pimage"] + "";
                    string Oimage = dt.Rows[0]["Oimage"] + "";
                    //string Datetime = dt.Rows[0]["Datetime"] + "";
                    string logid = dt.Rows[0]["logid"] + "";
                    string logname = dt.Rows[0]["logname"] + "";
                    string Description = dt.Rows[0]["Description"] + "";
                    string proid = dt.Rows[0]["proid"] + "";
                    string punit = dt.Rows[0]["punit"] + "";

                    string packaging_material = dt.Rows[0]["packaging_material"] + "";

                    string Packagingunit = dt.Rows[0]["Packagingunit"] + "";
                    string Total_stock = dt.Rows[0]["Total_stock"] + "";
                    string Used_stock = dt.Rows[0]["Used_stock"] + "";
                    string Balance_stock = dt.Rows[0]["Balance_stock"] + "";

                    res = new string[25] { id, Ptype, Brand, Productname, Quantity, Unittype, Points, ProductCategory, ProductSubCategory, Offerprice, Sellprice, Discountpercent, Status, Pimage, Oimage, Description, logid, logname, proid, punit, packaging_material,Packagingunit,Total_stock,Used_stock,Balance_stock };

                }
                else if (pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Ptype = "";
                    string Brand = pdt.Rows[0]["Brandname"] + "";
                    string Productname = pdt.Rows[0]["Productname"] + "";
                    string Quantity = "";
                    string Unittype = pdt.Rows[0]["UnitType"] + "";
                    string Points = "";
                    string ProductCategory = pdt.Rows[0]["Category"] + "";
                    string ProductSubCategory = "";
                    string Offerprice = "";
                    string Sellprice = "";
                    string Discountpercent = "";
                    string Status = "";
                    string Pimage = "";
                    string Oimage = "";
                    //string Datetime = dt.Rows[0]["Datetime"] + "";
                    string logid = "";
                    string logname = "";
                    string Description = "";
                    string proid = pdt.Rows[0]["Id"] + "";
                    string punit = "";
                    string packaging_material = "";

                    string Packagingunit = "";
                    string Total_stock = "";
                    string Used_stock = "";
                    string Balance_stock = "";

                    res = new string[25] { id, Ptype, Brand, Productname, Quantity, Unittype, Points, ProductCategory, ProductSubCategory, Offerprice, Sellprice, Discountpercent, Status, Pimage, Oimage, Description, logid, logname, proid, punit, packaging_material, Packagingunit, Total_stock, Used_stock, Balance_stock };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AddProductFinishStock()
        {
            string msg = "";
            string pimgpth = "", oimgpth = "", Brandnm = "", Productnm = "";
            var phid = Request.Form["phid"];
            var pproduct = Request.Form["pproduct"];
            var pproductid = Request.Form["pproductid"];
            var pproductname = Request.Form["pproductname"];
            var pbrandname = Request.Form["pbrandname"];
            var paddstock = Request.Form["paddstock"];
            var pavailbal = Request.Form["pavailbal"];
            var rowmeterial = Request.Form["rowmeterial"];
            var rowmeterialid = Request.Form["rowmeterialid"];
            var unittyperaw = Request.Form["unittyperaw"];
            var materialpackquantity = Request.Form["materialpackquantity"];
            var ptotalbal = Request.Form["ptotalbal"];
            var usedbalance = Request.Form["usedbalance"];
            var leftbalance = Request.Form["leftbalance"];
            var pproductunittype = Request.Form["pproductunittype"];
            var pproductcategory = Request.Form["pproductcategory"];
            string subcategory = "";

            try
            {
                if (phid != "" && phid != null)
                {

                    string selquery = "select * from tbl_pro_price_circlar where [proid]='" + pproductid + "' and [Quantity]='" + paddstock + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        string Total_stock = dt.Rows[0]["Total_stock"] + "";
                        string Balance_stock = dt.Rows[0]["Balance_stock"] + "";

                        double addedquantity = Convert.ToDouble(Total_stock) + Convert.ToDouble(materialpackquantity);
                        double balancequantity = Convert.ToDouble(Balance_stock) + Convert.ToDouble(materialpackquantity);

                        string query = "update tbl_pro_price_circlar set Total_stock='" + addedquantity + "',Balance_stock='" + balancequantity + "' where proid='" + phid + "' and [Quantity]='" + paddstock + "'";
                        if (db.InsertUpdateDelete(query))
                        {
                            msg = "Data Saved";

                            activitylog.Activitylogins("tbl_pro_price_circlar", db.getmaxid("tbl_pro_price_circlar").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            string query2 = "insert into [tbl_producttransaction_finish](ProductId,[ProductName],[Brandname],[Quntity],[Unittype],Ttype,logname,logid,Date_time,totaluseproquantity) values('" + pproductid + "','" + pproductname + "','" + pbrandname + "','" + paddstock + "','','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + usedbalance + "')";

                            if (db.InsertUpdateDelete(query2))
                            {
                                string sequery = "select * from tbl_Product_name where id='" + pproductid + "'";
                                DataTable sedt = db.GetAllRecord(sequery);
                                if (sedt.Rows.Count > 0)
                                {
                                    string Debit = sedt.Rows[0]["Debit"] + "";
                                    string Balance = sedt.Rows[0]["Balance"] + "";

                                    double Debitquantity = Convert.ToDouble(Debit) + Convert.ToDouble(usedbalance);
                                    double Balancequantity = Convert.ToDouble(Balance) - Convert.ToDouble(usedbalance);


                                    string squery = "update tbl_Product_name set Debit='" + Debitquantity + "',Balance='" + Balancequantity + "' where id='" + pproductid + "'";

                                    if (db.InsertUpdateDelete(squery))
                                    {
                                        activitylog.Activitylogins("tbl_Product_name", phid, squery, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                        msg = "Data Updated";

                                        string query21 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + pproductid + "','" + pproductname + "','" + Debitquantity + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                                        db.InsertUpdateDelete(query21);

                                    }
                                    else
                                    {
                                        activitylog.Activitylogins("tbl_Product_name", phid, squery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                        msg = "Update Failed";
                                    }
                                }
                                else
                                {
                                    msg = "Data Updated";
                                }
                            }
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_pro_price_circlar", phid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Update Failed";
                        }

                    }

                    
                }
                else
                {
                    string selquery = "select * from tbl_pro_price_circlar where [proid]='" + pproductid + "' and [Quantity]='" + paddstock + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        msg = "This Product Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_pro_price_circlar([Brand],[Productname],[Quantity],[Unittype],[Unitvalue],[Status],[Datetime],[logid],[logname],proid,punit,packaging_material,[Packagingunit],[Total_stock],[Used_stock],[Balance_stock],ProductCategory) values('" + pbrandname + "','" + pproductname + "','" + paddstock + "','','1','Packaging','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "','" + pproductid + "','"+ pproductunittype + "','" + rowmeterial + "','"+ unittyperaw + "','"+ materialpackquantity + "','0','" + materialpackquantity + "','"+pproductcategory+"')";

                        if (db.InsertUpdateDelete(query))
                        {
                            msg = "Data Saved";

                            activitylog.Activitylogins("tbl_pro_price_circlar", db.getmaxid("tbl_pro_price_circlar").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            string query2 = "insert into [tbl_producttransaction_finish](ProductId,[ProductName],[Brandname],[Quntity],[Unittype],Ttype,logname,logid,Date_time,totaluseproquantity) values('" + pproductid + "','" + pproductname + "','" + pbrandname + "','"+ paddstock + "','','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+ usedbalance + "')";

                            if (db.InsertUpdateDelete(query2))
                            {
                                string sequery = "select * from tbl_Product_name where id='" + pproductid + "'";
                                DataTable sedt = db.GetAllRecord(sequery);
                                if (sedt.Rows.Count > 0)
                                {
                                    string Debit = sedt.Rows[0]["Debit"] + "";
                                    string Balance = sedt.Rows[0]["Balance"] + "";

                                    double Debitquantity = Convert.ToDouble(Debit) + Convert.ToDouble(usedbalance);
                                    double Balancequantity = Convert.ToDouble(Balance) - Convert.ToDouble(usedbalance);


                                    string squery = "update tbl_Product_name set Debit='" + Debitquantity + "',Balance='" + Balancequantity + "' where id='" + pproductid + "'";

                                    if (db.InsertUpdateDelete(squery))
                                    {
                                        activitylog.Activitylogins("tbl_Product_name", phid, squery, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                        msg = "Data Updated";

                                        string query21 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + pproductid + "','" + pproductname + "','" + Debitquantity + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                                        db.InsertUpdateDelete(query21);

                                    }
                                    else
                                    {
                                        activitylog.Activitylogins("tbl_Product_name", phid, squery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                        msg = "Update Failed";
                                    }
                                }
                                else
                                {
                                    msg = "Data Not Updated";
                                }
                            }


                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_pro_price_circlar", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateProductPriceCircular(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_pro_price_circlar where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_pro_price_circlar", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Brand = dt.Rows[0]["Brand"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Quantity = dt.Rows[0]["Quantity"] + "";
                    string Unittype = dt.Rows[0]["Unittype"] + "";
                    string Points = dt.Rows[0]["Points"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string ProductSubCategory = dt.Rows[0]["ProductSubCategory"] + "";
                    string Offerprice = dt.Rows[0]["Offerprice"] + "";
                    string Sellprice = dt.Rows[0]["Sellprice"] + "";
                    string Discountpercent = dt.Rows[0]["Discountpercent"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Pimage = dt.Rows[0]["Pimage"] + "";
                    string Oimage = dt.Rows[0]["Oimage"] + "";
                    //string Datetime = dt.Rows[0]["Datetime"] + "";
                    string logid = dt.Rows[0]["logid"] + "";
                    string logname = dt.Rows[0]["logname"] + "";
                    string Description = dt.Rows[0]["Description"] + "";
                    string proid = dt.Rows[0]["proid"] + "";
                    string punit = dt.Rows[0]["punit"] + ""; 
                    string Bulkprice = dt.Rows[0]["Bulkprice"] + "";
                    string Gst_per = dt.Rows[0]["Gst_per"] + "";

                    string packaging_material = dt.Rows[0]["packaging_material"] + "";

                    res = new string[23] { id, Ptype, Brand, Productname, Quantity, Unittype, Points, ProductCategory, ProductSubCategory, Offerprice, Sellprice, Discountpercent, Status, Pimage, Oimage, Description, logid, logname,proid,punit, packaging_material,Bulkprice,Gst_per };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult RawMaterial()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult RawMaterial(string hid, string row, string status, string rowid, string unittype,string category)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_rowmeterial set RowMeterial='" + row + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Materialcategory='"+category+"',UnitType='" + unittype + "',BranchName= '',BranchCode='' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_rowmeterial", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                        string query1 = "update tbl_rowmeterialstock set RowMeterial='" + row + "',UnitType='" + unittype + "',Materialcategory='" + category + "' where RowMeterialId='" + hid + "'";
                        if (db.InsertUpdateDelete(query1))
                        {
                            activitylog.Activitylogins("tbl_rowmeterialstock", db.getmaxid("tbl_rowmeterial").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Updated";
                        }
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_rowmeterial", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_rowmeterial where RowMeterial='" + row + "' and Materialcategory='"+category+"'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Row Meterial Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_rowmeterial(RowMeterial,UnitType,Status,Logname,Logid,Date_time,Materialcategory) values('" + row + "','" + unittype + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+category+"')";
                        if (db.InsertUpdateDelete(query))
                        {
                            string query2 = "SELECT id FROM tbl_rowmeterial where RowMeterial='" + row + "' and UnitType='" + unittype + "'";
                            DataTable dt10 = db.GetAllRecord(query2);
                            string row_id = dt10.Rows[0][0].ToString();

                            string query1 = "insert into tbl_rowmeterialstock(RowMeterialId,RowMeterial,UnitType,Cr,Dr,Balance,BranchName,BranchCode,Materialcategory) values('" + row_id + "','" + row + "','" + unittype + "','0','0','0','','','"+ category + "')";
                            if (db.InsertUpdateDelete(query1))
                            {
                                activitylog.Activitylogins("tbl_rowmeterialstock", db.getmaxid("tbl_rowmeterial").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                ViewBag.msg = "Raw Material Added";
                            }
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_rowmeterial", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Raw Material Not Added";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        [OutputCache(CacheProfile = "NoCache")]
        public JsonResult UpdateRawMaterial(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_rowmeterial where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_rowmeterial", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["RowMeterial"] + "";
                    string unittype = dt.Rows[0]["UnitType"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string Materialcategory = dt.Rows[0]["Materialcategory"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, name, unittype, status, companyname, companyid, brname, brcode, Materialcategory };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult RawMaterialTRStock(string Id, string Type)
        {
            string res = "";
            try
            {
                string type = "";

                if(Type== "CR")
                {
                    type = "Cr.";
                }
                else
                {
                    type = "Dr.";
                }
                string query = "select * from tbl_row_transeaction where RowMeterialId='" + Id + "' and Ttype='" + type + "' and logid='" + Session["suid"] + "'";
                activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateRowMeterialStock(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_rowmeterialstock where Id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string rowmeterialid = dt.Rows[0]["RowMeterialId"] + "";
                    string name = dt.Rows[0]["RowMeterial"] + "";
                    string cr = dt.Rows[0]["Cr"] + "";
                    string dr = dt.Rows[0]["Dr"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string UnitType = dt.Rows[0]["UnitType"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, rowmeterialid, name, cr, dr, balance, UnitType, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductName()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductName(FormCollection form)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (form["hid"] != "" && form["hid"] != null)
                {
                    string query = "update tbl_Product_name set Productname='" + form["pron"] + "',Brandname='" + form["brandname"] + "',Category='" + form["procategory"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',UnitType='"+form["unittypep"] +"',logname= '"+ username + "',logid='"+ userid + "' where Id='" + form["hid"] + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_Product_name", form["hid"], query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Product_name", form["hid"], query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Updated Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_Product_name where Productname='" + form["pron"] + "' and  Brandname='" + form["brandname"] + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_Product_name([Productname],Brandname,Category,[XML],[Status],[logname],[logid],[Date_time],[UnitType],Mfgstatus) values('" + form["pron"] + "','"+ form["brandname"] + "','"+ form["procategory"] + "','','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+form["unittypep"] +"','Pending')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_Product_name", db.getmaxid("tbl_Product_name").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_Product_name", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductManufacturing()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductManufacturing(string jh)
        {
            // Access FormData values
            string msg = "";
            var restableObjectJson = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var pron = Request.Form["pron"];
            var status = Request.Form["status"];
            var unittype = Request.Form["unittypep"];
            string resxmlString = JsontoXML(restableObjectJson);
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_Product_name set XML='" + resxmlString + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',UnitType='" + unittype + "',logname= '" + username + "',logid='" + userid + "',Mfgstatus='"+ status + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_Product_name", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_Product_name", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        msg = "Updated Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_Product_name where Productname='" + pron + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        msg = "This Product Name Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_Product_name([Productname],[XML],[Status],[logname],[logid],[Date_time],[UnitType]) values('" + pron + "','" + resxmlString + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + unittype + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_Product_name", db.getmaxid("tbl_Product_name").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_Product_name", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }

        private string JsontoXML(string TableObject)
        {
            try
            {
                // Parse the JSON string into a JObject
                JObject jsonData = JObject.Parse(TableObject);
                // Create an XML document
                XDocument xmlDoc = new XDocument();
                // Create the root element
                XElement rootElement = new XElement("Data");
                // Create the tableHeadings element
                XElement headingsElement = new XElement("tableHeadings");
                foreach (string heading in jsonData["tableHeadings"])
                {
                    headingsElement.Add(new XElement("heading", heading));
                }
                // Create the tableData element
                XElement dataElement = new XElement("tableData");
                foreach (JArray row in jsonData["tableData"])
                {
                    XElement rowElement = new XElement("row");
                    foreach (string value in row)
                    {
                        rowElement.Add(new XElement("column", value));
                    }
                    dataElement.Add(rowElement);
                }
                // Build the XML structure
                rootElement.Add(headingsElement);
                rootElement.Add(dataElement);
                xmlDoc.Add(rootElement);
                // Convert the XML document to string
                string xmlString = xmlDoc.ToString();
                return xmlString;
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return "";
        }
        public JsonResult UpdateProductName1(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product_creation where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product_creation", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProductName"] + "";
                    string xml = dt.Rows[0]["XML"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[8] { id, name, xml, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateProductDetails(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Name = dt.Rows[0]["Name"] + "";
                    string Price = dt.Rows[0]["Price"] + "";
                    string Description = dt.Rows[0]["Description"] + "";
                    string Discount = dt.Rows[0]["Discount"] + "";
                    string TaxPercent = dt.Rows[0]["TaxPercent"] + "";
                    string Pimage = dt.Rows[0]["Pimage"] + "";
                    string Oimage = dt.Rows[0]["Oimage"] + "";
                    string Status = dt.Rows[0]["Status"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";
                    string Baserice = dt.Rows[0]["Baserice"] + "";
                    string ProductCategory = dt.Rows[0]["ProductCategory"] + "";
                    string ProductSubCategory = dt.Rows[0]["ProductSubCategory"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";


                    res = new string[17] { id, Name, Price, Description, Discount, TaxPercent, Pimage, Oimage, Status, Ptype, Baserice, ProductCategory, ProductSubCategory, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetProductStock(string Productid,string addstock)
        {
            string[] res = { };
            string json = "";
            try
            {
                if (addstock == "")
                {
                    addstock = "0";
                }
                //string query = "select tbl_Product_name.Id,tbl_Product_name.Productname,tbl_Product_name.Productname,tbl_Product_name.UnitType,tbl_Product_name.XML,tbl_Product_name.Brandname,tbl_Product_name.Category,tbl_productstock_all.Credit,tbl_productstock_all.Debit,tbl_productstock_all.Balance from tbl_Product_name Left join tbl_productstock_all on tbl_Product_name.Id=tbl_productstock_all.Productid where tbl_Product_name.Id='" + Productid + "'";

                string query = "select * from tbl_Product_name  where Id='" + Productid + "'";
                string pquery = "select Id,Productname,XML from tbl_Product_name where Id='" + Productid + "'";

                DataTable pdt = db.GetAllRecord(pquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Rawmaterialname", typeof(string));
                dataTable.Columns.Add("Rawmaterialid", typeof(string));
                dataTable.Columns.Add("Unittype", typeof(string));
                dataTable.Columns.Add("Quantity1p", typeof(string));
                dataTable.Columns.Add("Totalbalance", typeof(string));
                dataTable.Columns.Add("Usebalance", typeof(string));
                dataTable.Columns.Add("Balancestatus", typeof(string));

                activitylog.Activitylogins("tbl_Product_name", Productid, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Name = dt.Rows[0]["Productname"] + "";
                    string Brand = dt.Rows[0]["Brandname"] + "";
                    string XML = dt.Rows[0]["XML"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string Balance = dt.Rows[0]["Balance"] + "";

                    string jsonString = ConvertXmlToJson(XML);

                    JObject jsonObject = JObject.Parse(jsonString);
                    // Count the number of rows in the "row" array
                    int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                    for (int i = 0; i < rowCount; i++)
                    {
                        double multiqua = 0;
                        string availstatus = "";
                        // Access specific values in the JSON object
                        string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                        string rowMaterialid = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                        string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                        Double quantity = (Double)jsonObject["Data"]["tableData"]["row"][i]["column"][3];

                        multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(addstock);
                        
                        string querys = "select * from tbl_rowmeterialstock where RowMeterialId='" + rowMaterialid + "'";
                        DataTable dts = db.GetAllRecord(querys);
                        if (dts.Rows.Count > 0)
                        {
                            double rawBalance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                            double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                            if (rawBalance < multiqua)
                            {
                                availstatus = "Not Enough Balance";
                            }
                            else
                            {
                                availstatus = "Sufficient Balance";
                               
                            }

                            dataTable.Rows.Add(rowMaterial, rowMaterialid, unitType, quantity, rawBalance, multiqua, availstatus);



                            json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                        }

                    }
                    res = new string[8] { id, Name, XML, Credit, Debit, Balance, Brand, json };

                }
                else if(pdt.Rows.Count > 0)
                {
                    string id = pdt.Rows[0]["Id"] + "";
                    string Name = pdt.Rows[0]["Productname"] + "";
                    string Brand = pdt.Rows[0]["Brandname"] + "";
                    string XML = pdt.Rows[0]["XML"] + "";
                    string Credit = "0";
                    string Debit = "0";
                    string Balance = "0";

                    string jsonString = ConvertXmlToJson(XML);

                    JObject jsonObject = JObject.Parse(jsonString);
                    // Count the number of rows in the "row" array
                    int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                    for (int i = 0; i < rowCount; i++)
                    {
                        double multiqua = 0;
                        string availstatus = "";
                        // Access specific values in the JSON object
                        string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                        string rowMaterialid = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                        string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                        Double quantity = (Double)jsonObject["Data"]["tableData"]["row"][i]["column"][3];

                        multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(addstock);

                        string querys = "select * from tbl_rowmeterialstock where RowMeterialId='" + rowMaterialid + "'";
                        DataTable dts = db.GetAllRecord(querys);
                        if (dts.Rows.Count > 0)
                        {
                            double rawBalance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                            double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                            if (rawBalance < multiqua)
                            {
                                availstatus = "Not Enough Balance";
                            }
                            else
                            {
                                availstatus = "Sufficient Balance";

                            }

                            dataTable.Rows.Add(rowMaterial, rowMaterialid, unitType, quantity, rawBalance, multiqua, availstatus);



                            json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                        }

                    }
                    res = new string[8] { id, Name, XML, Credit, Debit, Balance, Brand, json };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }

                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult RowMeterialStock()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult RowMeterialStock(string hid, string crbal, string totalbal, FormCollection form)
        {
            try
            {
                if (hid != "" && hid != null)
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where Id='" + form["hid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["unittype"] + "','" + form["cr"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
                else
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where RowMeterialId='" + form["rowmeterialid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["crbal"] + "','" + form["totalbal"] + "','cr','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        //public JsonResult UpdateRowMeterialStock(int Up)
        //{
        //    string[] res = { };
        //    try
        //    {
        //        string query = "select * from tbl_rowmeterialstock where Id='" + Up + "'";
        //        DataTable dt = db.GetAllRecord(query);
        //        activitylog.Activitylogupd("Success", "");
        //        if (dt.Rows.Count > 0)
        //        {
        //            string id = dt.Rows[0]["Id"] + "";
        //            string rowmeterialid = dt.Rows[0]["RowMeterialId"] + "";
        //            string name = dt.Rows[0]["RowMeterial"] + "";
        //            string cr = dt.Rows[0]["Cr"] + "";
        //            string dr = dt.Rows[0]["Dr"] + "";
        //            string balance = dt.Rows[0]["Balance"] + "";
        //            string UnitType = dt.Rows[0]["UnitType"] + "";
        //            string brname = dt.Rows[0]["BranchName"] + "";
        //            string brcode = dt.Rows[0]["BranchCode"] + "";

        //            res = new string[9] { id, rowmeterialid, name, cr, dr, balance, UnitType, brname, brcode };

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        try
        //        {
        //            Error_15_16 error_15_16 = new Error_15_16();
        //            string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
        //            // Get the page URL, if available
        //            pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
        //            // Get the module name
        //            moduleName = ex.TargetSite.Module.Name;
        //            // Get the error line number, if available
        //            var stackTrace = ex.StackTrace;
        //            if (!string.IsNullOrEmpty(stackTrace))
        //            {
        //                var lineNumberIndex = stackTrace.LastIndexOf(":line ");
        //                if (lineNumberIndex >= 0)
        //                {
        //                    var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
        //                    var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
        //                    if (newLineIndex >= 0)
        //                    {
        //                        errorLine = lineNumber.Substring(0, newLineIndex);
        //                    }
        //                    else
        //                    {
        //                        errorLine = lineNumber;
        //                    }
        //                }
        //            }
        //            // Get the error message and name
        //            if (ex.Message.ToString().Length >= 1000)
        //            {
        //                errorMessage = ex.Message.Substring(1, 500);
        //            }
        //            else
        //            {
        //                errorMessage = ex.Message;
        //            }
        //            errorName = ex.GetType().FullName;
        //            // Get the error trace
        //            errorTrace = ex.StackTrace;
        //        }

        //        catch
        //        {

        //        }
        //    }
        //    finally
        //    {
        //        db.connectionstate();
        //    }

        //    return Json(res, JsonRequestBehavior.AllowGet);
        //}
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductStock()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductStock(FormCollection form)
        {
            string xmlData = "";
            try
            {
                if (form["hid"] != "" && form["hid"] != null)
                {
                    double multiqua = 0;
                    // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                    DataTable dataTable = new DataTable();
                    dataTable.Columns.Add("Dr", typeof(decimal));
                    dataTable.Columns.Add("Balance", typeof(decimal));
                    dataTable.Columns.Add("RowMaterial", typeof(string));
                    dataTable.Columns.Add("RawMaterialid", typeof(string));

                    string query = "select * from tbl_Product_name where id='" + form["productid"] + "'";
                    DataTable dt = db.GetAllRecord(query);

                    if (dt.Rows.Count > 0)
                    {
                        xmlData = dt.Rows[0]["XML"].ToString();
                        //DataTable dataTable = ConvertXmlToDataTable(xmlData);
                        string jsonString = ConvertXmlToJson(xmlData);

                        JObject jsonObject = JObject.Parse(jsonString);
                        // Count the number of rows in the "row" array
                        int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                        for (int i = 0; i < rowCount; i++)
                        {
                            // Access specific values in the JSON object
                            string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                            string rowMaterialid = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                            string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                            Double quantity = (Double)jsonObject["Data"]["tableData"]["row"][i]["column"][3];
                            multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

                            string querys = "select * from tbl_rowmeterialstock where RowMeterialId='" + rowMaterialid + "'";
                            DataTable dts = db.GetAllRecord(querys);
                            if (dts.Rows.Count > 0)
                            {
                                double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                                double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                                if (Balance < multiqua)
                                {
                                    ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
                                    return View();
                                }
                                else
                                {
                                    Dr = Dr + multiqua;
                                    Balance = Balance - multiqua;
                                    string rowMaterialname = rowMaterial;
                                    string Rawmaterialid = rowMaterialid;
                                    // Add some sample data to the DataTable
                                    dataTable.Rows.Add(Dr, Balance, rowMaterialname, Rawmaterialid);

                                }
                            }

                        }

                        double ocredit = Convert.ToDouble(form["credit"]);
                        double oavailbal = Convert.ToDouble(form["availbal"]);
                        double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
                        double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);

                        //string upsquery = "update tbl_productstock_all set Brandname='"+ form["brandname"] + "', Productname='" + form["productname"] + "', Credit ='" + Add_stock + "',Balance ='" + Add_balance + "' where Productid='" + form["hid"] + "'";
                        string upsquery = "update tbl_Product_name set Credit ='" + Add_stock + "',Balance ='" + Add_balance + "' where id='" + form["hid"] + "'";
                        if (db.InsertUpdateDelete(upsquery))
                        {
                            string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            if (db.InsertUpdateDelete(query2))
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                for (int ri = 0; ri < dataTable.Rows.Count; ri++)
                                {
                                    string ruquery = "update tbl_rowmeterialstock set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterialId='" + dataTable.Rows[ri]["RawMaterialid"] + "'";

                                    if (db.InsertUpdateDelete(ruquery))
                                    {
                                        DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterialId='" + dataTable.Rows[ri]["RawMaterialid"] + "'");

                                        string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + multiqua + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                        if (db.InsertUpdateDelete(query2r))
                                        {
                                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                            ViewBag.msg = "Stock Added";
                                        }
                                        else
                                        {
                                            activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                            ViewBag.msg = "Stock not Added";
                                        }
                                    }
                                    else
                                    {
                                        ViewBag.msg = "Stock not Added";
                                    }
                                }
                                ViewBag.msg = "Stock Added";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                ViewBag.msg = "Stock not Added";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Stock not Added";
                        }

                    }
                }
                else
                {
                    double multiqua = 0;
                    // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                    DataTable dataTable = new DataTable();
                    dataTable.Columns.Add("Dr", typeof(decimal));
                    dataTable.Columns.Add("Balance", typeof(decimal));
                    dataTable.Columns.Add("RowMaterial", typeof(string));
                    dataTable.Columns.Add("RawMaterialid", typeof(string));

                    string query = "select * from tbl_Product_name where id='" + form["productid"] + "'";
                    DataTable dt = db.GetAllRecord(query);

                    if (dt.Rows.Count > 0)
                    {
                        xmlData = dt.Rows[0]["XML"].ToString();
                        //DataTable dataTable = ConvertXmlToDataTable(xmlData);
                        string jsonString = ConvertXmlToJson(xmlData);

                        JObject jsonObject = JObject.Parse(jsonString);
                        // Count the number of rows in the "row" array
                        int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
                        for (int i = 0; i < rowCount; i++)
                        {
                            // Access specific values in the JSON object
                            string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
                            string rowMaterialid = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
                            string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
                            Double quantity = (Double)jsonObject["Data"]["tableData"]["row"][i]["column"][3];
                            multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

                            string querys = "select * from tbl_rowmeterialstock where RowMeterial='" + rowMaterial + "'";
                            DataTable dts = db.GetAllRecord(querys);
                            if (dts.Rows.Count > 0)
                            {
                                double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
                                double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
                                if (Balance < multiqua)
                                {
                                    ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
                                    return View();
                                }
                                else
                                {
                                    Dr = Dr + multiqua;
                                    Balance = Balance - multiqua;
                                    string rowMaterialname = rowMaterial;
                                    string Rawmaterialid = rowMaterialid;
                                    // Add some sample data to the DataTable
                                    dataTable.Rows.Add(Dr, Balance, rowMaterialname, Rawmaterialid);

                                }
                            }

                        }

                        //string upsquery = "insert into tbl_productstock_all(Brandname,Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname) values('" + form["brandname"] + "', '" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','0','" + form["addstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "')";
                        string upsquery = "update tbl_productstock_all set logid='" + Session["suid"] + "'";
                        if (db.InsertUpdateDelete(upsquery))
                        {
                            string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

                            if (db.InsertUpdateDelete(query2))
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                for (int ri = 0; ri < dataTable.Rows.Count; ri++)
                                {
                                    string ruquery = "update  set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterialId='" + dataTable.Rows[ri]["RawMaterialid"] + "'";

                                    if (db.InsertUpdateDelete(ruquery))
                                    {
                                        DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterialId='" + dataTable.Rows[ri]["RawMaterialid"] + "'");

                                        string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + multiqua + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                        if (db.InsertUpdateDelete(query2r))
                                        {
                                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                            ViewBag.msg = "Stock Added";
                                        }
                                        else
                                        {
                                            activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                            ViewBag.msg = "Stock not Added";
                                        }
                                    }
                                    else
                                    {
                                        ViewBag.msg = "Stock not Added";
                                    }
                                }
                                ViewBag.msg = "Stock Added";
                            }
                            else
                            {
                                activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                ViewBag.msg = "Stock not Added";
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Stock not Added";
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetProductstockdetail(string Productid)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_pro_price_circlar where proid='" + Productid + "'";
                activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }







        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult MCompany()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult MCompany(string hid, string go, string status,string companyprefix)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_mcompany set CompanyName='" + go + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Companyprefix= '"+ companyprefix + "' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_mcompany", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        db.InsertUpdateDelete("update tbl_branch set Companyname='" + go + "' ,Companyprefix='" + companyprefix + "' where Companyid='" + hid + "'");
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_mcompany", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_mcompany where CompanyName='" + go + "'";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Company Already Created";
                    }
                    else
                    {
                        string query = "insert into tbl_mcompany(CompanyName,Companyprefix,Status,Logname,Logid,Date_time) values('" + go + "','" + companyprefix + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                        if (db.InsertUpdateDelete(query))
                        {
                            
                            activitylog.Activitylogins("tbl_mcompany", db.getmaxid("tbl_mcompany").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_mcompany", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateMCompany(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_mcompany where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_mcompany", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["CompanyName"] + "";
                    string prefix = dt.Rows[0]["Companyprefix"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";

                    res = new string[6] { id, name, status, companyname, companyid, prefix };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult GodownName()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult GodownName(string hid, string go, string status)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_godown set GodownName='" + go + "',Status='" + status + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName= '',BranchCode='' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        db.InsertUpdateDelete("update tbl_branch set Yardname='" + go + "' where  Yardrowid='" + hid + "'");
                        activitylog.Activitylogins("tbl_godown", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_godown", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_godown where GodownName='" + go + "' and BranchCode=''";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Godown Name Already Exist";
                    }
                    else
                    {
                        string godownid = "G_" + random(5);
                        string query = "insert into tbl_godown(GodownId,GodownName,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('"+ godownid + "','" + go + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_godown", db.getmaxid("tbl_godown").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_godown", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateGodownName(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_godown where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_godown", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["GodownName"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[7] { id, name, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult RawMaterialStock()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult RawMaterialStock(string hid, string crbal, string totalbal, FormCollection form)
        {
            try
            {
                if (hid != "" && hid != null)
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where Id='" + form["hid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["unittype"] + "','" + form["cr"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
                else
                {
                    double add_S = Convert.ToDouble(crbal);
                    double Bl = Convert.ToDouble(totalbal);
                    double Add_stock = add_S + Convert.ToDouble(form["cr"]);
                    double Add_balance = Bl + Convert.ToDouble(form["cr"]);

                    string query = "update tbl_rowmeterialstock set Cr='" + Add_stock + "',Balance='" + Add_balance + "' where RowMeterialId='" + form["rowmeterialid"] + "'";

                    if (db.InsertUpdateDelete(query))
                    {
                        string query2 = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode) values('" + form["rowmeterialid"] + "','" + form["rowmeterial"] + "','" + form["crbal"] + "','" + form["totalbal"] + "','cr','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query2))
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            ViewBag.msg = "Stock Added";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Stock not Added";
                        }
                    }
                    else
                    {
                        ViewBag.msg = "Stock not Added";
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateRawMaterialStock(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_rowmeterialstock where Id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string rowmeterialid = dt.Rows[0]["RowMeterialId"] + "";
                    string name = dt.Rows[0]["RowMeterial"] + "";
                    string cr = dt.Rows[0]["Cr"] + "";
                    string dr = dt.Rows[0]["Dr"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string UnitType = dt.Rows[0]["UnitType"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, rowmeterialid, name, cr, dr, balance, UnitType, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult RowMeterialTRStock(string Id, string Type)
        {
            string res = "";
            try
            {
                string type = "";

                if (Type == "CR")
                {
                    type = "Cr.";
                }
                else
                {
                    type = "Dr.";
                }
                string query = "select * from tbl_row_transeaction where RowMeterialId='" + Id + "' and Ttype='" + type + "'";
                activitylog.Activitylogins("tbl_row_transeaction", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult UpdateProductStock(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select tbl_productstock.Id,tbl_productstock.Productid,tbl_productstock.Productname,tbl_productstock.Credit,tbl_productstock.Debit,tbl_productstock.Balance,tbl_product.Ptype from tbl_productstock left join tbl_Product on tbl_productstock.Productid=tbl_Product.Id  where Productid='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string Productid = dt.Rows[0]["Productid"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string Ptype = dt.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetAllProductStock(string Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_Product_name where id='" + Up + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    //DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = dt.Rows[0]["Id"] + "";
                    string Productid = dt.Rows[0]["Id"] + "";
                    string Productname = dt.Rows[0]["Productname"] + "";
                    string Credit = dt.Rows[0]["Credit"] + "";
                    string Debit = dt.Rows[0]["Debit"] + "";
                    string balance = dt.Rows[0]["Balance"] + "";
                    string Ptype = "";
                    //string Ptype =dt.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductDetails()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductDetails(string hid, FormCollection form, HttpPostedFileBase productprimg, IEnumerable<HttpPostedFileBase> productothimg)
        {
            string pimgpth = "", oimgpth = "";

            try
            {
                if (hid != "" && hid != null)
                {
                    if (form["selproductnm"] != "Other")
                    {
                        form["selproductnm"] = "Self";
                    }
                    if (productprimg != null)
                    {
                        string primage = Path.Combine(Server.MapPath("~/Content/ProductImage"), productprimg.FileName);
                        productprimg.SaveAs(primage);
                        pimgpth = "Content/ProductImage/" + productprimg.FileName;

                    }
                    else
                    {
                        pimgpth = form["pimage"];
                    }

                    foreach (var file in productothimg)
                    {
                        if (file != null && file.ContentLength > 0)
                        {
                            string otimage = Path.Combine(Server.MapPath("~/Content/ProductImage"), file.FileName);
                            file.SaveAs(otimage);
                            oimgpth += "Content/ProductImage/" + file.FileName + ",";
                        }
                        else
                        {
                            oimgpth = form["oimage"];
                        }
                    }
                    string query = "update tbl_product set Ptype='" + form["selproductnm"] + "',Name='" + form["productnm"] + "',Description='" + form["description"] + "',Price='" + form["productprice"] + "',Baserice='" + form["baseprice"] + "',Discount='" + form["productdisc"] + "',TaxPercent='" + form["taxpercent"] + "',ProductCategory='" + form["category"] + "',ProductSubCategory='" + form["subcategory"] + "',Pimage='" + pimgpth + "',Oimage='" + oimgpth + "',Status='" + form["status"] + "',logid='" + Session["suid"] + "',logname='" + Session["suname"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='',BranchCode='' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_product", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                        string squery = "update tbl_productstock set Productname='" + form["productnm"] + "',logid='" + Session["suid"] + "',logname='" + Session["suname"] + "',Datetime='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Productid='" + hid + "' and BranchCode=''";

                        if (db.InsertUpdateDelete(squery))
                        {
                            activitylog.Activitylogins("tbl_productstock", hid, squery, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Updated";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_productstock", hid, squery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Update Failed";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_product where Name='" + form["productnm"] + "' and BranchCode=''";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Already Exist";
                    }
                    else
                    {
                        if (form["selproductnm"] != "Other")
                        {
                            form["selproductnm"] = "Self";
                        }
                        if (productprimg != null)
                        {
                            string primage = Path.Combine(Server.MapPath("~/Content/ProductImage"), productprimg.FileName);
                            productprimg.SaveAs(primage);
                            pimgpth = "Content/ProductImage/" + productprimg.FileName;

                        }
                        foreach (var file in productothimg)
                        {
                            if (file != null && file.ContentLength > 0)
                            {
                                string otimage = Path.Combine(Server.MapPath("~/Content/ProductImage"), file.FileName);
                                file.SaveAs(otimage);
                                oimgpth += "Content/ProductImage/" + file.FileName + ",";
                            }
                        }
                        string query = "insert into tbl_product(Ptype,Name,Description,Price,Discount,TaxPercent,ProductCategory,ProductSubCategory,Pimage,Oimage,Status,logid,logname,Datetime,Baserice,BranchName,BranchCode) values('" + form["selproductnm"] + "','" + form["productnm"] + "','" + form["description"] + "','" + form["productprice"] + "','" + form["productdisc"] + "','" + form["taxpercent"] + "','" + form["category"] + "','" + form["subcategory"] + "','" + pimgpth + "','" + oimgpth + "','Active','" + Session["suid"] + "','" + Session["suname"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["baseprice"] + "','','')";

                        if (db.InsertUpdateDelete(query))
                        {
                            //string squery = "insert into tbl_productstock(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname,BranchName,BranchCode) values('" + db.getmaxid("tbl_product") + "','" + form["productnm"] + "','0','0','0','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "','','')";

                            ViewBag.msg = "Data Saved";

                            activitylog.Activitylogins("tbl_product", db.getmaxid("tbl_product").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                            //if (db.InsertUpdateDelete(squery))
                            //{
                            //    activitylog.Activitylogins("tbl_productstock", db.getmaxid("tbl_productstock").ToString(), squery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            //    ViewBag.msg = "Data Saved";
                            //}
                            //else
                            //{
                            //    activitylog.Activitylogins("tbl_productstock", "", squery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            //    ViewBag.msg = "Data Save Failed";
                            //}

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_product", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetProductSubCategory(string Category)
        {
            string res = "";
            try
            {
                res = "<option selected disabled value=''>Select one</option>";
                string query = "select * from tbl_pro_subcategory where ProCategory='" + Category + "' and Status='Active'";
                activitylog.Activitylogins("tbl_pro_subcategory", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["Status"] + "" == "Active")
                        {
                            res += "<option value='" + dt.Rows[i]["ProSubCategory"] + "'>" + dt.Rows[i]["ProSubCategory"] + "</option>";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        //[OutputCache(CacheProfile = "NoCache")]
        //public ActionResult ProductStock()
        //{
        //    string id = Session["suid"] + "";
        //    if (id != null && id != "")
        //    {

        //    }
        //    else
        //    {
        //        Response.Redirect("/Home/Login");
        //    }
        //    return View();
        //}
        //[HttpPost]
        //public ActionResult ProductStock(FormCollection form)
        //{
        //    string xmlData = "";
        //    try
        //    {
        //        if (form["hid"] != "" && form["hid"] != null)
        //        {
        //            if (form["protype"] == "Self")
        //            {
        //                double ocredit = Convert.ToDouble(form["credit"]);
        //                double oavailbal = Convert.ToDouble(form["availbal"]);
        //                double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
        //                double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);
        //                string query = "update tbl_productstock_all set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

        //                if (db.InsertUpdateDelete(query))
        //                {
        //                    string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','','" + form["godownname"] + "','" + form["godownid"] + "')";
        //                    if (db.InsertUpdateDelete(query2))
        //                    {
        //                        activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                        ViewBag.msg = "Stock Added";
        //                    }
        //                    else
        //                    {
        //                        activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                        ViewBag.msg = "Stock not Added";
        //                    }
        //                }
        //                else
        //                {
        //                    ViewBag.msg = "Stock not Added";
        //                }
        //            }
        //            else
        //            {
        //                double multiqua = 0;
        //                   // Sample DataTable with columns "Dr," "Balance," and "Row Material"
        //                   DataTable dataTable = new DataTable();
        //                dataTable.Columns.Add("Dr", typeof(decimal));
        //                dataTable.Columns.Add("Balance", typeof(decimal));
        //                dataTable.Columns.Add("RowMaterial", typeof(string));

        //                string query = "select * from tbl_Product_name where Productname='" + form["productname"] + "'";
        //                DataTable dt = db.GetAllRecord(query);

        //                if (dt.Rows.Count > 0)
        //                {
        //                    xmlData = dt.Rows[0]["XML"].ToString();
        //                    //DataTable dataTable = ConvertXmlToDataTable(xmlData);
        //                    string jsonString = ConvertXmlToJson(xmlData);

        //                    JObject jsonObject = JObject.Parse(jsonString);
        //                    // Count the number of rows in the "row" array
        //                    int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
        //                    for (int i = 0; i < rowCount; i++)
        //                    {
        //                        // Access specific values in the JSON object
        //                        string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
        //                        string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
        //                        int quantity = (int)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
        //                        multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

        //                        string querys = "select * from tbl_rowmeterialstock where RowMeterial='" + rowMaterial + "'";
        //                        DataTable dts = db.GetAllRecord(querys);
        //                        if (dts.Rows.Count > 0)
        //                        {
        //                            double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
        //                            double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
        //                            if (Balance < multiqua)
        //                            {
        //                                ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
        //                                return View();
        //                            }
        //                            else
        //                            {
        //                                Dr = Dr + multiqua;
        //                                Balance = Balance - multiqua;
        //                                string rowMaterialname = rowMaterial;
        //                                // Add some sample data to the DataTable
        //                                dataTable.Rows.Add(Dr, Balance, rowMaterialname);

        //                            }
        //                        }

        //                    }
        //                    //// Access specific values in the JSON object
        //                    //string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][0];
        //                    //string unitType = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][1];
        //                    //int quantity = (int)jsonObject["Data"]["tableData"]["row"][1]["column"][2];


        //                    double ocredit = Convert.ToDouble(form["credit"]);
        //                    double oavailbal = Convert.ToDouble(form["availbal"]);
        //                    double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
        //                    double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);

        //                    string upsquery = "update tbl_productstock_all set Credit = '" + Add_stock + "',Balance = '" + Add_balance + "' where id = '" + form["hid"] + "'";

        //                    if (db.InsertUpdateDelete(upsquery))
        //                    {
        //                        string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

        //                        if (db.InsertUpdateDelete(query2))
        //                        {
        //                            activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

        //                            for (int ri = 0; ri < dataTable.Rows.Count; ri++)
        //                            {
        //                                string ruquery = "update tbl_rowmeterialstock set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'";

        //                                if (db.InsertUpdateDelete(ruquery))
        //                                {
        //                                    DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'");

        //                                    string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + multiqua + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
        //                                    if (db.InsertUpdateDelete(query2r))
        //                                    {
        //                                        activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

        //                                        ViewBag.msg = "Stock Added";
        //                                    }
        //                                    else
        //                                    {
        //                                        activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                                
        //                                        ViewBag.msg = "Stock not Added";
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    ViewBag.msg = "Stock not Added";
        //                                }
        //                            }
        //                            ViewBag.msg = "Stock Added";
        //                        }
        //                        else
        //                        {
        //                            activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                            ViewBag.msg = "Stock not Added";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        ViewBag.msg = "Stock not Added";
        //                    }

        //                }
        //            }
        //        }
        //        else
        //        {
        //            if (form["protype"] == "Self")
        //            {
        //                //double ocredit = Convert.ToDouble(form["credit"]);
        //                //double oavailbal = Convert.ToDouble(form["availbal"]);
        //                //double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
        //                //double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);
        //                //string query = "update tbl_productstock set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

        //                string query = "insert into tbl_productstock_all(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname) values('" + form["productid"] + "','" + form["productname"] + "','"+ form["addstock"] + "','0','"+ form["addstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "')";

        //                if (db.InsertUpdateDelete(query))
        //                {
        //                    string query2 = "insert into tbl_producttransaction_all(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
        //                    if (db.InsertUpdateDelete(query2))
        //                    {
        //                        activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                        ViewBag.msg = "Stock Added";
        //                    }
        //                    else
        //                    {
        //                        activitylog.Activitylogins("tbl_producttransaction_all", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                        ViewBag.msg = "Stock not Added";
        //                    }
        //                }
        //                else
        //                {
        //                    ViewBag.msg = "Stock not Added";
        //                }
        //            }
        //            else
        //            {
        //                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
        //                DataTable dataTable = new DataTable();
        //                dataTable.Columns.Add("Dr", typeof(decimal));
        //                dataTable.Columns.Add("Balance", typeof(decimal));
        //                dataTable.Columns.Add("RowMaterial", typeof(string));

        //                string query = "select * from tbl_Product_name where Productname='" + form["productname"] + "'";
        //                DataTable dt = db.GetAllRecord(query);

        //                if (dt.Rows.Count > 0)
        //                {
        //                    xmlData = dt.Rows[0]["XML"].ToString();
        //                    //DataTable dataTable = ConvertXmlToDataTable(xmlData);
        //                    string jsonString = ConvertXmlToJson(xmlData);

        //                    JObject jsonObject = JObject.Parse(jsonString);
        //                    // Count the number of rows in the "row" array
        //                    int rowCount = jsonObject["Data"]["tableData"]["row"].Count();
        //                    for (int i = 0; i < rowCount; i++)
        //                    {
        //                        // Access specific values in the JSON object
        //                        string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][0];
        //                        string unitType = (string)jsonObject["Data"]["tableData"]["row"][i]["column"][1];
        //                        int quantity = (int)jsonObject["Data"]["tableData"]["row"][i]["column"][2];
        //                        double multiqua = Convert.ToDouble(quantity) * Convert.ToDouble(form["addstock"]);

        //                        string querys = "select * from tbl_rowmeterialstock where RowMeterial='" + rowMaterial + "'";
        //                        DataTable dts = db.GetAllRecord(querys);
        //                        if (dts.Rows.Count > 0)
        //                        {
        //                            double Balance = Convert.ToDouble(dts.Rows[0]["Balance"]);
        //                            double Dr = Convert.ToDouble(dts.Rows[0]["Dr"]);
        //                            if (Balance < multiqua)
        //                            {
        //                                ViewBag.msg = "You have not Enough Raw Material Quantity of " + rowMaterial + "";
        //                                return View();
        //                            }
        //                            else
        //                            {
        //                                Dr = Dr + multiqua;
        //                                Balance = Balance - multiqua;
        //                                string rowMaterialname = rowMaterial;
        //                                // Add some sample data to the DataTable
        //                                dataTable.Rows.Add(Dr, Balance, rowMaterialname);

        //                            }
        //                        }

        //                    }
        //                    //// Access specific values in the JSON object
        //                    //string rowMaterial = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][0];
        //                    //string unitType = (string)jsonObject["Data"]["tableData"]["row"][1]["column"][1];
        //                    //int quantity = (int)jsonObject["Data"]["tableData"]["row"][1]["column"][2];


        //                    //double ocredit = Convert.ToDouble(form["credit"]);
        //                    //double oavailbal = Convert.ToDouble(form["availbal"]);
        //                    //double Add_stock = ocredit + Convert.ToDouble(form["addstock"]);
        //                    //double Add_balance = oavailbal + Convert.ToDouble(form["addstock"]);

        //                    //string upsquery = "update tbl_productstock set Credit='" + Add_stock + "',Balance='" + Add_balance + "' where Productid='" + form["hid"] + "'";

        //                    string upsquery = "insert into tbl_productstock_all(Productid,Productname,Credit,Debit,Balance,Datetime,logid,logname) values('" + form["productid"] + "','" + form["productname"] + "','" + form["addstock"] + "','0','" + form["addstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "')";

        //                    if (db.InsertUpdateDelete(upsquery))
        //                    {
        //                        string query2 = "insert into tbl_producttransaction_all(ProductId, ProductName, Quntity, Ttype, logname, logid, Date_time) values('" + form["productid"] + "', '" + form["productname"] + "', '" + form["addstock"] + "', 'Cr.', '" + Session["suname"] + "', '" + Session["suid"] + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";

        //                        if (db.InsertUpdateDelete(query2))
        //                        {
        //                            activitylog.Activitylogins("tbl_producttransaction_all", db.getmaxid("tbl_producttransaction_all").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

        //                            for (int ri = 0; ri < dataTable.Rows.Count; ri++)
        //                            {
        //                                string ruquery = "update tbl_rowmeterialstock set Dr='" + dataTable.Rows[ri]["Dr"] + "',Balance='" + dataTable.Rows[ri]["Balance"] + "' where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'";

        //                                if (db.InsertUpdateDelete(ruquery))
        //                                {
        //                                    DataTable dtsr = db.GetAllRecord("select * from tbl_rowmeterialstock where RowMeterial='" + dataTable.Rows[ri]["RowMaterial"] + "'");

        //                                    string query2r = "insert into tbl_row_transeaction(RowMeterialId,RowMeterial,Unit,Quntity,Ttype,logname,logid,Date_time) values('" + dtsr.Rows[0]["RowMeterialId"] + "','" + dtsr.Rows[0]["RowMeterial"] + "','" + dtsr.Rows[0]["UnitType"] + "','" + dataTable.Rows[ri]["Dr"] + "','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
        //                                    if (db.InsertUpdateDelete(query2r))
        //                                    {
        //                                        activitylog.Activitylogins("tbl_row_transeaction", db.getmaxid("tbl_row_transeaction").ToString(), query2, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

        //                                        ViewBag.msg = "Stock Added";
        //                                    }
        //                                    else
        //                                    {
        //                                        activitylog.Activitylogins("tbl_row_transeaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                                        ViewBag.msg = "Stock not Added";
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    ViewBag.msg = "Stock not Added";
        //                                }
        //                            }
        //                            ViewBag.msg = "Stock Added";
        //                        }
        //                        else
        //                        {
        //                            activitylog.Activitylogins("tbl_producttransaction", "", query2, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //                            ViewBag.msg = "Stock not Added";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        ViewBag.msg = "Stock not Added";
        //                    }

        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        try
        //        {
        //            Error_15_16 error_15_16 = new Error_15_16();
        //            string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
        //            // Get the page URL, if available
        //            pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
        //            // Get the module name
        //            moduleName = ex.TargetSite.Module.Name;
        //            // Get the error line number, if available
        //            var stackTrace = ex.StackTrace;
        //            if (!string.IsNullOrEmpty(stackTrace))
        //            {
        //                var lineNumberIndex = stackTrace.LastIndexOf(":line ");
        //                if (lineNumberIndex >= 0)
        //                {
        //                    var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
        //                    var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
        //                    if (newLineIndex >= 0)
        //                    {
        //                        errorLine = lineNumber.Substring(0, newLineIndex);
        //                    }
        //                    else
        //                    {
        //                        errorLine = lineNumber;
        //                    }
        //                }
        //            }
        //            // Get the error message and name
        //            if (ex.Message.ToString().Length >= 1000)
        //            {
        //                errorMessage = ex.Message.Substring(1, 500);
        //            }
        //            else
        //            {
        //                errorMessage = ex.Message;
        //            }
        //            errorName = ex.GetType().FullName;
        //            // Get the error trace
        //            errorTrace = ex.StackTrace;
        //            error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
        //        }
        //        catch
        //        {
        //        }
        //        ViewBag.msg = "Error";
        //    }
        //    finally
        //    {
        //        db.connectionstate();
        //    }
        //    return View();
        //}
        public DataTable ConvertXmlToDataTable(string xmlString)
        {
            DataTable dataTable = new DataTable();
            try
            {
                using (XmlReader reader = XmlReader.Create(new System.IO.StringReader(xmlString)))
                {
                    string currentElementName = null;

                    while (reader.Read())
                    {
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            currentElementName = reader.Name;

                            if (currentElementName == "heading")
                            {
                                string columnName = reader.ReadElementContentAsString();
                                dataTable.Columns.Add(columnName);
                            }
                            else if (currentElementName == "row")
                            {
                                DataRow row = dataTable.NewRow();
                                int columnIndex = 0;

                                while (reader.ReadToFollowing("column"))
                                {
                                    if (reader.NodeType == XmlNodeType.Element)
                                    {
                                        string columnValue = reader.ReadElementContentAsString();
                                        if (columnIndex < dataTable.Columns.Count)
                                        {
                                            row[columnIndex] = columnValue;
                                        }
                                        columnIndex++;
                                    }
                                }
                                dataTable.Rows.Add(row);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                dataTable = null;
            }
            finally
            {
                db.connectionstate();
            }
            return dataTable;
        }
        public string ConvertXmlToJson(string xmlString)
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(xmlString);

                // Convert XML to JSON using Newtonsoft.Json
                string jsonText = JsonConvert.SerializeXmlNode(doc, Newtonsoft.Json.Formatting.Indented);

                // Convert the JSON string to JObject and extract the relevant part
                JObject jsonObject = JObject.Parse(jsonText);
                JToken dataToken = jsonObject["Data"]["tableData"]["row"];

                // If there are multiple rows, we want it as an array
                if (dataToken is JArray)
                {
                    jsonObject["Data"]["tableData"]["row"] = dataToken;
                }
                else
                {
                    // If there's only one row, wrap it in an array
                    JArray jsonArray = new JArray();
                    jsonArray.Add(dataToken);
                    jsonObject["Data"]["tableData"]["row"] = jsonArray;
                }

                return jsonObject.ToString();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return "";
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductCategory()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductCategory(string hid, FormCollection form)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_product_category set ProductCategory='" + form["category"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='',BranchCode='' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_product_category", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product_category", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_product_category where ProductCategory='" + form["category"] + "' and BranchCode=''";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Category Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_product_category(ProductCategory,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + form["category"] + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_product_category", db.getmaxid("tbl_product_category").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_product_category", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateProductCategory(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_product_category where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_product_category", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProductCategory"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[7] { id, name, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ProductSubCategory()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult ProductSubCategory(string hid, FormCollection form)
        {
            string userid = Session["suid"] + "";
            string username = Session["suname"] + "";
            try
            {
                if (hid != "" && hid != null)
                {
                    string query = "update tbl_pro_subcategory set ProCategory='" + form["category"] + "',ProCategoryid='" + form["categoryid"] + "',ProSubCategory='" + form["subcategory"] + "',Status='" + form["status"] + "',Date_time='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',BranchName='',BranchCode='' where Id='" + hid + "'";
                    if (db.InsertUpdateDelete(query))
                    {
                        activitylog.Activitylogins("tbl_pro_subcategory", hid, query, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_pro_subcategory", hid, query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Update Failed";
                    }
                }
                else
                {
                    string selquery = "select * from tbl_pro_subcategory where ProCategory='"+form["category"] + "' and  ProSubCategory='" + form["subcategory"] + "' and BranchCode=''";
                    DataTable dt = db.GetAllRecord(selquery);
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.msg = "This Product Sub Category Already Exist";
                    }
                    else
                    {
                        string query = "insert into tbl_pro_subcategory(ProCategory,ProCategoryid,ProSubCategory,Status,Logname,Logid,Date_time,BranchName,BranchCode) values('" + form["category"] + "','" + form["categoryid"] + "','" + form["subcategory"] + "','Active','" + username + "','" + userid + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','','')";
                        if (db.InsertUpdateDelete(query))
                        {
                            activitylog.Activitylogins("tbl_pro_subcategory", db.getmaxid("tbl_pro_subcategory").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Saved";
                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_pro_subcategory", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Data Save Failed";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult UpdateProSubCategory(int Up)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_pro_subcategory where Id='" + Up + "'";
                activitylog.Activitylogins("tbl_pro_subcategory", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    string id = dt.Rows[0]["Id"] + "";
                    string name = dt.Rows[0]["ProCategory"] + "";
                    string catid = dt.Rows[0]["ProCategoryid"] + "";
                    string subcate = dt.Rows[0]["ProSubCategory"] + "";
                    string status = dt.Rows[0]["Status"] + "";
                    string companyname = dt.Rows[0]["logname"] + "";
                    string companyid = dt.Rows[0]["logid"] + "";
                    string brname = dt.Rows[0]["BranchName"] + "";
                    string brcode = dt.Rows[0]["BranchCode"] + "";

                    res = new string[9] { id, name,catid,subcate, status, companyname, companyid, brname, brcode };

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }








        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult StockDistribution()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult StockDistribution(FormCollection form)
        {
            try
            {
                string Productid = form["aproductid"];
                string quantity = form["aquantity"];
                string abranchcode = form["abranchcode"];
                string abranchname = form["abranchname"];

                string reqquery = "select * from tbl_product_distribution where Requestid='" + form["requestid"] + "' and Status='Active'";
                DataTable reqdt = db.GetAllRecord(reqquery);
                if (reqdt.Rows.Count > 0)
                {
                    string reqiquery = "INSERT INTO [dbo].[tbl_product_distribution] ([Requestid],[ProductId] ,[ProductBrandName] ,[ProductName] ,[Quntity] ,[Unit_type] ,[RequestProductQuantity] ,[Remark] ,[BranchName] ,[BranchCode] ,[RequestStatus] ,[Status] ,[Logname] ,[Logid] ,[Date_time],Yardid,Yardname,Yardrowid) VALUES ('" + form["requestid"] + "','" + reqdt.Rows[0]["ProductId"] + "','" + reqdt.Rows[0]["ProductBrandName"] + "','" + reqdt.Rows[0]["ProductName"] + "','" + reqdt.Rows[0]["Quntity"] + "','" + reqdt.Rows[0]["Unit_type"] + "','" + reqdt.Rows[0]["RequestProductQuantity"] + "','" + form["remark"] + "','" + abranchname + "','" + abranchcode + "','"+ form["status"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";

                    db.InsertUpdateDelete("update tbl_product_distribution set Status='Inactive' where Requestid='" + form["requestid"] + "'");

                    if (db.InsertUpdateDelete(reqiquery))
                    {
                        activitylog.Activitylogins("tbl_product_distribution", db.getmaxid("tbl_product_distribution").ToString(), reqiquery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Request Approved";

                        string upquery = "";
                        //Stock Transaction query Stock table
                        string query2 = "insert into tbl_producttransaction(ProductId,ProductName,Quntity,Ttype,logname,logid,Date_time,BranchName,BranchCode,Yardid,Yardname,Yardrowid) values('" + form["aproductid"] + "','" + form["aproductname"] + "','" + form["aaddstock"] + "','Cr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + abranchname + "','" + abranchcode + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";

                        //Stock Transaction query

                        string query = "select * from tbl_productstock where Productid='" + Productid + "' and Productquantity='" + quantity + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";
                        DataTable dt = db.GetAllRecord(query);
                        if (dt.Rows.Count > 0)
                        {
                            string credit = dt.Rows[0]["Credit"] + "";
                            string balance = dt.Rows[0]["Balance"] + "";
                            double allcredit = Convert.ToDouble(credit) + Convert.ToDouble(form["aaddstock"]);
                            double allbalance = Convert.ToDouble(balance) + Convert.ToDouble(form["aaddstock"]);
                            upquery = "update tbl_productstock set Credit='" + allcredit + "', Balance='" + allbalance + "' where Productid='" + Productid + "' and Productquantity='" + quantity + "' and Yardid='" + reqdt.Rows[0]["Yardid"] + "'";


                            //Update product Stock

                        }
                        else
                        {
                            //Insert product Stock
                            upquery = "insert into tbl_productstock([Productid] ,Brandname,[Productname] ,[Credit] ,[Debit] ,[Balance] ,[Datetime] ,[logid] ,[logname] ,[BranchName] ,[BranchCode] ,[Status],Productquantity,unittype,Yardid,Yardname,Yardrowid) values('" + form["aproductid"] + "','" + form["aproductbrandname"] + "','" + form["aproductname"] + "','" + form["aaddstock"] + "','0','" + form["aaddstock"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suid"] + "','" + Session["suname"] + "','" + abranchname + "','" + abranchcode + "','Active','"+ quantity + "','"+ form["aunittype"] + "','" + reqdt.Rows[0]["Yardid"] + "','" + reqdt.Rows[0]["Yardname"] + "','" + reqdt.Rows[0]["Yardrowid"] + "')";
                        }

                        if (db.InsertUpdateDelete(upquery))
                        {
                            activitylog.Activitylogins("tbl_productstock", db.getmaxid("tbl_productstock").ToString(), upquery, "Success", "Insert/Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Request Approved";

                            db.InsertUpdateDelete(query2);

                            string proquery = "select * from tbl_pro_price_circlar where Id='"+ Productid + "'";
                            DataTable prodt = db.GetAllRecord(proquery);
                            if (prodt.Rows.Count > 0)
                            {
                                string proused= prodt.Rows[0]["Used_stock"] + "";
                                string probalance = prodt.Rows[0]["Balance_stock"] + "";
                                double proallused = Convert.ToDouble(proused) + Convert.ToDouble(form["aaddstock"]);
                                double proallbalance = Convert.ToDouble(probalance) - Convert.ToDouble(form["aaddstock"]);
                                string proupquery= "update tbl_pro_price_circlar set Used_stock='"+ proallused + "', Balance_stock='"+ proallbalance + "' where Id='" + Productid + "'";
                                if (db.InsertUpdateDelete(proupquery))
                                {
                                    string query21 = "insert into [tbl_producttransaction_finish](ProductId,[ProductName],[Brandname],[Quntity],[Unittype],Ttype,logname,logid,Date_time,totaluseproquantity) values('" + Productid + "','" + form["aproductname"] + "','" + form["aproductbrandname"] + "','" + form["aaddstock"] + "','','Dr.','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','')";

                                    db.InsertUpdateDelete(query21);
                                    activitylog.Activitylogins("tbl_pro_price_circlar", Productid, proupquery, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    ViewBag.msg = "Request Approved";
                                }
                                else {
                                    activitylog.Activitylogins("tbl_pro_price_circlar", Productid, proupquery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    ViewBag.msg = "Request Not Approved";
                                }
                            }
                             

                        }
                        else
                        {
                            activitylog.Activitylogins("tbl_productstock", db.getmaxid("tbl_productstock").ToString(), upquery, "Failed", "Insert/Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                            ViewBag.msg = "Request Not Approved";
                        }


                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_product_distribution", "", reqiquery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Request Not Approved";
                    }
                }
                else
                {
                    ViewBag.msg = "Request Not Found";
                }


            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {
                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetAllProductFinishStock(string Proid,string quantity)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_pro_price_circlar  where Id='" + Proid + "' and Quantity='"+quantity+"'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    //DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = "";
                    string Productid = "";
                    string Productname = "";
                    string Credit = "";
                    string Debit = "";
                    string balance = dt.Rows[0]["Balance_stock"] + "";
                    string Ptype = "";
                    //string Ptype = dt2.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
                else
                {
                    res = new string[7] { "", "", "", "", "", "", ""};
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllProductReturnStock(string Proid, string quantity)
        {
            string[] res = { };
            try
            {
                string query = "select * from tbl_pro_price_circlar  where proid='" + Proid + "' and Quantity='" + quantity + "'";
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    //DataTable dt2 = db.GetAllRecord("select Ptype from tbl_pro_price_circlar where Id='" + dt.Rows[0]["Productid"] + "'");
                    string id = "";
                    string Productid = "";
                    string Productname = "";
                    string Credit = "";
                    string Debit = "";
                    string balance = dt.Rows[0]["Balance_stock"] + "";
                    string Ptype = "";
                    //string Ptype = dt2.Rows[0]["Ptype"] + "";

                    res = new string[7] { id, Productid, Productname, Credit, Debit, balance, Ptype };

                }
                else
                {
                    res = new string[7] { "", "", "", "", "", "", "" };
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        ///  Inventry Module  Close ///





        //Open Transport dashboard
        [OutputCache(CacheProfile = "NoCache")]
        [HttpGet]
        public ActionResult Dtransport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }

        public ActionResult OrderInfo(string type)
        {
            List<Order> Order = new List<Order>();
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {
                try
                {
                    ViewBag.nm = type;
                    string query = "";
                    if (type == "all")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Active'";

                    }
                    else if (type == "Confirm")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Confirmed'";
                    }
                    else if (type == "Dispatch")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Dispatch'";
                    }
                    else if (type == "Delivered")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Delivered'";
                    }
                    else if (type == "Cancelled")
                    {
                        query = "SELECT * FROM tbl_order where Order_status='Cancelled'";
                    }

                    activitylog.Activitylogins("tbl_order", "", query, "Failed", "", Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            DataRow row = dt.Rows[i];
                            Order OrderInfo = new Order
                            {

                                OrderID = Convert.ToString(row["Order_id"]),
                                Customer_name = Convert.ToString(row["Customer_name"]),
                                Total_amount = Convert.ToString(row["Total_amount"]),
                                Drivername = Convert.ToString(row["Drivername"]),
                                Drivermobile = Convert.ToString(row["Drivermobile"]),
                                Vehiclename = Convert.ToString(row["Vehiclename"]),
                                Vehicleid = Convert.ToString(row["Vehicleid"]),
                                Transport_status = Convert.ToString(row["Transport_status"]),
                                Product_name = Convert.ToString(row["Product_name"]),
                                Product_price = Convert.ToString(row["Product_price"]),
                                CustomerID = Convert.ToString(row["Customer_id"]),
                                Product_id = Convert.ToString(row["Product_id"]),
                                Driverid = Convert.ToString(row["Driverid"]),
                                Datetime = Convert.ToDateTime(row["Datetime"]),

                            };
                            Order.Add(OrderInfo);
                        }
                    }
                    else
                    {
                        ViewBag.msg = "failed";
                    }
                }
                catch (Exception ex)
                {
                    try
                    {
                        Error_15_16 error_15_16 = new Error_15_16();
                        string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                        // Get the page URL, if available
                        pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                        // Get the module name
                        moduleName = ex.TargetSite.Module.Name;
                        // Get the error line number, if available
                        var stackTrace = ex.StackTrace;
                        if (!string.IsNullOrEmpty(stackTrace))
                        {
                            var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                            if (lineNumberIndex >= 0)
                            {
                                var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                                var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                                if (newLineIndex >= 0)
                                {
                                    errorLine = lineNumber.Substring(0, newLineIndex);
                                }
                                else
                                {
                                    errorLine = lineNumber;
                                }
                            }
                        }
                        // Get the error message and name
                        if (ex.Message.ToString().Length >= 1000)
                        {
                            errorMessage = ex.Message.Substring(1, 500);
                        }
                        else
                        {
                            errorMessage = ex.Message;
                        }
                        errorName = ex.GetType().FullName;
                        // Get the error trace
                        errorTrace = ex.StackTrace;
                        error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                    }

                    catch
                    {

                    }
                    ViewBag.msg = "Error";
                }
                finally
                {
                    db.connectionstate();
                }
            }
            else
            {
                Response.Redirect("/Home/Login");
            }

            
            

            return View(Order);
        }

        public JsonResult getcustomerdetails(string Cmpid)
        {
            string res1 = "";
            try
            {
                string getcmp = "SELECT * FROM tbl_customer where Customer_id='" + Cmpid + "'";
                DataTable tbll = db.GetAllRecord(getcmp);
               res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getproductdetails(string productid)
        {
            string res1 = "";
            try {
            string getcmp = "SELECT * FROM tbl_product where Id='" + productid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);
            res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getdriverdetails(string driverid)
        {
            string res1 = "";
            try {
            string getcmp = "SELECT * FROM tbl_registration where Employee_id='" + driverid + "' and Employee_Type='Tuser'";
            DataTable tbll = db.GetAllRecord(getcmp);
            res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Json(res1, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getvehicledetails(string Vehicleid)
        {
            string res1 = "";
            try
            {
            string getcmp = "SELECT * FROM tbl_vehicle where Vehicleid='" + Vehicleid + "'";
            DataTable tbll = db.GetAllRecord(getcmp);

            if (tbll == null || tbll.Rows.Count == 0)
            {
                string rentvehicle = "SELECT * FROM tbl_rentvehicle where Vehicleid='" + Vehicleid + "'";
                DataTable rentdt = db.GetAllRecord(rentvehicle);

                string res2 = JsonConvert.SerializeObject(rentdt, Formatting.None);
                return Json(res2, JsonRequestBehavior.AllowGet);
            }
            else
            {
                res1 = JsonConvert.SerializeObject(tbll, Formatting.None);
                return Json(res1, JsonRequestBehavior.AllowGet);
            }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"] + "".ToString(), Session["suname"] + "".ToString(), Session["smail"] + "".ToString());
                }

                catch
                {

                }
                res1 = "Error"; 
                return Json(res1, JsonRequestBehavior.AllowGet);
            }
            finally
            {
                db.connectionstate();
            }
        }

        //Close Transport dashboard





        // Reports Top to Bootom Report Open //
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ToptoBottom()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetToptoBottom(int Startdate,int Enddate, int Month, int Year,string Empid,string Reportfor)
        {
            string json = "", columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            // Sample DataTable with columns "Dr," "Balance," and "Row Material"
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("SR.NO.", typeof(string));
            dataTable.Columns.Add("Employee", typeof(string));
            dataTable.Columns.Add("Attendance", typeof(string));
            dataTable.Columns.Add("D.K.S", typeof(string));
            dataTable.Columns.Add("Demo", typeof(string));
            dataTable.Columns.Add("Points", typeof(string));
            dataTable.Columns.Add("Revenue", typeof(string));
            dataTable.Columns.Add("Customer", typeof(string));
            dataTable.Columns.Add("D/C", typeof(string));
            dataTable.Columns.Add("S/C", typeof(string));
            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }


                string query = "Select * from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Empid != null && Empid != "")
                {
                    query = "Select * from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Empid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                string Empid1 = "";
                if (dt.Rows.Count > 0)
                {
                    for(int i = 0; i < dt.Rows.Count; i++)
                    {
                        Empid1 += dt.Rows[i]["Employee_id"] + ",";
                    }
                    if (Empid1.EndsWith(","))
                    {
                        Empid1 = Empid1.Substring(0, Empid1.Length - 1);
                    }
                    string empquery = "SELECT Id,Name,Employee_id from tbl_registration where Employee_type='Suser'";
                    if (Empid1 != null && Empid1 != "")
                    {
                        empquery = "SELECT Id,Name,Employee_id,Mobile_no from tbl_registration where Employee_type='Suser' and (";
                        string[] empArray = Empid1.Split(',');
                        foreach (string id in empArray)
                        {
                            empquery += " Employee_id='" + id + "' or";
                        }
                        empquery = empquery.Substring(0, empquery.Length - 3);
                        empquery += ")";
                    }
                    empquery += " GROUP BY Id,Name,Employee_id,Mobile_no";
                    activitylog.Activitylogins("tbl_registration", "", empquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    DataTable empdt = db.GetAllRecord(empquery);
                    activitylog.Activitylogupd("Success", "");
                    if (empdt.Rows.Count > 0)
                    {
                        htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                        htmlTable.Append("<thead>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<th>SR.NO.</th>");
                        htmlTable.Append("<th>Name of Field Employee</th>");
                        htmlTable.Append("<th>Attendance/PMD</th>");
                        htmlTable.Append("<th>D.K.S</th>");
                        htmlTable.Append("<th>Demo</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Revenue</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>D/C</th>");
                        htmlTable.Append("<th>S/C</th>");
                        htmlTable.Append("</tr>");
                        htmlTable.Append("</thead>");
                        htmlTable.Append("<tbody>");
                        for (int i = 0; i < empdt.Rows.Count; i++)
                        {
                            int index = i + 1;
                            string Employeeid = empdt.Rows[i]["Employee_id"] + "";
                            string Employeemobile = empdt.Rows[i]["Mobile_no"] + "";

                            string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Employeeid='" + Employeeid + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "' and (Day(Date)>='" + Startdate + "' and Day(Date)<='" + Enddate + "')";
                            DataTable attdt = db.GetAllRecord(attquery);

                            string dksquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='DKS' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            DataTable dksdt = db.GetAllRecord(dksquery);

                            string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            DataTable demodt = db.GetAllRecord(demoquery);

                            string customerquery1 = "SELECT Distinct Order_id from [tbl_order] where logid='" + Employeeid + "' and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Delivered') and (Day(ActionDatetime)>='" + Startdate + "' and Day(ActionDatetime)<='" + Enddate + "')";
                            DataTable customerdt1 = db.GetAllRecord(customerquery1);
                            double Points = 0, Revenue = 0;
                            int cuscount = 0;
                            if (customerdt1.Rows.Count > 0)
                            {
                                for(int ijo = 0; ijo < customerdt1.Rows.Count; ijo++)
                                {
                                    //string customerquery = "SELECT * from [tbl_order_summary] where logid='" + Employeeid + "' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    string customerquery = "SELECT * from [tbl_order_summary] where Order_id='" + customerdt1.Rows[ijo]["Order_id"] + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    DataTable customerdt = db.GetAllRecord(customerquery);
                                    
                                    if (customerdt.Rows.Count > 0)
                                    {
                                        for (int ci = 0; ci < customerdt.Rows.Count; ci++)
                                        {
                                            string orderquery1 = "SELECT * from [tbl_order] where logid='" + Employeeid + "' and ((MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "') or ( MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Active', 'Confirmed', 'Dispatch'))) and Membertype='Suser' and Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status  IN ('Active', 'Confirmed', 'Dispatch')";
                                            DataTable orderdt1 = db.GetAllRecord(orderquery1);
                                            if (orderdt1.Rows.Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                cuscount++;
                                                string rev_point_query = "select SUM(CAST(Total_proamount AS decimal(10, 2))) AS Revenue,SUM(CAST(Points AS decimal(10, 2))) AS Points from [tbl_order] where  Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and  MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status IN ('Delivered') and (Day(ActionDatetime)>='" + Startdate + "' and Day(ActionDatetime)<='" + Enddate + "')";
                                                DataTable rev_point_dt = db.GetAllRecord(rev_point_query);

                                                if (rev_point_dt.Rows.Count > 0)
                                                {
                                                    if (rev_point_dt.Rows.Count > 0 && rev_point_dt.Rows[0]["Points"] != DBNull.Value)
                                                    {
                                                        Points += Convert.ToDouble(rev_point_dt.Rows[0]["Points"]);
                                                        Revenue += Convert.ToDouble(rev_point_dt.Rows[0]["Revenue"] + "");
                                                    }
                                                    //Points += Convert.ToDouble(rev_point_dt.Rows[0]["Points"] + "");
                                                    //Revenue += Convert.ToDouble(rev_point_dt.Rows[0]["Revenue"] + "");

                                                }
                                                else
                                                {
                                                    Points += 0;
                                                    Revenue += 0;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            



                                   // string customerquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + Employeeid + "' and Lead_status_for='Order' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";
                            //DataTable customerdt = db.GetAllRecord(customerquery);

                            //string rev_point_query = "SELECT [Id] ,[Order_id],[Product_xml] ,[Customer_name] ,[Total_amount] ,[Order_status] ,[logid] ,[logname] ,[Datetime] ,[Orderby] ,[Status]  ,[Product_price]  ,[Product_quantity] ,[Total_proamount] ,[OrderID2] ,Points FROM [growfast].[dbo].[tbl_order] where Status='Active' and Orderby LIKE '" + Employeeid + ")' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and (Day(Datetime)>='" + Startdate + "' and Day(Datetime)<='" + Enddate + "')";

                            
                            double d_c = 0;
                            double s_c = 0;
                            if (cuscount != 0)
                            {
                                d_c = Convert.ToDouble(demodt.Rows.Count) / Convert.ToDouble(cuscount);
                                s_c = Convert.ToDouble(Points) / Convert.ToDouble(cuscount);
                            }
                            else
                            {
                                // Handle the case where denominator is zero
                                d_c = 0; s_c = 0;
                            }

                            htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                            htmlTable.Append("<td>" + index + "</td>");
                            htmlTable.Append("<td>" + empdt.Rows[i]["Name"] + "</td>");
                            htmlTable.Append("<td>" + attdt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + dksdt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + demodt.Rows.Count + "</td>");
                            htmlTable.Append("<td>" + Points + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(Revenue).ToString("0.00") + "</td>");
                            htmlTable.Append("<td>" + cuscount + "</td>");
                            htmlTable.Append("<td>" + d_c.ToString("0.00") + "</td>");
                            htmlTable.Append("<td>" + s_c .ToString("0.00")+ "</td>");
                            htmlTable.Append("</tr>");

                            dataTable.Rows.Add(i, empdt.Rows[i]["Name"], attdt.Rows.Count, dksdt.Rows.Count, demodt.Rows.Count, Points, Revenue, cuscount, d_c, s_c);
                        }
                        htmlTable.Append("</tbody>");

                        if (dataTable.Rows.Count > 0)
                        {

                            double sumOfAttendance = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Attendance"]));
                            double sumOfD_K_S = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["D.K.S"]));
                            double sumOfDemo = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Demo"]));
                            double sumOfPoints = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Points"]));
                            double sumOfRevenue = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Revenue"]));
                            double sumOfCustomer = dataTable.AsEnumerable()
                                      .Sum(row => Convert.ToDouble(row["Customer"]));

                            double sumOfD_C = 0, sumOfS_C = 0;
                            if (sumOfCustomer != 0)
                            {
                                sumOfD_C = sumOfDemo / sumOfCustomer;
                                sumOfS_C = sumOfRevenue / sumOfCustomer;
                            }
                            else
                            {
                                sumOfD_C = 0;
                                sumOfS_C = 0;
                            }
                            htmlTable.Append("<tfoot>");
                            htmlTable.Append("<tr class='bg-light-subtle' padding='10px'>");
                            htmlTable.Append("<th></th>");
                            htmlTable.Append("<th>Total</th>");
                            htmlTable.Append("<th>" + sumOfAttendance + "</th>");
                            htmlTable.Append("<th>" + sumOfD_K_S + "</th>");
                            htmlTable.Append("<th>" + sumOfDemo + "</th>");
                            htmlTable.Append("<th>" + sumOfPoints + "</th>");
                            htmlTable.Append("<th>" + sumOfRevenue.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfCustomer.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfD_C.ToString("0.00") + "</th>");
                            htmlTable.Append("<th>" + sumOfS_C.ToString("0.00") + "</th>");
                            htmlTable.Append("</tr>");
                            htmlTable.Append("</tfoot>");

                            dataTable.Rows.Add("", "Total", sumOfAttendance, sumOfD_K_S, sumOfDemo, sumOfPoints, sumOfRevenue, sumOfCustomer, sumOfD_C, sumOfS_C);
                        }
                        htmlTable.Append("</table>");
                    }
                    else
                    {
                        //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                    }

                    //DataTable dt = db.GetAllRecord(squery);
                    json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                    //return View();
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        // Reports Top to Bootom Report Close//

        // Reports Sales Report Open //
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult SalesReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetSalesReport(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
           
            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if(Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else {
                    columnname = "Groupid";
                }

                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        if(prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk", typeof(string));

                        }
                        else
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                        }
                    }
                }
                dataTable.Columns.Add("Total", typeof(string));
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));


                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " "+columnname+"='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        double[] quantities = { };
                        double[] singlequantities = { };
                        double[] discquantities = { };
                        double[] bulkquantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        singlequantities = new double[prodt.Rows.Count];
                        discquantities = new double[prodt.Rows.Count];
                        bulkquantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];

                        DataRow newRow = dataTable.NewRow();

                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month)+"-"+Year;
                        newRow["S.No"] = i+1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";


                        string strlogid = "";
                        int customer = 0;
                        int pmd = 0, avgpmd = 0;
                        int demos = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"]+"" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                }
                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);

                                demos += demodt.Rows.Count;
                                
                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";

                                
                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            customer = customerdt.Rows.Count;
                            if (prodt.Rows.Count > 0)
                            {
                                for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                {
                                    string productname = prodt.Rows[proi]["Brand"] + "";
                                    string ptype = prodt.Rows[proi]["Ptype"] + "";
                                    if (ptype == "Plant")
                                    {
                                        int singlequantity = 0;
                                        int discquantity = 0;
                                        int bulkquantity = 0;
                                        double amount = 0;
                                        double point = 0;
                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'";
                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"]+"") < 99 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 0)
                                                {
                                                    singlequantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 199 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 99)
                                                {
                                                    discquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 199)
                                                {
                                                    bulkquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                
                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            singlequantities[proi] = singlequantity;
                                            discquantities[proi] = discquantity;
                                            bulkquantities[proi] = bulkquantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            singlequantities[proi] = 0;
                                            discquantities[proi] = 0;
                                            bulkquantities[proi] =0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    }
                                    else
                                    {
                                        int quantity = 0;
                                        double amount = 0;
                                        double point = 0;
                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'";
                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            quantities[proi] = quantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            quantities[proi] = 0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    }
                                    

                                }
                            }

                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }
                        newRow["PMD"] = pmd; 
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "single"] = singlequantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "disc"] = discquantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "bulk"] = bulkquantities[proi];
                                }
                                else
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                                }
                                    
                            }

                        }
                        double Totalsum = 0, Revenuesum=0, Pointsum=0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total"] = Totalsum;
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] =Pointsum;
                        newRow["Customer"] = customer;

                        if (customer != 0)
                        {
                            newRow["D_C"] = demos / customer;
                            newRow["P_C"] = Pointsum / customer;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd; 
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = customer / avgpmd;
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                        }

                        dataTable.Rows.Add(newRow);
                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                        htmlTable.Append("<thead>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        htmlTable.Append("<th>Month</th>");
                        htmlTable.Append("<th>S.no.</th>");
                        htmlTable.Append("<th>Group Name</th>");
                        htmlTable.Append("<th>Name Of Head</th>");
                        htmlTable.Append("<th>PMD</th>");
                        htmlTable.Append("<th>Avg. PMD</th>");
                        htmlTable.Append("<th>Demos</th>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                                    htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                    htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                                }
                                else
                                {
                                    htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                }
                                
                            }

                        }
                        htmlTable.Append("<th>Total</th>");
                        htmlTable.Append("<th>Total Units</th>");
                        htmlTable.Append("<th>Product Sales Revenue</th>");
                        htmlTable.Append("<th>Points</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>D/C</th>");
                        htmlTable.Append("<th>D/P</th>");
                        htmlTable.Append("<th>P/C</th>");
                        htmlTable.Append("<th>Demos/avg.PMD</th>");
                        htmlTable.Append("<th>Points/avg.PMD</th>");
                        htmlTable.Append("<th>Revenue/avg.PMD</th>");
                        htmlTable.Append("<th>Customer/avg.PMD</th>");
                        htmlTable.Append("</tr>");

                        //htmlTable.Append("<tr class='theadb text-center'>");
                        //if (prodt.Rows.Count > 0)
                        //{
                        //    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                        //    {
                        //        if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        //        {
                        //            htmlTable.Append("<th>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                        //            htmlTable.Append("<th>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                        //            htmlTable.Append("<th>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                        //        }
                        //        else
                        //        {
                        //            htmlTable.Append("<th>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                        //        }

                        //}

                        //}
                        //htmlTable.Append("</tr>");
                        htmlTable.Append("</thead>");
                        htmlTable.Append("<tbody>");
                        for (int datai=0; datai<dataTable.Rows.Count; datai++)
                        {
                            htmlTable.Append("<tr>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Group_Name"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Head"] + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["PMD"] + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["AVG_PMD"]+"").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Demos"] + "</td>");
                            if (prodt.Rows.Count > 0)
                            {
                                for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                {
                                    if(prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                    {
                                        htmlTable.Append("<td>" + dataTable.Rows[datai][prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"] + "</td>");
                                        htmlTable.Append("<td>" + dataTable.Rows[datai][prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"] + "</td>");
                                        htmlTable.Append("<td>" + dataTable.Rows[datai][prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"] + "</td>");
                                    }
                                    else
                                    {
                                        htmlTable.Append("<td>" + dataTable.Rows[datai][prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""] + "</td>");
                                    }
                                }
                            }
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Total"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Total_Units"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Customer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["D_P"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["P_C"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Demos"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_Points"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_revenue"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["avg_custmer"] + "").ToString("0.0") + "</td>");
                            htmlTable.Append("</tr>");

                            
                        }
                        int srcount = dataTable.Rows.Count + 1;
                        htmlTable.Append("</tbody>");
                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["AVG_PMD"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])).ToString("0.0") + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"])) + "</td>");
                                }
                                else
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                                }
                                
                            }

                        }

                        double sumAVG_PMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["AVG_PMD"]));
                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";



                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");
                        htmlTable.Append("</table>");
                    }
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetSalesReportAdvance(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where  Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("Manpower", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk", typeof(string));
                        }
                        else
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                        }
                    }
                }
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));
                dataTable.Columns.Add("avg_Demosmp", typeof(string));
                dataTable.Columns.Add("avg_Pointsmp", typeof(string));
                dataTable.Columns.Add("avg_revenuemp", typeof(string));
                dataTable.Columns.Add("avg_custmermp", typeof(string));

                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.no.</th>");
                    htmlTable.Append("<th>Group Name</th>");
                    htmlTable.Append("<th>Name Of Head</th>");
                    htmlTable.Append("<th>PMD</th>");
                    htmlTable.Append("<th>Man Power</th>");
                    htmlTable.Append("<th>Avg. PMD</th>");
                    htmlTable.Append("<th>Demos</th>");
                    if (prodt.Rows.Count > 0)
                    {
                        for (int proi = 0; proi < prodt.Rows.Count; proi++)
                        {
                            if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                            }
                            else
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                            }

                        }

                    }
                    htmlTable.Append("<th>Total Units</th>");
                    htmlTable.Append("<th>Product Sales Revenue</th>");
                    htmlTable.Append("<th>Points</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>D/C</th>");
                    htmlTable.Append("<th>D/P</th>");
                    htmlTable.Append("<th>P/C</th>");
                    htmlTable.Append("<th>Demos/avg.PMD</th>");
                    htmlTable.Append("<th>Points/avg.PMD</th>");
                    htmlTable.Append("<th>Revenue/avg.PMD</th>");
                    htmlTable.Append("<th>Customer/avg.PMD</th>");
                    htmlTable.Append("<th>Demos/MP</th>");
                    htmlTable.Append("<th>Points/MP</th>");
                    htmlTable.Append("<th>Revenue/MP</th>");
                    htmlTable.Append("<th>Customer/MP</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double[] quantities = { };
                        double[] singlequantities = { };
                        double[] discquantities = { };
                        double[] bulkquantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        singlequantities = new double[prodt.Rows.Count];
                        discquantities = new double[prodt.Rows.Count];
                        bulkquantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];
                        DataRow newRow = dataTable.NewRow();


                        string head = "Head";
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        //string formattedEndDate = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(endMonth) + "-" + endYear;


                        //newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + (i + 1) + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[i]["Groups"] + "" + "</td>");

                        string strlogid = "";
                        float customer = 0;
                        double pmd = 0;
                        double avgpmd = 0;
                        double demos = 0;
                        double mp = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                    head = empdt.Rows[empi]["Employee_name"] + "";
                                }

                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);

                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";


                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status  IN ('Due') and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            customer = customerdt.Rows.Count;
                            if (customerdt.AsEnumerable().Any(row => row.Field<string>("Payment_status") == "Due"))
                            {
                                if (prodt.Rows.Count > 0)
                                {
                                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                                    {
                                        string productname = prodt.Rows[proi]["Brand"] + "";
                                        string ptype = prodt.Rows[proi]["Ptype"] + "";
                                        if (ptype == "Plant")
                                        {
                                            int singlequantity = 0;
                                            int discquantity = 0;
                                            int bulkquantity = 0;
                                            double amount = 0;
                                            double point = 0;
                                            if (customer > 0)
                                            {
                                                string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Order_status IN ('Active', 'Dispatch', 'Confirmed')";
                                                DataTable orderdt = db.GetAllRecord(orderquery);
                                                if (orderdt.Rows.Count > 0)
                                                {
                                                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                                    {
                                                        if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 99 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 0)
                                                        {
                                                            singlequantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }
                                                        else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 199 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 99)
                                                        {
                                                            discquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }
                                                        else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 199)
                                                        {
                                                            bulkquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        }

                                                        amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                        point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                                    }
                                                    singlequantities[proi] = singlequantity;
                                                    discquantities[proi] = discquantity;
                                                    bulkquantities[proi] = bulkquantity;
                                                    amounts[proi] = amount;
                                                    points[proi] = point;
                                                }
                                                else
                                                {
                                                    singlequantities[proi] = 0;
                                                    discquantities[proi] = 0;
                                                    bulkquantities[proi] = 0;
                                                    amounts[proi] = 0;
                                                    points[proi] = 0;
                                                }
                                            }
                                            else
                                            {
                                                singlequantities[proi] = 0;
                                                discquantities[proi] = 0;
                                                bulkquantities[proi] = 0;
                                                amounts[proi] = 0;
                                                points[proi] = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (customer > 0)
                                            {
                                                int quantity = 0;
                                                double amount = 0;
                                                double point = 0;
                                                string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Status='Active'and Order_status IN ('Active', 'Dispatch', 'Confirmed') and Payment_status ='Due'";
                                                DataTable orderdt = db.GetAllRecord(orderquery);
                                                if (orderdt.Rows.Count > 0)
                                                {
                                                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                                    {
                                                        quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                        amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                        point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                                    }
                                                    quantities[proi] = quantity;
                                                    amounts[proi] = amount;
                                                    points[proi] = point;
                                                }
                                                else
                                                {
                                                    quantities[proi] = 0;
                                                    amounts[proi] = 0;
                                                    points[proi] = 0;
                                                }
                                            }
                                            else
                                            {
                                                quantities[proi] = 0;
                                                amounts[proi] = 0;
                                                points[proi] = 0;
                                            }
                                        }

                                    }
                                }

                                else
                                {
                                    //singlequantities[proi] = 0;
                                    //discquantities[proi] = 0;
                                    //bulkquantities[proi] = 0;
                                    //amounts[proi] = 0;
                                    //points[proi] = 0;
                                }
                            }
                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }


                        htmlTable.Append("<td>" + head + "</td>");
                        newRow["PMD"] = pmd;
                        newRow["ManPower"] = empdt.Rows.Count;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;

                        htmlTable.Append("<td>" + pmd + "</td>");
                        htmlTable.Append("<td>" + empdt.Rows.Count + "</td>");
                        htmlTable.Append("<td>" + Convert.ToDouble(avgpmd).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + demos + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "single"] = singlequantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "disc"] = discquantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "bulk"] = bulkquantities[proi];
                                    htmlTable.Append("<td>" + singlequantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + discquantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + bulkquantities[proi] + "</td>");
                                }
                                else
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                                    htmlTable.Append("<td>" + quantities[proi] + "</td>");
                                }

                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Totalsum += singlequantities[sumi] / 10;
                            Totalsum += discquantities[sumi] / 10;
                            Totalsum += bulkquantities[sumi] / 10;
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = customer;
                        htmlTable.Append("<td>" + Totalsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Revenuesum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Pointsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + customer.ToString("0.0") + "</td>");
                        if (customer != 0)
                        {
                            newRow["D_C"] = demos / customer;
                            newRow["P_C"] = Pointsum / customer;
                            htmlTable.Append("<td>" + (demos / customer).ToString("0.0") + "</td>");

                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                            htmlTable.Append("<td>" + (demos / Pointsum).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }
                        if (customer != 0)
                        {
                            htmlTable.Append("<td>" + (Pointsum / customer).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            htmlTable.Append("<td>0</td>");
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = customer / avgpmd;
                            htmlTable.Append("<td>" + (demos / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Pointsum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Revenuesum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (customer / avgpmd).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                        }
                        newRow["avg_Demosmp"] = demos / empdt.Rows.Count;
                        newRow["avg_Pointsmp"] = Pointsum / empdt.Rows.Count;
                        newRow["avg_revenuemp"] = Revenuesum / empdt.Rows.Count;
                        newRow["avg_custmermp"] = customer / empdt.Rows.Count;
                        htmlTable.Append("<td>" + (demos / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Pointsum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Revenuesum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (customer / empdt.Rows.Count).ToString("0.0") + "</td>");

                        htmlTable.Append("</tr>");
                        dataTable.Rows.Add(newRow);
                    }

                    htmlTable.Append("</tbody>");
                    if (dataTable.Rows.Count > 0)
                    {
                        int srcount = dataTable.Rows.Count + 1;
                        double sumPMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"]));
                        double sumAVG_PMD = 0;
                        double sumManPower = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"]));
                        sumAVG_PMD = (sumPMD / sumManPower) / DateTime.DaysInMonth(Year, Month);

                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"])) + "</td>");
                        htmlTable.Append("<td>" + sumAVG_PMD.ToString("0.0") + " </td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"])) + "</td>");
                                }
                                else
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                                }
                            }

                        }


                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgDemosmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumManPower).ToString("0.0") : "0";
                        string avgPointsmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumManPower).ToString("0.0") : "0";
                        string avgRevenuemp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumManPower).ToString("0.0") : "0";
                        string avgCustomermp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumManPower).ToString("0.0") : "0";



                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("<td>" + avgDemosmp + "</td>");
                        htmlTable.Append("<td>" + avgPointsmp + "</td>");
                        htmlTable.Append("<td>" + avgRevenuemp + "</td>");
                        htmlTable.Append("<td>" + avgCustomermp + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");

                    }
                    htmlTable.Append("</table>");
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        public JsonResult GetSalesReportFinal(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid, string Start_date, string End_date)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();


            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }
                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where  Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Head", typeof(string));
                dataTable.Columns.Add("PMD", typeof(string));
                dataTable.Columns.Add("Manpower", typeof(string));
                dataTable.Columns.Add("AVG_PMD", typeof(string));
                dataTable.Columns.Add("Demos", typeof(string));
                if (prodt.Rows.Count > 0)
                {
                    for (int proi = 0; proi < prodt.Rows.Count; proi++)
                    {
                        if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc", typeof(string));
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk", typeof(string));
                        }
                        else
                        {
                            dataTable.Columns.Add(prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "", typeof(string));
                        }
                    }
                }
                dataTable.Columns.Add("Total_Units", typeof(string));
                dataTable.Columns.Add("Revenue", typeof(string));
                dataTable.Columns.Add("Points", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("D_C", typeof(string));
                dataTable.Columns.Add("D_P", typeof(string));
                dataTable.Columns.Add("P_C", typeof(string));
                dataTable.Columns.Add("avg_Demos", typeof(string));
                dataTable.Columns.Add("avg_Points", typeof(string));
                dataTable.Columns.Add("avg_revenue", typeof(string));
                dataTable.Columns.Add("avg_custmer", typeof(string));
                dataTable.Columns.Add("avg_Demosmp", typeof(string));
                dataTable.Columns.Add("avg_Pointsmp", typeof(string));
                dataTable.Columns.Add("avg_revenuemp", typeof(string));
                dataTable.Columns.Add("avg_custmermp", typeof(string));

                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.no.</th>");
                    htmlTable.Append("<th>Group Name</th>");
                    htmlTable.Append("<th>Name Of Head</th>");
                    htmlTable.Append("<th>PMD</th>");
                    htmlTable.Append("<th>Man Power</th>");
                    htmlTable.Append("<th>Avg. PMD</th>");
                    htmlTable.Append("<th>Demos</th>");
                    if (prodt.Rows.Count > 0)
                    {
                        for (int proi = 0; proi < prodt.Rows.Count; proi++)
                        {
                            if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Single<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Disc<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>Bulk<br>" + Convert.ToDouble(prodt.Rows[proi]["Bulkprice"] + "").ToString("0.0") + "</th>");
                            }
                            else
                            {
                                htmlTable.Append("<th class='text-center'>" + prodt.Rows[proi]["Brand"] + "" + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Offerprice"] + "").ToString("0.0") + "<br>" + Convert.ToDouble(prodt.Rows[proi]["Sellprice"] + "").ToString("0.0") + "</th>");
                            }

                        }

                    }
                    htmlTable.Append("<th>Total Units</th>");
                    htmlTable.Append("<th>Product Sales Revenue</th>");
                    htmlTable.Append("<th>Points</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>D/C</th>");
                    htmlTable.Append("<th>D/P</th>");
                    htmlTable.Append("<th>P/C</th>");
                    htmlTable.Append("<th>Demos/avg.PMD</th>");
                    htmlTable.Append("<th>Points/avg.PMD</th>");
                    htmlTable.Append("<th>Revenue/avg.PMD</th>");
                    htmlTable.Append("<th>Customer/avg.PMD</th>");
                    htmlTable.Append("<th>Demos/MP</th>");
                    htmlTable.Append("<th>Points/MP</th>");
                    htmlTable.Append("<th>Revenue/MP</th>");
                    htmlTable.Append("<th>Customer/MP</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("<tbody>");
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        double[] quantities = { };
                        double[] singlequantities = { };
                        double[] discquantities = { };
                        double[] bulkquantities = { };
                        double[] amounts = { };
                        double[] points = { };
                        quantities = new double[prodt.Rows.Count];
                        singlequantities = new double[prodt.Rows.Count];
                        discquantities = new double[prodt.Rows.Count];
                        bulkquantities = new double[prodt.Rows.Count];
                        amounts = new double[prodt.Rows.Count];
                        points = new double[prodt.Rows.Count];
                        DataRow newRow = dataTable.NewRow();

                        string head = "Head";
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        //string formattedEndDate = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(endMonth) + "-" + endYear;


                        //newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = i + 1;
                        newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";
                        newRow["Head"] = "Head";

                        htmlTable.Append("<tr>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + (i + 1) + "</td>");
                        htmlTable.Append("<td>" + dt.Rows[i]["Groups"] + "" + "</td>");
                        
                        string strlogid = "";
                        float customer = 0;
                        int cuscount = 0;
                        double pmd = 0;
                        double avgpmd = 0;
                        double demos = 0;
                        double mp = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                if (empdt.Rows[empi]["Member_type"] + "" == "Head")
                                {
                                    newRow["Head"] = empdt.Rows[empi]["Employee_name"];
                                    head = empdt.Rows[empi]["Employee_name"]+"";
                                }

                                string attquery = "SELECT [Id] ,[Emprowid] ,[Employeeid] ,[Name] ,[Date] ,[Punchin_time] ,[Punchout_time] FROM [growfast].[dbo].[tbl_attendance] where Emprowid='" + empdt.Rows[empi]["Employee_rowid"] + "' and MONTH(Date)='" + Month + "' And YEAR(Date)='" + Year + "'";
                                DataTable attdt = db.GetAllRecord(attquery);
                                pmd += attdt.Rows.Count;


                                string demoquery = "SELECT [Id] ,[Leadid] ,[Customerid] ,[Name] ,[Lead_status_for] ,[Lead_status] ,[Status] ,[Logid] ,[Logname] ,[Datetime] FROM [growfast].[dbo].[tbl_leadnew] where Logid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Lead_status in ('Done','Follow Up')  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                                DataTable demodt = db.GetAllRecord(demoquery);
                                demos += demodt.Rows.Count;

                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";

                            }

                            avgpmd = (pmd / empdt.Rows.Count) / DateTime.DaysInMonth(Year, Month);
                        }
                        if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }
                        string orderid = "''";
                        string customerquery1 = "SELECT Distinct Order_id from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "'   and Order_status  IN ('Delivered')";
                            DataTable customerdt1 = db.GetAllRecord(customerquery1);{
                                if (customerdt1.Rows.Count > 0)
                                {
                                    for (int ijo = 0; ijo < customerdt1.Rows.Count; ijo++)
                                    {
                                        //string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    string customerquery = "SELECT * from [tbl_order_summary] where Order_id='" + customerdt1.Rows[ijo]["Order_id"] + "'  and Payment_status ='No Due' and Membertype='Suser'";
                                    DataTable customerdt = db.GetAllRecord(customerquery);
                                        customer = customerdt.Rows.Count;

                                        if (customerdt.Rows.Count > 0)
                                        {
                                            for (int ci = 0; ci < customerdt.Rows.Count; ci++)
                                            {
                                                //string orderquery1 = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status  IN ('Active', 'Confirmed', 'Dispatch')";

                                            string orderquery1 = "SELECT * from [tbl_order] where  Order_id='" + customerdt.Rows[ci]["Order_id"] + "' and Status='Active' and Order_status IN ('Active', 'Confirmed', 'Dispatch')";
                                            DataTable orderdt1 = db.GetAllRecord(orderquery1);
                                                if (orderdt1.Rows.Count > 0)
                                                {

                                                }
                                                else
                                                {
                                                    cuscount++;
                                                if (orderid != "")
                                                {
                                                    orderid += ",'" + customerdt.Rows[ci]["Order_id"] + "'";
                                                }
                                                else
                                                {
                                                    orderid += "'" + customerdt.Rows[ci]["Order_id"] + "'";
                                                }
                                            }

                                            }



                                        }
                                    else
                                    {

                                    }
                                        
                                    }
                                }

                            
                        }

                        orderid = "and Order_id in (" + orderid + ")";
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                string productname = prodt.Rows[proi]["Brand"] + "";
                                string ptype = prodt.Rows[proi]["Ptype"] + "";
                                if (ptype == "Plant")
                                {
                                    int singlequantity = 0;
                                    int discquantity = 0;
                                    int bulkquantity = 0;
                                    double amount = 0;
                                    double point = 0;
                                    //if (customer > 0)
                                    //{
                                        // string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Order_status IN ('Delivered', 'Planted', 'Counted', 'Replaced', 'Technical Service')";

                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "' and Order_status IN ('Delivered') and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Payment_status='No Due' " + orderid + "";

                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 99 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 0)
                                                {
                                                    singlequantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") < 199 && Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 99)
                                                {
                                                    discquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }
                                                else if (Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "") > 199)
                                                {
                                                    bulkquantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                }

                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            singlequantities[proi] = singlequantity;
                                            discquantities[proi] = discquantity;
                                            bulkquantities[proi] = bulkquantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            singlequantities[proi] = 0;
                                            discquantities[proi] = 0;
                                            bulkquantities[proi] = 0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    //}
                                    //else
                                    //{

                                    //    singlequantities[proi] = 0;
                                    //    discquantities[proi] = 0;
                                    //    bulkquantities[proi] = 0;
                                    //    amounts[proi] = 0;
                                    //    points[proi] = 0;
                                    //}
                                }
                                else
                                {
                                    //if (customer > 0)
                                    //{
                                        int quantity = 0;
                                        double amount = 0;
                                        double point = 0;
                                        //string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Status='Active'and Status='Active'and Order_status IN ('Delivered', 'Planted', 'Counted', 'Replaced', 'Technical Service') ";

                                        string orderquery = "SELECT * from [tbl_order] where " + strlogid + " and MONTH(ActionDatetime)='" + Month + "' And YEAR(ActionDatetime)='" + Year + "' and Order_status IN ('Delivered') and Membertype='Suser' and Product_id='" + prodt.Rows[proi]["Id"] + "' and Payment_status='No Due' " + orderid + "";

                                        DataTable orderdt = db.GetAllRecord(orderquery);
                                        if (orderdt.Rows.Count > 0)
                                        {
                                            for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                                            {
                                                quantity += Convert.ToInt32(orderdt.Rows[orderi]["Product_quantity"] + "");
                                                amount += Convert.ToDouble(orderdt.Rows[orderi]["Total_proamount"] + "");
                                                point += Convert.ToDouble(orderdt.Rows[orderi]["Points"] + "");
                                            }
                                            quantities[proi] = quantity;
                                            amounts[proi] = amount;
                                            points[proi] = point;
                                        }
                                        else
                                        {
                                            quantities[proi] = 0;
                                            amounts[proi] = 0;
                                            points[proi] = 0;
                                        }
                                    //}
                                    //else
                                    //{
                                    //    quantities[proi] = 0;
                                    //    amounts[proi] = 0;
                                    //    points[proi] = 0;
                                    //}
                                }

                            }
                        }
                        else
                        {
                            //singlequantities[proi] = 0;
                            //discquantities[proi] = 0;
                            //bulkquantities[proi] = 0;
                            //amounts[proi] = 0;
                            //points[proi] = 0;
                        }

                        htmlTable.Append("<td>" + head + "</td>");
                        newRow["PMD"] = pmd;
                        newRow["ManPower"] = empdt.Rows.Count;
                        newRow["AVG_PMD"] = avgpmd;
                        newRow["Demos"] = demos;

                        htmlTable.Append("<td>" + pmd + "</td>");
                        htmlTable.Append("<td>" + empdt.Rows.Count + "</td>");
                        htmlTable.Append("<td>" + avgpmd.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + demos + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "single"] = singlequantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "disc"] = discquantities[proi];
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + "bulk"] = bulkquantities[proi];
                                    htmlTable.Append("<td>" + singlequantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + discquantities[proi] + "</td>");
                                    htmlTable.Append("<td>" + bulkquantities[proi] + "</td>");
                                }
                                else
                                {
                                    newRow[prodt.Rows[proi]["Brand"] + "" + "" + prodt.Rows[proi]["Id"] + ""] = quantities[proi];
                                    htmlTable.Append("<td>" + quantities[proi] + "</td>");
                                }
                            }

                        }
                        double Totalsum = 0, Revenuesum = 0, Pointsum = 0;
                        // Loop through the array and add each value to the sum
                        for (int sumi = 0; sumi < quantities.Length; sumi++)
                        {
                            Totalsum += quantities[sumi];
                            Totalsum += singlequantities[sumi]/10;
                            Totalsum += discquantities[sumi]/10;
                            Totalsum += bulkquantities[sumi]/10;
                            Revenuesum += amounts[sumi];
                            Pointsum += points[sumi];
                        }
                        newRow["Total_Units"] = Totalsum;
                        newRow["Revenue"] = Revenuesum;
                        newRow["Points"] = Pointsum;
                        newRow["Customer"] = cuscount;

                        htmlTable.Append("<td>" + Totalsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Revenuesum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + Pointsum.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + cuscount.ToString("0.0") + "</td>");
                        if (cuscount != 0)
                        {
                            newRow["D_C"] = demos / cuscount;
                            newRow["P_C"] = Pointsum / cuscount;
                            htmlTable.Append("<td>" + (demos / cuscount).ToString("0.0") + "</td>");
                            
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_C"] = 0;
                            newRow["P_C"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }

                        if (Pointsum != 0)
                        {
                            newRow["D_P"] = demos / Pointsum;
                            htmlTable.Append("<td>" + (demos / Pointsum).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["D_P"] = 0;
                            htmlTable.Append("<td>0</td>");
                        }
                        if (cuscount != 0)
                        {
                            htmlTable.Append("<td>" + (Pointsum / cuscount).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            htmlTable.Append("<td>0</td>");
                        }
                        if (avgpmd != 0)
                        {
                            newRow["avg_Demos"] = demos / avgpmd;
                            newRow["avg_Points"] = Pointsum / avgpmd;
                            newRow["avg_revenue"] = Revenuesum / avgpmd;
                            newRow["avg_custmer"] = cuscount / avgpmd;
                            htmlTable.Append("<td>" +(demos / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Pointsum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" + (Revenuesum / avgpmd).ToString("0.0") + "</td>");
                            htmlTable.Append("<td>" +(cuscount / avgpmd).ToString("0.0") + "</td>");
                        }
                        else
                        {
                            // Handle the case where denominator is zero
                            newRow["avg_Demos"] = 0;
                            newRow["avg_Points"] = 0;
                            newRow["avg_revenue"] = 0;
                            newRow["avg_custmer"] = 0;
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                            htmlTable.Append("<td>0</td>");
                        }
                        newRow["avg_Demosmp"] = demos / empdt.Rows.Count;
                        newRow["avg_Pointsmp"] = Pointsum / empdt.Rows.Count;
                        newRow["avg_revenuemp"] = Revenuesum / empdt.Rows.Count;
                        newRow["avg_custmermp"] = cuscount / empdt.Rows.Count;
                        htmlTable.Append("<td>" + (demos / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Pointsum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (Revenuesum / empdt.Rows.Count).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + (cuscount / empdt.Rows.Count).ToString("0.0") + "</td>");

                        htmlTable.Append("</tr>");

                        dataTable.Rows.Add(newRow);
                    }
                    htmlTable.Append("</tbody>");
                    if (dataTable.Rows.Count > 0)
                    {
                        int srcount = dataTable.Rows.Count + 1;
                        double sumPMD = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"]));
                        double sumAVG_PMD = 0;
                        double sumManPower = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"]));
                        sumAVG_PMD = (sumPMD / sumManPower) / DateTime.DaysInMonth(Year, Month);

                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold'>");
                        htmlTable.Append("<td>" + CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year + "</td>");
                        htmlTable.Append("<td>" + srcount + "</td>");
                        htmlTable.Append("<td>Total</td>");
                        htmlTable.Append("<td>Head</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["PMD"])) + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["ManPower"])) + "</td>");
                        htmlTable.Append("<td>" + sumAVG_PMD.ToString("0.0") + " </td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) + "</td>");
                        if (prodt.Rows.Count > 0)
                        {
                            for (int proi = 0; proi < prodt.Rows.Count; proi++)
                            {
                                if (prodt.Rows[proi]["Ptype"] + "" == "Plant")
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "single"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "disc"])) + "</td>");
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + "bulk"])) + "</td>");
                                }
                                else
                                {
                                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row[prodt.Rows[proi]["Brand"] + "" + prodt.Rows[proi]["Id"] + ""])) + "</td>");
                                }
                            }

                        }


                        double sumCustomer = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"]));
                        double sumPoints = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"]));
                        // Calculate the value to be displayed in the HTML table
                        string d_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumCustomer).ToString("0.0") : "0";
                        string d_p = (sumPoints != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumPoints).ToString("0.0") : "0";
                        string p_c = (sumCustomer != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumCustomer).ToString("0.0") : "0";
                        string avgDemos = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgPoints = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgRevenue = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgCustomer = (sumAVG_PMD != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumAVG_PMD).ToString("0.0") : "0";
                        string avgDemosmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demos"])) / sumManPower).ToString("0.0") : "0";
                        string avgPointsmp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])) / sumManPower).ToString("0.0") : "0";
                        string avgRevenuemp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])) / sumManPower).ToString("0.0") : "0";
                        string avgCustomermp = (sumManPower != 0) ? (dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])) / sumManPower).ToString("0.0") : "0";



                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Total_Units"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Revenue"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Points"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Customer"])).ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + d_c + "</td>");
                        htmlTable.Append("<td>" + d_p + "</td>");
                        htmlTable.Append("<td>" + p_c + "</td>");
                        htmlTable.Append("<td>" + avgDemos + "</td>");
                        htmlTable.Append("<td>" + avgPoints + "</td>");
                        htmlTable.Append("<td>" + avgRevenue + "</td>");
                        htmlTable.Append("<td>" + avgCustomer + "</td>");
                        htmlTable.Append("<td>" + avgDemosmp + "</td>");
                        htmlTable.Append("<td>" + avgPointsmp + "</td>");
                        htmlTable.Append("<td>" + avgRevenuemp + "</td>");
                        htmlTable.Append("<td>" + avgCustomermp + "</td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");

                    }
                    htmlTable.Append("</table>");
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }
        // Reports Sales Report Close//



        /// <Reports Customer Sales Record Open>
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult CSR()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetCSR(int Month, int Year, string Reportfor, string Uniqueid, string Start_date, string End_date,string activity)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "invoice")
                {
                    columnname = "Invoiceid";
                }
                else if (Reportfor == "order")
                {
                    columnname = "Order_id";
                }
                else if (Reportfor == "customer")
                {
                    columnname = "Customer_id";
                }
                else if (Reportfor == "post")
                {
                    columnname = "Address";
                }
                else if (Reportfor == "block")
                {
                    columnname = "Block";
                }
                else if (Reportfor == "tahsil")
                {
                    columnname = "Tahsil";
                }
                else if (Reportfor == "district")
                {
                    columnname = "District";
                }
                else if (Reportfor == "state")
                {
                    columnname = "State";
                }
                else if (Reportfor == "pincode")
                {
                    columnname = "Pincode";
                }
                else
                {
                    columnname = "Order_id";
                }
                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");

                //// Sample DataTable with columns "Dr," "Balance," and "Row Material"
                //string proquery = "select * from [tbl_order] where (CONVERT(DATE, Datetime)>='" + formatteStart_date + "' and CONVERT(DATE, Datetime)<='" + formattedEnd_date + "') and Status='Active' and Order_status!='Active' and Order_status!='Confirmed' and Order_status!='Dispatch' and  Order_status!='Cancelled'  ";
                
                    string proquery = "select Invoiceid,Dilivery_month,Orderby,Customer_name,Customer_address,Product_name,Product_quantity,Order_status from [tbl_order] where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "'  ";

                if (Uniqueid != null && Uniqueid != "")
                {
                    proquery += " and " + columnname + "='" + Uniqueid + "'";
                }
                if (activity != null && activity != "")
                {
                    proquery += " and Order_status='" + activity + "'";
                }


                DataTable prodt = db.GetAllRecord(proquery);

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(prodt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                json = "No Data";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        /// <Reports Customer Sales Record Close>

        public JsonResult GetEmployee(string Desig,string pagename,string Month,string Year)
        {
            string res = "";
            string query = "";
            string tablename = "", columnname="";

            try
            {
                res += "<option selected disabled value=''>Select one</option>";
                if (Desig == "SR_BE")
                {
                    query = "select * from tbl_registration where (Designation='SALES REPRESENTATIVE' or Designation='BUSINESS EXECUTIVE')";
                }
                else if(Desig == "GL_TL")
                {
                    query = "select * from tbl_registration where (Designation='GROUP LEADER' or Designation='TEAM LEADER')";
                }
                else if (Desig == "ASM_DBM_BM")
                {
                    query = "select * from tbl_registration where (Designation='AREA SALES MANAGER' or Designation='DEPUTY BRANCH MANAGER' or Designation='BRANCH MANAGER' or Designation='Sr BRANCH MANAGER' or Designation='DIVISIONAL SALES MANAGER' or Designation='Sr DIVISIONAL SALES MANAGER' or Designation='ASSISTANT REGIONAL SALES MANAGER' or Designation='REGIONAL SALES MANAGER' or Designation='Sr REGIONAL SALES MANAGER' or Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR' )";
                }
                else if (Desig == "SRBM_DSM_SRDSM_ARSM_RSM_SRRSM")
                {
                    query = "select * from tbl_registration where (Designation='Sr BRANCH MANAGER' or Designation='DIVISIONAL SALES MANAGER' or Designation='Sr DIVISIONAL SALES MANAGER' or Designation='ASSISTANT REGIONAL SALES MANAGER' or Designation='REGIONAL SALES MANAGER' or Designation='Sr REGIONAL SALES MANAGER' or Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }
                else if (Desig == "AGM_DGM_GM_SRGM_AVP")
                {
                    query = "select * from tbl_registration where (Designation='ASSISTANT GENERAL MANAGER' or Designation='DEPUTY GENERAL MANAGER' or Designation='GENERAL MANAGER' or Designation='Sr GENERAL MANAGER' or Designation='ASSISTANT VICE PRESIDENT' or Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }
                else if (Desig == "MD_VP_SRVP_D_ED_CED")
                {
                    query = "select * from tbl_registration where (Designation='MANAGING DIRECTOR' or Designation='VICE PRESIDENT' or Designation='Sr VICE PRESIDENT' or Designation='DIRECTOR' or Designation='EXECUTIVE DIRECTOR' or Designation='CHIEF MANAGING DIRECTOR')";
                }

                activitylog.Activitylogins("tbl_registration", Desig, query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (pagename == "Group")
                {
                    tablename = "tbl_group";
                    columnname = "Employee_rowid";
                }
                else if (pagename == "Team")
                {
                    tablename = "tbl_team";
                    columnname = "Rowid";
                }
                else if (pagename == "Branch")
                {
                    tablename = "tbl_branch1";
                    columnname = "Rowid";
                }
                else if (pagename == "Division")
                {
                    tablename = "tbl_division";
                    columnname = "Rowid";
                }
                else if (pagename == "Region")
                {
                    tablename = "tbl_region";
                    columnname = "Rowid";
                }
                else if (pagename == "Zone")
                {
                    tablename = "tbl_zone";
                    columnname = "Rowid";
                }
                else if (pagename == "Company")
                {
                    tablename = "tbl_company";
                    columnname = "Rowid";
                }
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string selquery = "select * from "+tablename+" where "+columnname+"='" + dt.Rows[i]["Id"] + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable seldt = db.GetAllRecord(selquery);
                        if (seldt.Rows.Count > 0)
                        {

                        }
                        else
                        {
                            res += "<option value= '" + dt.Rows[i]["Id"] + "'> " + dt.Rows[i]["Name"] + "</option>";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Company()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Company(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var company = Request.Form["company"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_company set Status='Inactive' where Companyid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_company where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Companyid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_company set Company='" + company + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_company set Companyid='" + hid + "',Company='" + company + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'   where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);


                                //}
                                string insquery = "insert into tbl_company(Companyid,Company,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + hid + "','" + company + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                db.InsertUpdateDelete(insquery);
                            }
                            else
                            {
                                string insquery = "insert into tbl_company(Companyid,Company,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + hid + "','" + company + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                db.InsertUpdateDelete(insquery);

                                
                            }

                            string upgroupquery = "update tbl_group set Companyid='" + hid + "',Companyname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upgroupquery);

                            string upteamquery = "update tbl_team set Companyid='" + hid + "',Regionname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upteamquery);

                            string upbranchquery = "update tbl_branch1 set Companyid='" + hid + "',Companyname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upbranchquery);

                            string updivisionquery = "update tbl_division set Companyid='" + hid + "',Companyname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(updivisionquery);

                            string upregionquery = "update tbl_region set Companyid='" + hid + "',Companyname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upregionquery);

                            string upzonequery = "update tbl_zone set Companyid='" + hid + "',Companyname='" + company + "' where Zoneid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upzonequery);
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_company where Company='" + company + "' and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Company Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string companyid = "C" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            string upteamquery = "update tbl_team set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            string upbranchquery = "update tbl_branch1 set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            string updivisionquery = "update tbl_division set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            string upregionquery = "update tbl_region set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            string upzonequery = "update tbl_zone set Companyid='" + companyid + "',Companyname='" + company + "' where ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_company(Companyid,Company,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + companyid + "','" + company + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"] + "" == "Member")
                                {
                                    upgroupquery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upteamquery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upbranchquery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    updivisionquery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upregionquery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upzonequery += "Zoneid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_company", db.getmaxid("tbl_company").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    if (upteamquery.EndsWith("or "))
                                    {
                                        upteamquery = upteamquery.Substring(0, upteamquery.Length - 3) + " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upteamquery);
                                    }
                                    if (upbranchquery.EndsWith("or "))
                                    {
                                        upbranchquery = upbranchquery.Substring(0, upbranchquery.Length - 3) + " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upbranchquery);
                                    }
                                    if (updivisionquery.EndsWith("or "))
                                    {
                                        updivisionquery = updivisionquery.Substring(0, updivisionquery.Length - 3) + " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(updivisionquery);
                                    }
                                    if (upregionquery.EndsWith("or "))
                                    {
                                        upregionquery = upregionquery.Substring(0, upregionquery.Length - 3) + " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upregionquery);
                                    }
                                    if (upzonequery.EndsWith("or "))
                                    {
                                        upzonequery = upzonequery.Substring(0, upzonequery.Length - 3) + " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upzonequery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateCompany(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_company where Companyid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_company", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Zone()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Zone(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var zone = Request.Form["zone"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_zone set Status='Inactive' where Zoneid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_zone where Uniquid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Zoneid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_zone set Zone='" + zone + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_zone set Zoneid='" + hid + "',Zone='" + zone + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'   where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);


                                //}
                                string selgqiery = "select * from tbl_zone where Zoneid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_zone(Companyid,Companyname,Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + hid + "','" + zone + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }
                                else
                                {
                                    string insquery = "insert into tbl_zone(Companyid,Companyname,Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','" + hid + "','" + zone + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }
                            }
                            else
                            {
                                string selgqiery = "select * from tbl_zone where Zoneid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_zone(Companyid,Companyname,Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + hid + "','" + zone + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                    

                                }
                                else
                                {
                                    string insquery = "insert into tbl_zone(Companyid,Companyname,Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','" + hid + "','" + zone + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                    

                                }

                                

                                
                            }

                            string upgroupquery = "update tbl_group set Zoneid='" + hid + "',Zonename='" + zone + "' where Regionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upgroupquery);

                            string upteamquery = "update tbl_team set Zoneid='" + hid + "',Zonename='" + zone + "' where Regionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upteamquery);

                            string upbranchquery = "update tbl_branch1 set Zoneid='" + hid + "',Zonename='" + zone + "' where Regionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upbranchquery);

                            string updivisionquery = "update tbl_division set Zoneid='" + hid + "',Zonename='" + zone + "' where Regionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(updivisionquery);

                            string upregionquery = "update tbl_region set Zoneid='" + hid + "',Zonename='" + zone + "' where Regionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upregionquery);
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_zone where Zone='" + zone + "' and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Zone Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string zoneid = "Z" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Zoneid='" + zoneid + "',Zonename='" + zone + "' where ";
                            string upteamquery = "update tbl_team set Zoneid='" + zoneid + "',Zonename='" + zone + "' where ";
                            string upbranchquery = "update tbl_branch1 set Zoneid='" + zoneid + "',Zonename='" + zone + "' where ";
                            string updivisionquery = "update tbl_division set Zoneid='" + zoneid + "',Zonename='" + zone + "' where ";
                            string upregionquery = "update tbl_region set Zoneid='" + zoneid + "',Zonename='" + zone + "' where ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_zone(Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + zoneid + "','" + zone + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"] + "" == "Member")
                                {
                                    upgroupquery += "Regionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upteamquery += "Regionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upbranchquery += "Regionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    updivisionquery += "Regionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upregionquery += "Regionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_zone", db.getmaxid("tbl_zone").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    if (upteamquery.EndsWith("or "))
                                    {
                                        upteamquery = upteamquery.Substring(0, upteamquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upteamquery);
                                    }
                                    if (upbranchquery.EndsWith("or "))
                                    {
                                        upbranchquery = upbranchquery.Substring(0, upbranchquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upbranchquery);
                                    }
                                    if (updivisionquery.EndsWith("or "))
                                    {
                                        updivisionquery = updivisionquery.Substring(0, updivisionquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(updivisionquery);
                                    }
                                    if (upregionquery.EndsWith("or "))
                                    {
                                        upregionquery = upregionquery.Substring(0, upregionquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upregionquery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateZone(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_zone where Zoneid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_zone", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Region()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Region(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var region = Request.Form["region"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_region set Status='Inactive' where Regionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_region where Uniquid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Regionid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_region set Region='" + region + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_region set Regionid='" + hid + "',Region='" + region + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'   where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);


                                //}
                                string selgqiery = "select * from tbl_region where Regionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_region(Companyid,Companyname,Zoneid,Zonename,Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + hid + "','" + region + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }
                                else
                                {
                                    string insquery = "insert into tbl_region(Companyid,Companyname,Zoneid,Zonename,Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','" + hid + "','" + region + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);



                                }
                            }
                            else
                            {
                                string selgqiery = "select * from tbl_region where Regionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_region(Companyid,Companyname,Zoneid,Zonename,Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + hid + "','" + region + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }
                                else
                                {
                                    string insquery = "insert into tbl_region(Companyid,Companyname,Zoneid,Zonename,Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','" + hid + "','" + region + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);



                                }

                            }

                            string upgroupquery = "update tbl_group set Regionid='" + hid + "',Regionname='" + region + "' where Divisionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upgroupquery);

                            string upteamquery = "update tbl_team set Regionid='" + hid + "',Regionname='" + region + "' where Divisionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upteamquery);

                            string upbranchquery = "update tbl_branch1 set Regionid='" + hid + "',Regionname='" + region + "' where Divisionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upbranchquery);

                            string updivisionquery = "update tbl_division set Regionid='" + hid + "',Regionname='" + region + "' where Divisionid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(updivisionquery);
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_region where Region='" + region + "' and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Region Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string regionid = "R" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Regionid='" + regionid + "',Regionname='" + region + "' where ";
                            string upteamquery = "update tbl_team set Regionid='" + regionid + "',Regionname='" + region + "' where ";
                            string upbranchquery = "update tbl_branch1 set Regionid='" + regionid + "',Regionname='" + region + "' where ";
                            string updivisionquery = "update tbl_division set Regionid='" + regionid + "',Regionname='" + region + "' where ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_region(Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + regionid + "','" + region + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"] + "" == "Member")
                                {
                                    upgroupquery += "Divisionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upteamquery += "Divisionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upbranchquery += "Divisionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    updivisionquery += "Divisionid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_region", db.getmaxid("tbl_region").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    if (upteamquery.EndsWith("or "))
                                    {
                                        upteamquery = upteamquery.Substring(0, upteamquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upteamquery);
                                    }
                                    if (upbranchquery.EndsWith("or "))
                                    {
                                        upbranchquery = upbranchquery.Substring(0, upbranchquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upbranchquery);
                                    }
                                    if (updivisionquery.EndsWith("or "))
                                    {
                                        updivisionquery = updivisionquery.Substring(0, updivisionquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(updivisionquery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateRegion(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_region where Regionid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_region", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Division()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Division(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var division = Request.Form["division"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_division set Status='Inactive' where Divisionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_division where Uniquid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Divisionid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_division set Division='" + division + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_division set Divisionid='" + hid + "',Division='" + division + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'   where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);

                                //}
                                string selgqiery = "select * from tbl_division where Divisionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_division(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + hid + "','" + division + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_division(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','" + hid + "','" + division + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                            }
                            else
                            {
                                string selgqiery = "select * from tbl_division where Divisionid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_division(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + hid + "','" + division + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_division(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','" + hid + "','" + division + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }

                                

                                
                            }
                            string upgroupquery = "update tbl_group set Divisionid='" + hid + "',Divisionname='" + division + "' where Branchid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upgroupquery);

                            string upteamquery = "update tbl_team set Divisionid='" + hid + "',Divisionname='" + division + "' where Branchid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upteamquery);

                            string upbranchquery = "update tbl_branch1 set Divisionid='" + hid + "',Divisionname='" + division + "' where Branchid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upbranchquery);
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_division where Division='" + division + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Division Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string divisionid = "D" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Divisionid='" + divisionid + "',Divisionname='" + division + "' where ";
                            string upteamquery = "update tbl_team set Divisionid='" + divisionid + "',Divisionname='" + division + "' where ";
                            string upbranchquery = "update tbl_branch1 set Divisionid='" + divisionid + "',Divisionname='" + division + "' where ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_division(Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + divisionid + "','" + division + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"] + "" == "Member")
                                {
                                    upgroupquery += "Branchid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upteamquery += "Branchid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upbranchquery += "Branchid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_division", db.getmaxid("tbl_division").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    if (upteamquery.EndsWith("or "))
                                    {
                                        upteamquery = upteamquery.Substring(0, upteamquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upteamquery);
                                    }
                                    if (upbranchquery.EndsWith("or "))
                                    {
                                        upbranchquery = upbranchquery.Substring(0, upbranchquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upbranchquery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateDivision(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_division where Divisionid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_division", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Branch1()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Branch1(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var branch = Request.Form["branch"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_branch1 set Status='Inactive' where Branchid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_branch1 where Uniquid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Branchid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_branch1 set Branch='" + branch + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_branch1 set Branchid='" + hid + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Branch='" + branch + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'   where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                string selgqiery = "select * from tbl_branch1 where Branchid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_branch1(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + hid + "','" + branch + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_branch1(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','" + hid + "','" + branch + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }
                            }
                            else
                            {
                                string selgqiery = "select * from tbl_branch1 where Branchid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_branch1(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + hid + "','" + branch + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_branch1(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','" + hid + "','" + branch + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);


                                }


                                

                            }

                            string upgroupquery = "update tbl_group set Branchid='" + hid + "',Branchname='" + branch + "' where Teamid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upgroupquery);

                            string upteamquery = "update tbl_team set Branchid='" + hid + "',Branchname='" + branch + "' where Teamid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            db.InsertUpdateDelete(upteamquery);
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_branch1 where Branch='" + branch + "' and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Branch Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string branchid = "B" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Branchid='" + branchid + "',Branchname='" + branch + "' where ";
                            string upteamquery = "update tbl_team set Branchid='" + branchid + "',Branchname='" + branch + "' where ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_branch1(Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + branchid + "','" + branch + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"] + "" == "Member")
                                {
                                    upgroupquery += "Teamid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                    upteamquery += "Teamid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_branch", db.getmaxid("tbl_branch").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    if (upteamquery.EndsWith("or "))
                                    {
                                        upteamquery = upteamquery.Substring(0, upteamquery.Length - 3)+ " and Month_Year='" + Month + "-" + Year + "'";
                                        db.InsertUpdateDelete(upteamquery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateBranch1(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_branch1 where Branchid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_branch1", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Team()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Team(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var team = Request.Form["team"];
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {

                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_team set Status='Inactive' where Teamid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_team where Uniquid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if (seldt.Rows[0]["Teamid"] + "" == hid)
                                //{
                                //    string upquery = "update tbl_team set Team='" + team + "' ,Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //    string upgroupquery = "update tbl_group set Teamid='" + hid + "',Teamname='" + team + "' where Groupid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upgroupquery);

                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_team set Teamid='" + hid + "',Team='" + team + "',Name='" + dtres.Rows[i]["Employee_Name"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "'  where Uniquid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upquery);

                                //    string upgroupquery = "update tbl_group set Teamid='" + hid + "',Teamname='" + team + "' where Groupid='" + dtres.Rows[i]["Employee_id"] + "'";
                                //    db.InsertUpdateDelete(upgroupquery);

                                //}
                                string selgqiery = "select * from tbl_team where Teamid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_team(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + selgdt.Rows[0]["Branchid"] + "','" + selgdt.Rows[0]["Branchname"] + "','" + hid + "','" + team + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_team(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','','','" + hid + "','" + team + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                string upgroupquery = "update tbl_group set Teamid='" + hid + "',Teamname='" + team + "' where Groupid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                                db.InsertUpdateDelete(upgroupquery);
                            }
                            else
                            {
                                string selgqiery = "select * from tbl_team where Teamid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_team(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + selgdt.Rows[0]["Branchid"] + "','" + selgdt.Rows[0]["Branchname"] + "','" + hid + "','" + team + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                else
                                {
                                    string insquery = "insert into tbl_team(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','','','" + hid + "','" + team + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);

                                }
                                

                                string upgroupquery = "update tbl_group set Teamid='" + hid + "',Teamname='" + team + "' where Groupid='" + dtres.Rows[i]["Employee_id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                                db.InsertUpdateDelete(upgroupquery);

                            }
                        }
                        msg = "Data Saved";
                    }
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {

                        string selquery = "select * from tbl_team where Team='" + team + "'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Team Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string teamid = "T" + currentYearmonth + "" + arandom(5);
                            string upgroupquery = "update tbl_group set Teamid='" + teamid + "',Teamname='" + team + "' where  Month_Year='" + Month + "-" + Year + "' and ";
                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_team(Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + teamid + "','" + team + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "') ";
                                if (dtres.Rows[i]["Member_Type"]+"" == "Member")
                                {
                                    upgroupquery += "Groupid='" + dtres.Rows[i]["Employee_id"] + "' or ";
                                }
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_group", db.getmaxid("tbl_group").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                                    if (upgroupquery.EndsWith("or "))
                                    {
                                        upgroupquery = upgroupquery.Substring(0, upgroupquery.Length - 3);
                                        db.InsertUpdateDelete(upgroupquery);
                                    }
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }
                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateTeam(string Up, string Month, string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_team where Teamid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_team", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Group()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Group(string status)
        {
            string msg = "";
            var restableObject = Request.Form["restableObject"];
            var hid = Request.Form["hid"];
            var group = Request.Form["group"]; 
            var Month = Request.Form["month"];
            var Year = Request.Form["year"];
            try
            {
                DataTable dtres = Encryption.ConvertJSONToDataTable(restableObject);
                if (hid != "" && hid != null)
                {
                    if (dtres.Rows.Count > 0)
                    {
                        db.InsertUpdateDelete("update tbl_group set Status='Inactive' where Groupid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'");
                        for (int i = 0; i < dtres.Rows.Count; i++)
                        {
                            string selqiery = "select * from tbl_group where Employee_rowid='" + dtres.Rows[i]["Id"] + "' and Month_Year='" + Month + "-" + Year + "'";
                            DataTable seldt = db.GetAllRecord(selqiery);
                            if (seldt.Rows.Count > 0)
                            {
                                //if(seldt.Rows[0]["Groupid"]+""== hid)
                                //{
                                //    string upquery = "update tbl_group set Groups='" + group + "',Employee_name='" + dtres.Rows[i]["Employee_Name"] + "',Employee_id='" + dtres.Rows[i]["Employee_id"] + "',Status='Active',Member_type='"+ dtres.Rows[i]["Member_Type"] + "' where Employee_rowid='" + dtres.Rows[i]["Id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                //else
                                //{
                                //    string upquery = "update tbl_group set Groupid='" + hid + "',Groups='" + group + "',Employee_name='" + dtres.Rows[i]["Employee_Name"] + "',Employee_id='" + dtres.Rows[i]["Employee_id"] + "',Status='Active',Member_type='" + dtres.Rows[i]["Member_Type"] + "' where Employee_rowid='" + dtres.Rows[i]["Id"] + "'";
                                //    db.InsertUpdateDelete(upquery);
                                //}
                                string selgqiery = "select * from tbl_group where Groupid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_group(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Teamname,Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + selgdt.Rows[0]["Branchid"] + "','" + selgdt.Rows[0]["Branchname"] + "','" + selgdt.Rows[0]["Teamid"] + "','" + selgdt.Rows[0]["Teamname"] + "','" + hid + "','" + group + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                }
                                else
                                {
                                    string insquery = "insert into tbl_group(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Teamname,Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','','','','','" + hid + "','" + group + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                }

                            }
                            else
                            {
                                string selgqiery = "select * from tbl_group where Groupid='" + hid + "' and Month_Year='" + Month + "-" + Year + "'";
                                DataTable selgdt = db.GetAllRecord(selgqiery);
                                if (selgdt.Rows.Count > 0)
                                {
                                    string insquery = "insert into tbl_group(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Teamname,Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt .Rows[0]["Companyid"] + "','" + selgdt.Rows[0]["Companyname"] + "','" + selgdt.Rows[0]["Zoneid"] + "','" + selgdt.Rows[0]["Zonename"] + "','" + selgdt.Rows[0]["Regionid"] + "','" + selgdt.Rows[0]["Regionname"] + "','" + selgdt.Rows[0]["Divisionid"] + "','" + selgdt.Rows[0]["Divisionname"] + "','" + selgdt.Rows[0]["Branchid"] + "','" + selgdt.Rows[0]["Branchname"] + "','" + selgdt.Rows[0]["Teamid"] + "','" + selgdt.Rows[0]["Teamname"] + "','" + hid + "','" + group + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','"+ Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                }
                                else
                                {
                                    string insquery = "insert into tbl_group(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Teamname,Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('','','','','','','','','','','','','" + hid + "','" + group + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','"+ Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                                }
                            }
                        }
                        msg = "Data Saved";
                    }
                    
                }
                else
                {
                    if (dtres.Rows.Count > 0)
                    {
                        
                        string selquery = "select * from tbl_group where Groups='" + group + "' and Month_Year='" + Month + "-" + Year + "'";
                        DataTable dt = db.GetAllRecord(selquery);
                        if (dt.Rows.Count > 0)
                        {
                            msg = "This Group Already Exist";
                        }
                        else
                        {
                            string query = "";
                            string subquery = "";
                            DateTime currentDate = DateTime.Now;
                            string currentYearmonth = currentDate.Day + "" + currentDate.Month + "" + currentDate.Year;
                            string groupid = "G" + currentYearmonth + "" + arandom(5);

                            for (int i = 0; i < dtres.Rows.Count; i++)
                            {
                                subquery += "insert into tbl_group(Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + groupid + "','" + group + "','" + dtres.Rows[i]["Member_Type"] + "','" + dtres.Rows[i]["Employee_Name"] + "','" + dtres.Rows[i]["Employee_id"] + "','" + dtres.Rows[i]["Id"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month+"-"+Year + "') ";
                            }
                            if (subquery != "")
                            {
                                if (subquery.EndsWith(","))
                                {
                                    subquery = subquery.Substring(0, subquery.Length - 1);
                                }

                                query += subquery;

                                if (db.InsertUpdateDelete(query))
                                {
                                    activitylog.Activitylogins("tbl_group", db.getmaxid("tbl_group").ToString(), query, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Saved";
                                }
                                else
                                {
                                    activitylog.Activitylogins("tbl_group", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                                    msg = "Data Save Failed";
                                }
                            }
                            
                        }
                    }
                    
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return Content(msg);
        }
        public JsonResult UpdateGroup(string Up,string Month,string Year)
        {
            string res = "";
            try
            {
                string query = "select * from tbl_group where Groupid='" + Up + "' and Month_Year='" + Month + "-" + Year + "' and Status='Active'";
                activitylog.Activitylogins("tbl_group", Up.ToString(), query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    res = JsonConvert.SerializeObject(dt, Formatting.None);
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult CopyORG(string Page)
        {
            string res = "";
            try
            {
                string query = "";
                if (Page == "Group")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_group";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_group where Status='Active' and Month_Year='"+ hgsddt.Rows[0]["Month_Yearmax"]+"" + "' ";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_group(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Teamname,Groupid,Groups,Member_type,Employee_name,Employee_id,Employee_rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zonename"] + "','" + selgdt.Rows[i]["Regionid"] + "','" + selgdt.Rows[i]["Regionname"] + "','" + selgdt.Rows[i]["Divisionid"] + "','" + selgdt.Rows[i]["Divisionname"] + "','" + selgdt.Rows[i]["Branchid"] + "','" + selgdt.Rows[i]["Branchname"] + "','" + selgdt.Rows[i]["Teamid"] + "','" + selgdt.Rows[i]["Teamname"] + "','" + selgdt.Rows[i]["Groupid"] + "','" + selgdt.Rows[i]["Groups"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Employee_name"] + "','" + selgdt.Rows[i]["Employee_id"] + "','" + selgdt.Rows[i]["Employee_rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                            db.InsertUpdateDelete(insquery);
                        }
                    }

                }
                else if (Page == "Team")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_team";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_team where Status='Active' and Month_Year='"+ hgsddt.Rows[0]["Month_Yearmax"] +""+ "'";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_team(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branchname,Teamid,Team,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zonename"] + "','" + selgdt.Rows[i]["Regionid"] + "','" + selgdt.Rows[i]["Regionname"] + "','" + selgdt.Rows[i]["Divisionid"] + "','" + selgdt.Rows[i]["Divisionname"] + "','" + selgdt.Rows[i]["Branchid"] + "','" + selgdt.Rows[i]["Branchname"] + "','" + selgdt.Rows[i]["Teamid"] + "','" + selgdt.Rows[i]["Team"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                            db.InsertUpdateDelete(insquery);

                        }
                    }
                }
                else if (Page == "Branch")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_branch1";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_branch1 where Status='Active' and Month_Year='" + hgsddt.Rows[0]["Month_Yearmax"] + "" + "'";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_branch1(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Divisionname,Branchid,Branch,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zonename"] + "','" + selgdt.Rows[i]["Regionid"] + "','" + selgdt.Rows[i]["Regionname"] + "','" + selgdt.Rows[i]["Divisionid"] + "','" + selgdt.Rows[i]["Divisionname"] + "','" + selgdt.Rows[i]["Branchid"] + "','" + selgdt.Rows[i]["Branch"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                            db.InsertUpdateDelete(insquery);

                        }
                    }
                }
                else if (Page == "Region")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_region";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_region where Status='Active' and Month_Year='" + hgsddt.Rows[0]["Month_Yearmax"] + "" + "'";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_region(Companyid,Companyname,Zoneid,Zonename,Regionid,Region,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zonename"] + "','" + selgdt.Rows[i]["Regionid"] + "','" + selgdt.Rows[i]["Region"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                            db.InsertUpdateDelete(insquery);

                        }
                    }
                }
                else if (Page == "Division")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_division";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_division where Status='Active' and Month_Year='" + hgsddt.Rows[0]["Month_Yearmax"] + "" + "'";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {

                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_division(Companyid,Companyname,Zoneid,Zonename,Regionid,Regionname,Divisionid,Division,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zonename"] + "','" + selgdt.Rows[i]["Regionid"] + "','" + selgdt.Rows[i]["Regionname"] + "','" + selgdt.Rows[i]["Divisionid"] + "','" + selgdt.Rows[i]["Division"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                            db.InsertUpdateDelete(insquery);
                        }
                    }
                }
                else if (Page == "Zone")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_zone";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_zone where Status='Active' and Month_Year='" + hgsddt.Rows[0]["Month_Yearmax"] + "" + "' ";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                            string insquery = "insert into tbl_zone(Companyid,Companyname,Zoneid,Zone,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Companyname"] + "','" + selgdt.Rows[i]["Zoneid"] + "','" + selgdt.Rows[i]["Zone"] + "','" + selgdt.Rows[i]["Member_type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                    db.InsertUpdateDelete(insquery);
                        }
                    }
                }
                else if (Page == "Company")
                {
                    string sjd = "  select MAX(Month_Year) as Month_Yearmax from tbl_company";
                    DataTable hgsddt = db.GetAllRecord(sjd);
                    string[] Month_Year2 = hgsddt.Rows[0]["Month_Yearmax"].ToString().Split('-');
                    int Month = Convert.ToInt32(Month_Year2[0]);
                    int Year = Convert.ToInt32(Month_Year2[1]);
                    if (Month_Year2[0] == "12")
                    {
                        Month = 1;
                        Year += 1;
                    }
                    else
                    {
                        Month += 1;
                    }
                    query = "Select * from tbl_company where Status='Active'  and Month_Year='" + hgsddt.Rows[0]["Month_Yearmax"] + "" + "'";
                    DataTable selgdt = db.GetAllRecord(query);
                    if (selgdt.Rows.Count > 0)
                    {
                        
                        for (int i = 0; i < selgdt.Rows.Count; i++)
                        {
                                string insquery = "insert into tbl_company(Companyid,Company,Member_type,Name,Uniquid,Rowid,Status,Logname,Logid,Date_time,Month,Year,Month_Year) values('" + selgdt.Rows[i]["Companyid"] + "','" + selgdt.Rows[i]["Company"] + "','" + selgdt.Rows[i]["Member_Type"] + "','" + selgdt.Rows[i]["Name"] + "','" + selgdt.Rows[i]["Uniquid"] + "','" + selgdt.Rows[i]["Rowid"] + "','Active','" + Session["suname"] + "','" + Session["suid"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Month + "','" + Year + "','" + Month + "-" + Year + "')";
                                db.InsertUpdateDelete(insquery);

                            }
                    }
                }
            }
            catch (Exception ex)
            {
                res = "Error";
            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetRecordorg(string Tablename, string Columnname, string columnvalue)
        {
            string res = "";
            try
            {
                string query = "select * from " + Tablename + " where "+ Columnname + "='"+ columnvalue + "'";
                activitylog.Activitylogins("tbl_region","", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");

                res = JsonConvert.SerializeObject(dt, Formatting.None);
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DeleteanyAllORG(string Up,string pagename,string Month, string Year)
        {
            string res = "";
            string query = "";
            try
            {
                if (pagename == "Group")
                {
                    query = "delete from tbl_group where Groupid='"+ Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Team")
                {
                    query = "delete from tbl_group where Teamid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Teamid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Branch")
                {

                    query = "delete from tbl_group where Branchid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Branchid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_branch1 where Branchid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_branch1", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Division")
                {

                    query = "delete from tbl_group where Divisionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Divisionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_branch1 where Divisionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_branch1", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_division where Divisionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_division", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Region")
                {

                    query = "delete from tbl_group where Regionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Regionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_branch1 where Regionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_branch1", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_division where Regionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_division", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_region where Regionid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_region", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Zone")
                {
                    query = "delete from tbl_group where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_branch1 where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_branch1", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_division where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_division", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_region where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_region", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_zone where Zoneid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_zone", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
                else if (pagename == "Company")
                {
                    query = "delete from tbl_group where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_group", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_team where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_team", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_branch1 where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_branch1", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_division where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_division", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_region where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_region", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_zone where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_zone", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                    query = "delete from tbl_company where Companyid='" + Up + "'and  Month_Year='" + Month + "-" + Year + "'";
                    db.InsertUpdateDelete(query);
                    activitylog.Activitylogins("tbl_company", "", query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());

                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DeleteanyORG(string tablename,string Up)
        {
            string res = "";
            try
            {
                string query = "Update "+ tablename + " Set Status='Inactive' where Id='" + Up + "'";

                if (db.InsertUpdateDelete(query))
                {
                    activitylog.Activitylogins(tablename, Up.ToString(), query, "Success", "Delete Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    res = "Delete Success";
                }
                else
                {
                    activitylog.Activitylogins(tablename, Up.ToString(), query, "Failed", "Delete Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    res = "Delete Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                res = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(res, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Organization Master Mgt Open
        /// </summary>


        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Leave()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Leave(FormCollection form, HttpPostedFileBase attatch)
        {
            try
            {
                string acode = Session["suid"] + "";
                string auname = Session["suname"] + "";
                string query = "", descemp = "";
                int getpendingleave;
                string empid = "";

                string fileName = "", attatchpth = "";
                if (attatch != null)
                {
                    string respth = APIs.LeaveUpload(attatch);
                    if (respth != "" && respth != null)
                    {
                        attatchpth = respth;
                    }
                    else
                    {
                        ViewBag.msg = "File not Upload'";
                        attatchpth = "Content/Img/defaultimg1.png";
                    }
                }
                else
                {
                    ViewBag.msg = "Please select a file";
                    attatchpth = "Content/Img/defaultimg1.png";
                }
                if (form["dur"] == "Multiple")
                {
                    DateTime FDT = Convert.ToDateTime(form["fromdate"]);
                    DateTime TDT = Convert.ToDateTime(form["todate"]);
                    TimeSpan difference = TDT - FDT;
                    var days = (difference.TotalDays) + 1;
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Status,Attachment,Date,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + random() + "','" + form["emprid"] + "','" + form["empid"] + "','" + form["empname"] + "','" + form["dur"] + "','" + form["fromdate"] + "','" + form["todate"] + "','" + days + "','" + form["reason"] + "','Pending','" + attatchpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["leavetype"] + "','" + form["department"] + "','" + form["desig"] + "','" + auname + "','" + acode + "','" + form["manegername"] + "','" + form["manegerid"] + "','" + Session["abrname"] + "','" + Session["abrcode"] + "')";
                    descemp = "Leave applied from " + form["fromdate"] + " to " + form["todate"] + "";
                }
                else
                {
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Status,Attachment,Date,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + random() + "','" + form["emprid"] + "','" + form["empid"] + "','" + form["empname"] + "','" + form["dur"] + "','" + form["fromdate"] + "','" + form["fromdate"] + "','1','" + form["reason"] + "','Pending','" + attatchpth + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["leavetype"] + "','" + form["department"] + "','" + form["desig"] + "','" + auname + "','" + acode + "','" + form["manegername"] + "','" + form["manegerid"] + "','" + Session["abrname"] + "','" + Session["abrcode"] + "')";
                    descemp = "Leave applied from " + form["fromdate"] + " to " + form["fromdate"] + "";
                }
                string selquery = "select Pendingleave,id from tbl_registration where Id='" + form["emprid"] + "' ";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery); ;
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    empid = sdt.Rows[0]["Id"].ToString();
                }
                else
                {
                    getpendingleave = 0;
                }
                int totalpendingleave = getpendingleave + 1;
                string regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + " where Id='" + form["emprid"] + "'";
                if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(regquery))
                {
                    string header1 = "Leave Applied Successfully";
                    string header2 = form["empname"] + " applied for leave(s)";

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + form["empid"] + "','" + form["empname"] + "','" + header1 + "','" + descemp + ".','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["suname"] + "','" + Session["suid"] + "'),('" + form["managerid"] + "','" + form["managername"] + "','" + header2 + "','" + descemp + ".','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["abrname"] + "','" + Session["abrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification(header2, descemp + " has been pending", Session["managerid"] + "");
                        Messaging.SendPushNotification(header1, descemp, form["empid"]);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Insert Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    ViewBag.msg = "Data Saved";
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    ViewBag.msg = "Data Save Error";
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult GetLeave(string Start_date, string End_date, string Department, string Empnm, string Status, string Designation,string Premise)
        {
            string res = "", tbldata = "", tbl = "", json = "";
            try
            {
                DateTime startdate = DateTime.ParseExact(Start_date, "d/M/yyyy", null);
                string formatteStart_date = startdate.ToString("yyyy-MM-dd");
                DateTime enddate = DateTime.ParseExact(End_date, "d/M/yyyy", null);
                string formattedEnd_date = enddate.ToString("yyyy-MM-dd");

                string squery = "select * from tbl_leave where (CONVERT(DATE, Date)>='" + formatteStart_date + "' and CONVERT(DATE, Date)<='" + formattedEnd_date + "') and Status !='Inactive' and Regionid=''";
                if (!string.IsNullOrEmpty(Department))
                {
                    squery += " AND Department = '" + Department + "'";
                }
                if (!string.IsNullOrEmpty(Premise))
                {
                    squery += " AND Premise = '" + Premise + "'";
                }
                if (!string.IsNullOrEmpty(Empnm))
                {
                    squery += " AND Emprowid = '" + Empnm + "'";
                }
                if (!string.IsNullOrEmpty(Designation))
                {
                    squery += " AND Designation = '" + Designation + "'";
                }
                if (!string.IsNullOrEmpty(Status))
                {
                    squery += " AND Status = '" + Status + "'";
                }
                activitylog.Activitylogins("tbl_leave", "", squery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(squery);
                activitylog.Activitylogupd("Success", "");
                json = JsonConvert.SerializeObject(dt, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                json = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }

        public ActionResult AssignLeave(int id, string Empid)
        {
            try
            {
                string url = "";
                string sid = Session["suid"] + "";
                string token = Session["gtokenid"] + "";
                if (token != null && token != "")
                {
                    url = "/Home/AppLogin?token=" + token;
                }
                else
                {
                    url = "/Home/Login";
                }
                if (sid != null && sid != "")
                {
                    string query = "select * from tbl_leave where Leave_id=" + id + " and Status!='Inactive' and Emprowid='" + Empid + "'";
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    DataTable dt = db.GetAllRecord(query);
                    activitylog.Activitylogupd("Success", "");
                    if (dt.Rows.Count > 0)
                    {
                        ViewBag.id = dt.Rows[0]["Id"] + "";
                        ViewBag.leaveid = dt.Rows[0]["Leave_id"] + "";
                        ViewBag.emprid = dt.Rows[0]["Emprowid"] + "";
                        ViewBag.empid = dt.Rows[0]["Employeeid"] + "";
                        ViewBag.empname = dt.Rows[0]["Name"] + "";
                        ViewBag.Premise = dt.Rows[0]["Premise"] + "";
                        ViewBag.Regionid = dt.Rows[0]["Regionid"] + "";
                        ViewBag.depart = dt.Rows[0]["Department"] + "";
                        ViewBag.empmanagername = dt.Rows[0]["Managername"] + "";
                        ViewBag.empmanagerid = dt.Rows[0]["Managercode"] + "";
                        ViewBag.desig = dt.Rows[0]["Designation"] + "";
                        ViewBag.leavetype = dt.Rows[0]["Leave_type"] + "";
                        ViewBag.duratuon = dt.Rows[0]["Leaveduration"] + "";
                        ViewBag.fromdate = dt.Rows[0]["From_date"] + "";
                        ViewBag.todate = dt.Rows[0]["To_date"] + "";
                        ViewBag.totalday = dt.Rows[0]["Total_day"] + "";
                        ViewBag.logid = dt.Rows[0]["LogId"] + "";
                        ViewBag.logname = dt.Rows[0]["Logname"] + "";
                        ViewBag.reason = dt.Rows[0]["Reason"] + "";
                        DateTime date = DateTime.Parse(dt.Rows[0]["Date"] + "");
                        ViewBag.reqdate = date.ToString("yyyy-MM-dd");
                        ViewBag.attatchment = dt.Rows[0]["Attachment"] + "";
                        DateTime fdate = DateTime.Parse(dt.Rows[0]["From_date"] + "");
                        ViewBag.fromDate = fdate.ToString("yyyy-MM-dd");
                        DateTime tdate = DateTime.Parse(dt.Rows[0]["To_date"] + "");
                        ViewBag.toDate = tdate.ToString("yyyy-MM-dd");
                        ViewBag.BranchName = dt.Rows[0]["BranchName"] + "";
                        ViewBag.BranchCode = dt.Rows[0]["BranchCode"] + "";
                    }
                }
                else
                {
                    Response.Redirect(url); ;
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }

            return View();
        }
        [HttpPost]
        public ActionResult AssignLeave(FormCollection form)
        {
            try
            {
                int getpendingleave, gettotalleave, getbalanceleave, getapproveleave, getLPWleave, totalLWPleave, totalpendingleave, totalapproveleave, totalbalanceleave, totalDays, finalappproveleave;
                string regquery, empid = "", query;
                DateTime FDT = Convert.ToDateTime(form["employeefromdate"]);
                DateTime TDT = Convert.ToDateTime(form["employeetodate"]);
                TimeSpan difference = TDT - FDT;
                var days = (difference.TotalDays) + 1;

                string descemp = "Leave applied from " + FDT.ToString("yyyy-MM-dd") + " to " + TDT.ToString("yyyy-MM-dd") + " has been " + form["employeestatus"] + "";

                if (form["employeestatus"] == "DForwarded")
                {
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Remark,Date,Status,Director,Attachment,Approvaldate,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + form["leaveid"] + "','" + form["emprid"] + "','" + form["employeeid"] + "','" + form["employeename"] + "','" + form["employeedur"] + "','" + FDT.ToString("yyyy-MM-dd") + "','" + TDT.ToString("yyyy-MM-dd") + "','" + days + "','" + form["reason"] + "','" + form["Remark"] + "','" + form["reqdate"] + "','" + form["employeestatus"] + "','Admin','" + form["attatchment"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["employeeltype"] + "','" + form["employeedepartment"] + "','" + form["employeedesig"] + "','" + Session["suname"] + "','" + Session["suid"] + "','" + form["employeemanagername"] + "','" + form["employeemanagerid"] + "','" + form["BranchName"] + "','" + form["BranchCode"] + "','" + form["premise"] + "','" + form["regionid"] + "')";
                }
                else
                {
                    query = "INSERT INTO tbl_leave(Leave_id,Emprowid,Employeeid,Name,Leaveduration,From_date,To_date,Total_day,Reason,Remark,Date,Status,Attachment,Approvaldate,Leave_type,Department,Designation,Logname,LogId,Managername,Managercode,BranchName,BranchCode,Premise,Regionid) VALUES('" + form["leaveid"] + "','" + form["emprid"] + "','" + form["employeeid"] + "','" + form["employeename"] + "','" + form["employeedur"] + "','" + FDT.ToString("yyyy-MM-dd") + "','" + TDT.ToString("yyyy-MM-dd") + "','" + days + "','" + form["reason"] + "','" + form["Remark"] + "','" + form["reqdate"] + "','" + form["employeestatus"] + "','" + form["attatchment"] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + form["employeeltype"] + "','" + form["employeedepartment"] + "','" + form["employeedesig"] + "','" + Session["suname"] + "','" + Session["suid"] + "','" + form["employeemanagername"] + "','" + form["employeemanagerid"] + "','" + form["BranchName"] + "','" + form["BranchCode"] + "','" + form["premise"] + "','" + form["regionid"] + "')";

                }

                string upquery = "update tbl_leave set Status='Inactive' where Leave_id='" + form["leaveid"] + "'";

                string selquery = "select * from tbl_registration where Id='" + form["emprid"] + "'";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery);
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    empid = sdt.Rows[0]["Id"].ToString();
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    gettotalleave = Convert.ToInt32(sdt.Rows[0]["Totalleave"]);
                    getbalanceleave = Convert.ToInt32(sdt.Rows[0]["Balanceleave"]);
                    getapproveleave = Convert.ToInt32(sdt.Rows[0]["Approveleave"]);
                    getLPWleave = Convert.ToInt32(sdt.Rows[0]["LWPleave"]);
                    DateTime date = DateTime.Parse(sdt.Rows[0]["Dateofjoining"] + "");
                    //joiningdate = date.ToString();
                    DateTime currentDate = DateTime.Now;

                    TimeSpan duration = currentDate - date;

                    totalDays = Convert.ToInt32(duration.TotalDays);
                }
                else
                {
                    getpendingleave = 0;
                    gettotalleave = 0;
                    getbalanceleave = 0;
                    getapproveleave = 0;
                    getLPWleave = 0;
                    totalDays = 0;
                }
                if (form["employeestatus"] == "Rejected")
                {
                    //totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    totalpendingleave = getpendingleave - 1;
                    //totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + "  where Id='" + form["emprid"] + "'";
                }
                if (form["employeestatus"] == "DForwarded")
                {
                    regquery = "update tbl_registration set Pendingleave=" + getpendingleave + "  where Id='" + form["emprid"] + "'";
                }
                else
                {
                    if (form["employeeltype"] + "" != "LWP")
                    {
                        //totalLWPleave = getLPWleave + Convert.ToInt32(days);
                        totalpendingleave = getpendingleave - 1;
                        totalapproveleave = getapproveleave + Convert.ToInt32(days);
                        finalappproveleave = totalapproveleave - getLPWleave;
                        totalbalanceleave = gettotalleave - finalappproveleave;
                        totalLWPleave = getLPWleave;

                        regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + ",Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + form["emprid"] + "'";
                    }
                    else
                    {
                        totalLWPleave = getLPWleave + Convert.ToInt32(days);
                        totalpendingleave = getpendingleave - 1;
                        totalapproveleave = getapproveleave + Convert.ToInt32(days);
                        regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ", Pendingleave=" + totalpendingleave + "  where Id='" + form["emprid"] + "'";
                    }
                    //if (totalDays >= 180)
                    //{
                    //    totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    totalpendingleave = getpendingleave - 1;
                    //    totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    //    if (getbalanceleave > 0)
                    //    {
                    //        if (days >= getbalanceleave)
                    //        {
                    //            totalbalanceleave = gettotalleave - totalapproveleave;
                    //            totalLWPleave = getLPWleave;
                    //        }
                    //        else
                    //        {
                    //            totalbalanceleave = gettotalleave - totalapproveleave;
                    //            if (totalbalanceleave < 0)
                    //            {
                    //                totalLWPleave = 0 - (totalbalanceleave);
                    //                totalbalanceleave = gettotalleave;
                    //            }
                    //            else if (totalbalanceleave == 0)
                    //            {
                    //                totalLWPleave = getLPWleave;
                    //                totalbalanceleave = gettotalleave - totalapproveleave;
                    //            }
                    //            else
                    //            {
                    //                totalLWPleave = getLPWleave;
                    //                totalbalanceleave = gettotalleave - totalapproveleave;
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        totalbalanceleave = getbalanceleave;
                    //        totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    }
                    //    regquery = "update tbl_registration set Pendingleave=" + totalpendingleave + ",LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + form["employeeid"] + "'";
                    //}
                    //else
                    //{
                    //    totalLWPleave = getLPWleave + Convert.ToInt32(days);
                    //    totalpendingleave = getpendingleave - 1;
                    //    totalapproveleave = getapproveleave + Convert.ToInt32(days);
                    //    regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + ", Pendingleave=" + totalpendingleave + "  where Id='" + form["employeeid"] + "'";
                    //}
                }
                if (db.InsertUpdateDelete(regquery) && db.InsertUpdateDelete(upquery) && db.InsertUpdateDelete(query))
                {
                    Messaging.SendPushNotification("Leave " + form["employeestatus"], descemp, Session["suid"] + "");

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + form["employeeid"] + "','" + form["employeename"] + "','Leave " + form["employeestatus"] + "','" + descemp + ".','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification("Leave " + form["employeestatus"] + " by Manager", descemp, form["employeeid"]);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }

                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", form["rvid"], upquery, "Success", "Update Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Insert Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    Response.Write("<script>window.location.href = '/Admin/Leave'</script>");
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", form["rvid"], upquery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    ViewBag.msg = "Data Save Failed";
                }
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }
        public JsonResult CancelLeave(string Id, string Employeeid, string Type, string Remerk)
        {
            string res = "", leavetype = "", leaveduration = "";
            int getpendingleave, gettotalleave, getbalanceleave, getapproveleave, getLPWleave, totalLWPleave, totalpendingleave, totalapproveleave, totalbalanceleave, totalDays;
            string regquery, empid = "";
            string Employeename = "", Managername = "", Managercode = "", Employeecode = "";
            if (Type == "Leave")
            {

                string selectleave = "select * from tbl_leave where Emprowid='" + Employeeid + "' and Leave_id='" + Id + "' and Status='Approved'";
                DataTable leavedt = db.GetAllRecord(selectleave);
                if (leavedt.Rows.Count > 0)
                {
                    leavetype = leavedt.Rows[0]["Leave_type"] + "";
                    leaveduration = leavedt.Rows[0]["Total_day"] + "";
                    Managername = leavedt.Rows[0]["Managername"] + "";
                    Managercode = leavedt.Rows[0]["Managercode"] + "";
                }

                string query = "update tbl_leave set Status='Cancel',Remark='" + Remerk + "',Approvaldate='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' where Emprowid='" + Employeeid + "' and Leave_id='" + Id + "' and Status='Approved' ";

                string selquery = "select * from tbl_registration where Id='" + Employeeid + "'";
                activitylog.Activitylogins("tbl_registration", "", selquery, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable sdt = db.GetAllRecord(selquery); ;
                activitylog.Activitylogupd("Success", "");
                if (sdt.Rows.Count > 0)
                {
                    Employeename = sdt.Rows[0]["Name"].ToString();

                    Employeecode = sdt.Rows[0]["Employee_id"] + "";
                    empid = sdt.Rows[0]["Id"].ToString();
                    getpendingleave = Convert.ToInt32(sdt.Rows[0]["Pendingleave"]);
                    gettotalleave = Convert.ToInt32(sdt.Rows[0]["Totalleave"]);
                    getbalanceleave = Convert.ToInt32(sdt.Rows[0]["Balanceleave"]);
                    getapproveleave = Convert.ToInt32(sdt.Rows[0]["Approveleave"]);
                    getLPWleave = Convert.ToInt32(sdt.Rows[0]["LWPleave"]);
                    DateTime date = DateTime.ParseExact(sdt.Rows[0]["Dateofjoining"] + "", "d/M/yyyy", null);
                    //joiningdate = date.ToString();
                    DateTime currentDate = DateTime.Now;
                    TimeSpan duration = currentDate - date;
                    totalDays = Convert.ToInt32(duration.TotalDays);
                }
                else
                {
                    getpendingleave = 0;
                    gettotalleave = 0;
                    getbalanceleave = 0;
                    getapproveleave = 0;
                    getLPWleave = 0;
                    totalDays = 0;
                }
                if (leavetype != "LWP")
                {
                    totalapproveleave = getapproveleave - Convert.ToInt32(leaveduration);
                    totalbalanceleave = getbalanceleave + Convert.ToInt32(leaveduration);


                    regquery = "update tbl_registration set Approveleave=" + totalapproveleave + ",Balanceleave=" + totalbalanceleave + " where Id='" + Employeeid + "'";
                }
                else
                {
                    totalLWPleave = getLPWleave - Convert.ToInt32(leaveduration);
                    totalapproveleave = getapproveleave - Convert.ToInt32(leaveduration);
                    regquery = "update tbl_registration set LWPleave=" + totalLWPleave + ",Approveleave=" + totalapproveleave + "  where Id='" + Employeeid + "'";
                }


                string descemp = "Leave has been Canceled by " + Managername + ".";
                if (db.InsertUpdateDelete(query) && db.InsertUpdateDelete(regquery))
                {
                    Messaging.SendPushNotification("Leave Canceled Successfully", descemp, Managercode);

                    string insquery = "insert into tbl_notification(Employeeid,Employeename,Notification_Header,Notification_Body,Status,Date_time,BranchName,BranchCode) values ('" + Employeecode + "','" + Employeename + "','" + Managername + " Canceled Leave','" + descemp + "','Unread','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + Session["ubrname"] + "','" + Session["ubrcode"] + "')";
                    if (db.InsertUpdateDelete(insquery))
                    {
                        Messaging.SendPushNotification(Managername + " Canceled Leave", descemp, Employeecode);

                        activitylog.Activitylogins("tbl_notification", db.getmaxid("tbl_notification").ToString(), insquery, "Success", "Insert Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Send";

                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_notification", "", insquery, "Failed", "Insert Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        //ViewBag.AlertMessage = "Notification Sending Failed";
                    }


                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Success", "Update Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", db.getmaxid("tbl_leave").ToString(), query, "Success", "Update Succcess", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    res = "The Application Has been Canceled Successfully.";
                }
                else
                {
                    activitylog.Activitylogins("tbl_registration", empid, regquery, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    activitylog.Activitylogins("tbl_leave", "", query, "Failed", "Update Failed", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                    res = "The Application has not been Canceled.";
                }

            }
            return Json(res, JsonRequestBehavior.AllowGet);
        }
        public ActionResult ReportsFormate()
        {
            return View();
        }
        public ActionResult Charts()
        {
            return View();
        }
        private string random()
        {
            var random = new Random();
            var numlength = 5;
            var number = string.Empty;
            var possibleChar = "1234567890";

            for (var i = 0; i < numlength; i++)
            {
                var randomIndex = random.Next(0, possibleChar.Length - 1);
                number += possibleChar[randomIndex];
            }
            return number;
        }
        private string arandom(int numlength)
        {
            var random = new Random();
            var number = string.Empty;
            var possibleChar = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";

            for (var i = 0; i < numlength; i++)
            {
                var randomIndex = random.Next(0, possibleChar.Length - 1);
                number += possibleChar[randomIndex];
            }
            return number;
        }

        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult AccountReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }


        public JsonResult GetAccountReport(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid, string status)
        
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }

                // Sample DataTable with columns "Dr," "Balance," and "Row Material"
                string proquery = "select * from tbl_pro_price_circlar where Status='Active'";
                DataTable prodt = db.GetAllRecord(proquery);

                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Date", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Group_Name", typeof(string));
                dataTable.Columns.Add("Employee", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("Invoice", typeof(string));

                dataTable.Columns.Add("proinfo", typeof(string));
                dataTable.Columns.Add("Productname", typeof(string));

                dataTable.Columns.Add("Quantity", typeof(string));
                dataTable.Columns.Add("Totalamount", typeof(string));
                dataTable.Columns.Add("advance", typeof(string));
                dataTable.Columns.Add("advancedate", typeof(string));
                dataTable.Columns.Add("Mode", typeof(string));
                dataTable.Columns.Add("Dueamount", typeof(string));
                dataTable.Columns.Add("Verifiedby", typeof(string));

                int srcount=0;
                string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Groupid,Groups,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    double points = 0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string strlogid = "";
                        int customer = 0;
                        int pmd = 0, avgpmd = 0;
                        int demos = 0;
                        int srno = i + 1;
                        string groupid = dt.Rows[i]["Groupid"] + "";
                        string groupname = dt.Rows[i]["Groups"] + "";
                        string empquery = "Select * from tbl_group where Groupid='" + groupid + "' and Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                        DataTable empdt = db.GetAllRecord(empquery);
                        if (empdt.Rows.Count > 0)
                        {
                            strlogid = "(";
                            for (int empi = 0; empi < empdt.Rows.Count; empi++)
                            {
                                strlogid += "logid='" + empdt.Rows[empi]["Employee_id"] + "' or ";
                            }
                            if (strlogid.EndsWith("or "))
                            {
                                strlogid = strlogid.Substring(0, strlogid.Length - 3);
                                strlogid += ")";
                            }

                            string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser' and Payment_status in('Active','Due','No Due')  and Customer_id!=''";
                            if (status != "" && status != null)
                            {
                                customerquery += " AND Payment_status = '" + status + "' ORDER BY Id DESC";

                            }


                            // string customerquery = "SELECT * from [tbl_order_summary] where " + strlogid + " and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "' and Membertype='Suser'";
                            DataTable customerdt = db.GetAllRecord(customerquery);
                            if (customerdt.Rows.Count > 0)
                            {
                                for (int empio = 0; empio < customerdt.Rows.Count; empio++)
                                {
                                    srcount++;
                                    DataRow newRow = dataTable.NewRow();
                                    newRow["Date"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                                    newRow["S.No"] = srcount;
                                    newRow["Group_Name"] = dt.Rows[i]["Groups"] + "";

                                    newRow["Employee"] = customerdt.Rows[empio]["logname"] + "";
                                    newRow["Customer"] = customerdt.Rows[empio]["Customer_name"] + "";

                                    string odquery = "select * from tbl_order where Order_id='" + customerdt.Rows[empio]["Order_id"] + "' and Status='Active'";
                                    DataTable oddt = db.GetAllRecord(odquery);
                                    if (oddt.Rows.Count > 0)
                                    {
                                        newRow["proinfo"] = "<table class='table table-responsive table-bordered'><thead class='theadb text-center'><tr><th>Invoice</th><th>Product name</th><th>Quantity</th><th>Points</th><th>Amount</th></tr></thead><tbody class='text-center'>";

                                        for (int odi = 0; odi < oddt.Rows.Count; odi++)
                                        {
                                            newRow["proinfo"] += "<tr><td>" + oddt.Rows[odi]["Invoiceid"] + "</td><td>" + oddt.Rows[odi]["Product_name"] + "</td><td> " + oddt.Rows[odi]["Product_quantity"] + " </td><td>" + oddt.Rows[odi]["Points"] + "</td><td> " + (Convert.ToDouble(oddt.Rows[odi]["Total_proamount"] + "")).ToString("0.0") + " </td></tr>";
                                            points += Convert.ToDouble(oddt.Rows[odi]["Points"] + "");
                                        }
                                        newRow["proinfo"] += "</tbody></table>";
                                    }
                                    double totalAmount;
                                    if (double.TryParse(customerdt.Rows[empio]["Total_amount"].ToString(), out totalAmount))
                                    {
                                        newRow["Totalamount"] = totalAmount.ToString("0.0");
                                        newRow["Dueamount"] = (totalAmount - Convert.ToDouble(customerdt.Rows[empio]["Paid_amount"])).ToString("0.0");
                                    }
                                    //   newRow["Totalamount"] = (Convert.ToDouble(customerdt.Rows[empio]["Total_amount"] + "")).ToString("0.0");
                                    newRow["advance"] = customerdt.Rows[empio]["Paid_amount"] + "";
                                    newRow["advancedate"] = customerdt.Rows[empio]["Datetime"] + "";
                                    newRow["Mode"] = customerdt.Rows[empio]["Payment_method"] + "";
                                    //    newRow["Dueamount"] = (Convert.ToDouble(customerdt.Rows[empio]["Total_amount"] + "") - Convert.ToDouble(customerdt.Rows[empio]["Paid_amount"] + "")).ToString("0.0");


                                    string trodquery = "SELECT * from [tbl_order] where Order_id='" + customerdt.Rows[empio]["Order_id"] + "' and Order_status='Confirmed'";
                                    DataTable troddt = db.GetAllRecord(trodquery);
                                    if (troddt.Rows.Count > 0)
                                    {

                                        newRow["Verifiedby"] = troddt.Rows[0]["Actionbyname"] + "";
                                    }
                                    else
                                    {

                                        newRow["Verifiedby"] = "Not Verified";
                                    }
                                    dataTable.Rows.Add(newRow);
                                }
                            }
                        }

                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                        htmlTable.Append("<thead>");
                        htmlTable.Append("<tr class='theadb text-center'>");
                        //htmlTable.Append("<th>Date</th>");
                        htmlTable.Append("<th>S.no.</th>");
                        htmlTable.Append("<th>Group Name</th>");
                        htmlTable.Append("<th>Employee</th>");
                        htmlTable.Append("<th>Customer</th>");
                        htmlTable.Append("<th>Order info</th>");
                        htmlTable.Append("<th>Total amount</th>");
                        htmlTable.Append("<th>Paid</th>");
                        htmlTable.Append("<th>Advance date</th>");
                        htmlTable.Append("<th>Mode</th>");
                        htmlTable.Append("<th>Dueamount</th>");
                        htmlTable.Append("<th>Verified by</th>");
                        htmlTable.Append("</tr>");
                        htmlTable.Append("</thead>");
                        htmlTable.Append("<tbody>");
                        for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                        {
                            htmlTable.Append("<tr>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["S.No"]).Append("</td>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["Group_Name"]).Append("</td>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["Employee"]).Append("</td>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["Customer"]).Append("</td>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["proinfo"]).Append("</td>");

                            double totalAmount;
                            if (double.TryParse(dataTable.Rows[datai]["Totalamount"].ToString(), out totalAmount))
                            {
                                htmlTable.Append("<td>").Append(totalAmount.ToString("0.0")).Append("</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td>Invalid Total Amount</td>");
                            }

                            double advanceAmount;
                            if (double.TryParse(dataTable.Rows[datai]["advance"].ToString(), out advanceAmount))
                            {
                                htmlTable.Append("<td>").Append(advanceAmount.ToString("0.0")).Append("</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td>Invalid Advance Amount</td>");
                            }

                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["advancedate"]).Append("</td>");
                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["Mode"]).Append("</td>");

                            double dueAmount;
                            if (double.TryParse(dataTable.Rows[datai]["Dueamount"].ToString(), out dueAmount))
                            {
                                htmlTable.Append("<td>").Append(dueAmount.ToString("0.0")).Append("</td>");
                            }
                            else
                            {
                                htmlTable.Append("<td>Invalid Due Amount</td>");
                            }

                            htmlTable.Append("<td>").Append(dataTable.Rows[datai]["Verifiedby"]).Append("</td>");
                            htmlTable.Append("</tr>");


                            //htmlTable.Append("<tr>");
                            ////htmlTable.Append("<td>" + dataTable.Rows[datai]["Date"] + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["Group_Name"] + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["Employee"] + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer"] + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["proinfo"] + "</td>");

                            //htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Totalamount"] + "").ToString("0.0") + "</td>");
                            //htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["advance"] + "").ToString("0.0") + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["advancedate"] + " </td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["Mode"] + " </td>");
                            //htmlTable.Append("<td>" + Convert.ToDouble(dataTable.Rows[datai]["Dueamount"] + "").ToString("0.0") + "</td>");
                            //htmlTable.Append("<td>" + dataTable.Rows[datai]["Verifiedby"] + " </td>");
                            //htmlTable.Append("</tr>");



                        }

                        double sumTotalamount = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Totalamount"]));
                        double sumadvance = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["advance"]));
                        double sumDueamount = dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Dueamount"]));
                        // Calculate the value to be displayed in the HTML table

                        htmlTable.Append("</tbody>");

                        htmlTable.Append("<tfoot>");
                        htmlTable.Append("<tr class='fw-bold fs-6'>");
                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Date"] + "</td>");
                        htmlTable.Append("<td></td>");
                        htmlTable.Append("<td></td>");
                        htmlTable.Append("<td></td>");
                        htmlTable.Append("<td> Total : </td>");
                        htmlTable.Append("<td> Total Points : "+ points + "</td>");
                        htmlTable.Append("<td>" + sumTotalamount.ToString("0.0") + "</td>");
                        htmlTable.Append("<td>" + sumadvance.ToString("0.0") + "</td>");
                        htmlTable.Append("<td> </td>");
                        htmlTable.Append("<td> </td>");
                        htmlTable.Append("<td>" + sumDueamount.ToString("0.0") + "</td>");
                        htmlTable.Append("<td> </td>");
                        htmlTable.Append("</tr>");

                        htmlTable.Append("</tfoot>");


                        htmlTable.Append("</table>");
                    }
                    else
                    {
                        //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                    }
                }
                else
                {
                    //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                //htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }


        //CHR

        /// <Reports Customer Sales Record Open>
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult CHR()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }

        public JsonResult GetCHR(int Month, int Year, string Reportfor, string Uniqueid, string Start_date, string End_date, string activity )
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                if (Reportfor == "invoice")
                {
                    columnname = "Invoiceid";
                }
                else if (Reportfor == "order")
                {
                    columnname = "Order_id";
                }
                else if (Reportfor == "customer")
                {
                    columnname = "Customer_id";
                }
                else if (Reportfor == "post")
                {
                    columnname = "Address";
                }
                else if (Reportfor == "block")
                {
                    columnname = "Block";
                }
                else if (Reportfor == "tahsil")
                {
                    columnname = "Tahsil";
                }
                else if (Reportfor == "district")
                {
                    columnname = "District";
                }
                else if (Reportfor == "state")
                {
                    columnname = "State";
                }
                else if (Reportfor == "pincode")
                {
                    columnname = "Pincode";
                }
                else
                {
                    columnname = "Order_id";
                }
                int srno = 0;
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Invoice", typeof(string));
                dataTable.Columns.Add("Delivery_Month", typeof(string));
                dataTable.Columns.Add("Sales_Person", typeof(string));
                dataTable.Columns.Add("Customer", typeof(string));
                dataTable.Columns.Add("Tahsil", typeof(string));
                dataTable.Columns.Add("District", typeof(string));
                dataTable.Columns.Add("Customer_Address", typeof(string));
                dataTable.Columns.Add("Shipping_Address", typeof(string));
                dataTable.Columns.Add("Product_Name", typeof(string));
                dataTable.Columns.Add("Quantity", typeof(string));
                dataTable.Columns.Add("Amount", typeof(decimal));
                // dataTable.Columns.Add("Amount", typeof(string));
                dataTable.Columns.Add("Current_Status", typeof(string));
                dataTable.Columns.Add("Plantation_date", typeof(string));
                dataTable.Columns.Add("Plantation_by", typeof(string));
                dataTable.Columns.Add("Counting_date", typeof(string));
                dataTable.Columns.Add("Counting_by", typeof(string));
                dataTable.Columns.Add("Good_uint", typeof(string));
                dataTable.Columns.Add("Damageunit", typeof(string));
                dataTable.Columns.Add("Reason_of_Damange", typeof(string));
                dataTable.Columns.Add("Replacement_date", typeof(string));
                dataTable.Columns.Add("Replacement_by", typeof(string));
                dataTable.Columns.Add("Replaced_plant", typeof(string));
                for (int tec = 0; tec < 5; tec++)
                {
                    dataTable.Columns.Add("Techdate" + tec, typeof(string));
                    dataTable.Columns.Add("Techby" + tec, typeof(string));
                    dataTable.Columns.Add("Techremark" + tec, typeof(string));
                }
                dataTable.Columns.Add("Complaint_For", typeof(string));
                dataTable.Columns.Add("Complaint_date", typeof(string));
                dataTable.Columns.Add("Resolve_by", typeof(string));
                dataTable.Columns.Add("Feedback_by_Customer", typeof(string));
                dataTable.Columns.Add("Feedback_by_service", typeof(string));

                DateTime date = new DateTime(Year, Month, 1); // Assuming day is the first of the month
                string formattedDate = date.ToString("MMM-yyyy");

                string orderquery = "SELECT * from [tbl_order] where Status='Active' and Order_status not in ('Active','Confirmed','Dispatch','Cancelled') and Dilivery_month='" + formattedDate + "' ";
                if (Uniqueid != null && Uniqueid != "")
                {
                    orderquery += " and " + columnname + "='" + Uniqueid + "'";
                }
                if (activity != null && activity != "")
                {
                    orderquery += " and Order_status='" + activity + "'";
                }
                DataTable orderdt = db.GetAllRecord(orderquery);
                if (orderdt.Rows.Count > 0)
                {
                    for (int orderi = 0; orderi < orderdt.Rows.Count; orderi++)
                    {
                        srno++;
                        DataRow newRow = dataTable.NewRow();
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = srno;

                        if (orderdt.Rows[orderi]["Product_type"] + "" == "Plant")
                        {
                            if (orderdt.Rows[orderi]["Order_status"] + "" == "Active" || orderdt.Rows[orderi]["Order_status"] + "" == "Cancelled")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Confirmed")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Dispatch")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Delivered")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Planted")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];


                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Counted")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";


                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Replaced")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Replacement_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Replaced_plant"] = orderdt.Rows[orderi]["Replaced_plant"];
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Technical Service")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Plantation_by"] = orderdt.Rows[orderi]["Actionbyname"];

                                newRow["Counting_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Counting_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Good_uint"] = orderdt.Rows[orderi]["Good_quantity"];
                                newRow["Damageunit"] = orderdt.Rows[orderi]["Replacement_quantity"];
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = orderdt.Rows[orderi]["ActionDatetime"];
                                newRow["Replacement_by"] = orderdt.Rows[orderi]["Actionbyname"];
                                newRow["Replaced_plant"] = orderdt.Rows[orderi]["Replaced_plant"];

                                for (int tec = 0; tec < 5; tec++)
                                {
                                    int hh = tec + 1;
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";

                                }
                                string tquery = "select * from tbl_technical_service where Order_id='" + orderdt.Rows[orderi]["Order_id"] + "' and   OrderID2='" + orderdt.Rows[orderi]["OrderID2"] + "'";
                                DataTable tdt = db.GetAllRecord(tquery);
                                if (tdt.Rows.Count > 0)
                                {
                                    for (int ti = 0; ti < tdt.Rows.Count; ti++)
                                    {
                                        newRow["Techdate" + ti] = tdt.Rows[ti]["Datetime"];
                                        newRow["Techby" + ti] = tdt.Rows[ti]["logname"];
                                        newRow["Techremark" + ti] = tdt.Rows[ti]["Remark"];
                                    }
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";

                            }
                        }
                        else
                        {
                            if (orderdt.Rows[orderi]["Order_status"] + "" == "Active" || orderdt.Rows[orderi]["Order_status"] + "" == "Cancelled")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Confirmed")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Dispatch")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }
                            else if (orderdt.Rows[orderi]["Order_status"] + "" == "Delivered")
                            {
                                newRow["Invoice"] = orderdt.Rows[orderi]["Invoiceid"];
                                newRow["Delivery_Month"] = orderdt.Rows[orderi]["Dilivery_month"];
                                newRow["Sales_Person"] = orderdt.Rows[orderi]["Orderby"];
                                newRow["Customer"] = orderdt.Rows[orderi]["Customer_name"];
                                newRow["Tahsil"] = orderdt.Rows[orderi]["Tahsil"];
                                newRow["District"] = orderdt.Rows[orderi]["District"];
                                newRow["Customer_Address"] = orderdt.Rows[orderi]["Permanent_address"];
                                newRow["Shipping_Address"] = orderdt.Rows[orderi]["Customer_address"];
                                newRow["Product_Name"] = orderdt.Rows[orderi]["Product_name"];
                                newRow["Quantity"] = orderdt.Rows[orderi]["Product_quantity"];
                                newRow["Amount"] = orderdt.Rows[orderi]["Total_proamount"];
                                newRow["Current_Status"] = orderdt.Rows[orderi]["Order_status"];

                                newRow["Plantation_date"] = "-";
                                newRow["Plantation_by"] = "-";

                                newRow["Counting_date"] = "-";
                                newRow["Counting_by"] = "-";
                                newRow["Good_uint"] = "-";
                                newRow["Damageunit"] = "-";
                                newRow["Reason_of_Damange"] = "-";

                                newRow["Replacement_date"] = "-";
                                newRow["Replacement_by"] = "-";
                                newRow["Replaced_plant"] = "-";
                                for (int tec = 0; tec < 5; tec++)
                                {
                                    newRow["Techdate" + tec] = "-";
                                    newRow["Techby" + tec] = "-";
                                    newRow["Techremark" + tec] = "-";
                                }

                                newRow["Complaint_For"] = "-";
                                newRow["Complaint_date"] = "-";
                                newRow["Resolve_by"] = "-";
                                newRow["Feedback_by_Customer"] = "-";
                                newRow["Feedback_by_service"] = "-";
                            }

                        }
                        dataTable.Rows.Add(newRow);
                    }

                }
                else
                {

                }
                if (dataTable.Rows.Count > 0)
                {

                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    // htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.No</th>");
                    htmlTable.Append("<th>Invoice</th>");
                    htmlTable.Append("<th>Delivery Month</th>");
                    htmlTable.Append("<th>Sales Person</th>");
                    htmlTable.Append("<th>Customer</th>");
                    htmlTable.Append("<th>Tahsil</th>");
                    htmlTable.Append("<th>District</th>");
                    htmlTable.Append("<th>Customer Address</th>");
                    htmlTable.Append("<th>Shipping Address</th>");
                    htmlTable.Append("<th>Product Name</th>");
                    htmlTable.Append("<th>Quantity</th>");
                    htmlTable.Append("<th>Amount</th>");
                    htmlTable.Append("<th>Current Status</th>");
                    htmlTable.Append("<th>Plantation date</th>");
                    htmlTable.Append("<th>Plantation by</th>");
                    htmlTable.Append("<th>Counting date</th>");
                    htmlTable.Append("<th>Counting by</th>");
                    //htmlTable.Append("<th>Good uint</th>");
                    htmlTable.Append("<th>Damage unit</th>");
                    htmlTable.Append("<th>Reason of Damange</th>");
                    htmlTable.Append("<th>Replacement date</th>");
                    htmlTable.Append("<th>Replacement by</th>");
                    htmlTable.Append("<th>Replaced plant unit</th>");
                    for (int tec = 1; tec < 6; tec++)
                    {
                        htmlTable.Append("<th>Technical service date " + tec + "</th>");
                        htmlTable.Append("<th>Technical service by " + tec + "</th>");
                        htmlTable.Append("<th>Technical service remark " + tec + "</th>");
                    }
                    htmlTable.Append("<th>Complaint For</th>");
                    htmlTable.Append("<th>Complaint date</th>");
                    htmlTable.Append("<th>Resolve by</th>");
                    htmlTable.Append("<th>Feedback by Customer</th>");
                    htmlTable.Append("<th>Feedback by service</th>");

                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("</tbody>");
                    for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                    {
                        htmlTable.Append("<tr>");

                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Invoice"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Delivery_Month"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Sales_Person"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Tahsil"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["District"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Customer_Address"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Shipping_Address"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Product_Name"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Quantity"] + "</td>");
                        //htmlTable.Append("<td>" + dataTable.Rows[datai]["Amount"] + "</td>");
                        htmlTable.Append("<td>" + ((decimal)dataTable.Rows[datai]["Amount"]).ToString("0.00") + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Current_Status"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Plantation_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Plantation_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Counting_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Counting_by"] + "</td>");
                        // htmlTable.Append("<td>" + dataTable.Rows[datai]["Good_uint"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Damageunit"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Reason_of_Damange"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replacement_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replacement_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Replaced_plant"] + "</td>");
                        for (int tec = 0; tec < 5; tec++)
                        {
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techdate" + tec] + " </td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techby" + tec] + " </td>");
                            htmlTable.Append("<td>" + dataTable.Rows[datai]["Techremark" + tec] + " </td>");
                        }
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Complaint_For"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Complaint_date"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Resolve_by"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Feedback_by_Customer"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Feedback_by_service"] + "</td>");



                        htmlTable.Append("</tr>");



                    }
                    htmlTable.Append("</tbody>");

                    htmlTable.Append("</table>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }





                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }


        /// <Reports Customer Sales Record Close>
        /// 
         //CHR

        /// <Reports Customer Sales Record Open>
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult ManagerReport()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }

        public JsonResult GetManagerReport(int Month, int Year, string Reportfor, string Uniqueid, string Start_date, string End_date)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();

            try
            {
                int srno = 0;
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Month", typeof(string));
                dataTable.Columns.Add("S.No", typeof(string));
                dataTable.Columns.Add("Name", typeof(string));
                dataTable.Columns.Add("Designation", typeof(string));
                dataTable.Columns.Add("Dknoks", typeof(string));
                dataTable.Columns.Add("BSA", typeof(string));
                dataTable.Columns.Add("Demo", typeof(string));
                dataTable.Columns.Add("Order", typeof(string));
                dataTable.Columns.Add("Documentation", typeof(string));

                
                string empquery = " SELECT * from [tbl_registration] where Employee_Type='Suser' and designation_order!=7 and Status='Approved' order by designation_order asc";
                DataTable empdt = db.GetAllRecord(empquery);
                if (empdt.Rows.Count > 0)
                {
                    for (int empi = 0; empi < empdt.Rows.Count; empi++)
                    {
                        srno++;
                        DataRow newRow = dataTable.NewRow();
                        newRow["Month"] = CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + "-" + Year;
                        newRow["S.No"] = srno;
                        newRow["Name"] = empdt.Rows[empi]["Name"]+"";
                        newRow["Designation"] = empdt.Rows[empi]["Designation"] + "";

                        string dksquery = "select * from tbl_leadnew where Support='Yes' and Supportempid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='DKS' and Support_reqstatus='Accepted' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        string bsaquery = "select * from tbl_leadnew where Support='Yes' and Supportempid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='BSA' and Support_reqstatus='Accepted'  and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        string demoquery = "select * from tbl_leadnew where Support='Yes' and Supportempid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Demo' and Support_reqstatus='Accepted' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        string orderquery = "select * from tbl_leadnew where Support='Yes' and Supportempid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Order' and Support_reqstatus='Accepted' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        string documentquery = "select * from tbl_leadnew where Support='Yes' and Supportempid='" + empdt.Rows[empi]["Employee_id"] + "' and Lead_status_for='Documentation' and Support_reqstatus='Accepted' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        DataTable dksdt = db.GetAllRecord(dksquery);
                        DataTable bsadt = db.GetAllRecord(bsaquery);
                        DataTable demodt = db.GetAllRecord(demoquery);
                        DataTable orderdt = db.GetAllRecord(orderquery);
                        DataTable documentdt = db.GetAllRecord(documentquery);

                        newRow["Dknoks"] = dksdt.Rows.Count;
                        newRow["BSA"] = bsadt.Rows.Count;
                        newRow["Demo"] = demodt.Rows.Count;
                        newRow["Order"] = orderdt.Rows.Count;
                        newRow["Documentation"] = documentdt.Rows.Count;
                        dataTable.Rows.Add(newRow);
                    }

                }
                else
                {

                }
                if (dataTable.Rows.Count > 0)
                {

                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Month</th>");
                    htmlTable.Append("<th>S.No</th>");
                    htmlTable.Append("<th>Name</th>");
                    htmlTable.Append("<th>Designation</th>");
                    htmlTable.Append("<th>Dknoks</th>");
                    htmlTable.Append("<th>BSA</th>");
                    htmlTable.Append("<th>Demo</th>");
                    htmlTable.Append("<th>Order</th>");
                    htmlTable.Append("<th>Documentation</th>");

                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");
                    htmlTable.Append("</tbody>");
                    for (int datai = 0; datai < dataTable.Rows.Count; datai++)
                    {
                        htmlTable.Append("<tr>");

                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Month"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["S.No"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Name"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Designation"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Dknoks"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["BSA"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Demo"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Order"] + "</td>");
                        htmlTable.Append("<td>" + dataTable.Rows[datai]["Documentation"] + "</td>");
                        htmlTable.Append("</tr>");

                    }
                    htmlTable.Append("</tbody>");

                    htmlTable.Append("<tfoot>");
                    htmlTable.Append("<tr class='fw-bold fs-6'>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td> Total :</td>");
                    htmlTable.Append("<td></td>");
                    htmlTable.Append("<td>"+ dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Dknoks"])) + "</td>");
                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["BSA"])) + "</td>");
                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Demo"])) + "</td>");
                    htmlTable.Append("<td>" + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Order"])) + "</td>");
                    htmlTable.Append("<td> " + dataTable.AsEnumerable().Sum(row => Convert.ToDouble(row["Documentation"])) + "</td>");
                    htmlTable.Append("</tr>");

                    htmlTable.Append("</tfoot>");


                    htmlTable.Append("</table>");
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", ""), errorName.Replace("'", ""), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(htmlTable.ToString(), JsonRequestBehavior.AllowGet);

        }


        /// <Reports Customer Sales Record Close>


        ///<Customer Data> 
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Customer()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Customer(FormCollection form)
        {
            string suid = Session["suid"] + "";
            string suname = Session["suname"] + "";
            try
            {
                if (form["hid"] != "" && form["hid"] != null)
                {
                    string address = form["address"] + "," + form["tahsil"] + "," + form["block"] + "," + form["Cityname"] + "," + form["Statename"] + "," + form["pincode"];

                    string upcquery = "update tbl_customer set Name='" + form["name"] + "',Full_address='" + address + "',Address='" + form["address"] + "',State='" + form["Statename"] + "',City='" + form["Cityname"] + "',Postal_code='" + form["pincode"] + "',Tahsil='" + form["tahsil"] + "',Block='" + form["block"] + "' where Id='"+ form ["hid"]+ "'";

                    string uplquery = "update tbl_login set Username='" + form["name"] + "' where Userid='"+ form["customerid"] + "'";

                    if (db.InsertUpdateDelete(upcquery))
                    {
                        db.InsertUpdateDelete(uplquery);
                        activitylog.Activitylogins("tbl_customer", form["hid"], upcquery, "Success", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Updated";
                    }
                    else
                    {
                        activitylog.Activitylogins("tbl_customer", form["hid"], upcquery, "Failed", "Update Success", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                        ViewBag.msg = "Data Update Error";
                    }
                }
                else
                {
                    
                }

            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                ViewBag.msg = "Error";
            }
            finally
            {
                db.connectionstate();
            }
            return View();
        }

        public JsonResult GetCustomerAlldata(int Startdate, int Enddate, int Month, int Year, string Reportfor, string Uniqueid)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            DataTable newDataTable = null;
            try
            {
                if (Reportfor == "CPS")
                {
                    columnname = "Companyid";
                }
                else if (Reportfor == "ZPS")
                {
                    columnname = "Zoneid";
                }
                else if (Reportfor == "RPS")
                {
                    columnname = "Regionid";
                }
                else if (Reportfor == "DPS")
                {
                    columnname = "Divisionid";
                }
                else if (Reportfor == "BPS")
                {
                    columnname = "Branchid";
                }
                else if (Reportfor == "TPS")
                {
                    columnname = "Teamid";
                }
                else if (Reportfor == "GPS")
                {
                    columnname = "Groupid";
                }
                else
                {
                    columnname = "Groupid";
                }
                //string query = "Select Distinct Groupid,Groups,Status from tbl_group where Status='Active'";
                string query = "  Select Distinct Employee_id,Employee_name,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "'";
                if (Uniqueid != null && Uniqueid != "")
                {
                    query = "Select Distinct Employee_id,Employee_name,Status from tbl_group where Status='Active'  and Month_Year='" + Month + "-" + Year + "' and (";
                    string[] empArray = Uniqueid.Split(',');
                    foreach (string id in empArray)
                    {
                        query += " " + columnname + "='" + id + "' or";
                    }
                    query = query.Substring(0, query.Length - 3);
                    query += ")";
                }
                query += " group by Employee_id,Employee_name,Status";
                activitylog.Activitylogins("tbl_group", "", query, "Failed", "", Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                DataTable dt = db.GetAllRecord(query);
                activitylog.Activitylogupd("Success", "");
                if (dt.Rows.Count > 0)
                {
                    htmlTable.Insert(0, "<table class='display nowrap table table-responsive' id='tblattendance'>");
                    htmlTable.Append("<thead>");
                    htmlTable.Append("<tr class='theadb text-center'>");
                    htmlTable.Append("<th>Id</th>");
                    htmlTable.Append("<th>Name</th>");
                    htmlTable.Append("<th>Contact</th>");
                    htmlTable.Append("<th>Address</th>");
                    htmlTable.Append("<th>Registration Type</th>");
                    htmlTable.Append("<th>Lead by</th>");
                    htmlTable.Append("<th>Status</th>");
                    htmlTable.Append("<th>Edit</th>");
                    htmlTable.Append("</tr>");
                    htmlTable.Append("</thead>");

                    htmlTable.Append("<tbody>");
                    int count = 0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string cusquery = "SELECT * from tbl_customer where Log_ID='" + dt.Rows[i]["Employee_id"] + "' and MONTH(Datetime)='" + Month + "' And YEAR(Datetime)='" + Year + "'";
                        DataTable cusdt = db.GetAllRecord(cusquery);
                        if (newDataTable==null) // Check if newDataTable is empty and clone the structure if needed
                        {
                            newDataTable = cusdt.Clone();
                        }
                        foreach (DataRow row in cusdt.Rows)
                        {
                            newDataTable.ImportRow(row);
                        }
                        if (cusdt.Rows.Count > 0)
                        {
                            for (int ci = 0; ci < cusdt.Rows.Count; ci++)
                            {
                                count++;
                                htmlTable.Append("<tr>");
                                htmlTable.Append("<td>" + count + "</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["Name"] + "</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["Mobile"] + "</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["Full_address"] + "</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["RegistrationType"] + "</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["Log_name"] + " ("+ cusdt.Rows[ci]["Groupname"] + ")</td>");
                                htmlTable.Append("<td>" + cusdt.Rows[ci]["Status"] + "</td>");
                                htmlTable.Append("<td><button class='btn btncolorblue' onclick='Getid("+ cusdt.Rows[ci]["id"] + ")' data-bs-toggle='modal' data-bs-target='#Designation'><i class='fa fa-edit'></i></button></td>");
                                htmlTable.Append("</tr>");
                            }

                        }

                    }
                    htmlTable.Append("</tbody>");
                    htmlTable.Append("</table>");
                    
                }
                else
                {
                    htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
                }

                //DataTable dt = db.GetAllRecord(squery);
                json = JsonConvert.SerializeObject(newDataTable, Formatting.None);
                //return View();
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult CustomerReceipt()
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {

            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult GetReceipt(string searchby)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Sno", typeof(string));
            dataTable.Columns.Add("Name", typeof(string));
            dataTable.Columns.Add("customerid", typeof(string));
            dataTable.Columns.Add("Contact", typeof(string));
            dataTable.Columns.Add("Address", typeof(string));
            dataTable.Columns.Add("Order_id", typeof(string));
            dataTable.Columns.Add("Receipt", typeof(string));
            dataTable.Columns.Add("Receipt_type", typeof(string));
            dataTable.Columns.Add("table", typeof(string));
            dataTable.Columns.Add("rowid", typeof(string));
            dataTable.Columns.Add("columnname", typeof(string));
            try
            {
                string query= "select * from tbl_order_summary where (Customer_name Like '%"+ searchby + "%' or Customer_mobile='" + searchby + "' or Order_id='"+searchby+ "') and Advancepdf is not null";
                DataTable dt = db.GetAllRecord(query);
                if(dt.Rows.Count>0)
                {
                    int sr = 0;
                    for(int i = 0; i < dt.Rows.Count; i++)
                    {
                        sr++;
                        DataRow newRow = dataTable.NewRow();
                        newRow["Sno"] = sr;
                        newRow["Name"] = dt.Rows[i]["Customer_name"] + "";
                        newRow["customerid"] = dt.Rows[i]["Customer_id"] + "";
                        newRow["Contact"] = dt.Rows[i]["Customer_mobile"] + "";
                        newRow["Address"] = dt.Rows[i]["Customer_address"] + "";
                        newRow["Order_id"] = dt.Rows[i]["Order_id"] + "";
                        newRow["Receipt"] = dt.Rows[i]["Advancepdf"] + "";
                        newRow["Receipt_type"] = "Advance Payment Receipt";
                        newRow["table"] = "tbl_order_summary";
                        newRow["rowid"] = dt.Rows[i]["Id"] + "";
                        newRow["columnname"] = "Advancepdf";
                        dataTable.Rows.Add(newRow);
                        string squery = "select * from tbl_order where Order_id='" + dt.Rows[i]["Order_id"] + "' and Status='Active' and Order_status not in('Cancelled') and Invoicepdf is not null";
                        DataTable sdt = db.GetAllRecord(squery);
                        if (sdt.Rows.Count > 0)
                        {
                            for (int si = 0; si < sdt.Rows.Count; si++)
                            {
                                sr++;
                                DataRow newRow1 = dataTable.NewRow();
                                newRow1["Sno"] = sr;
                                newRow1["Name"] = sdt.Rows[si]["Customer_name"] + "";
                                newRow1["customerid"] = sdt.Rows[si]["Customer_id"] + "";
                                newRow1["Contact"] = sdt.Rows[si]["Customer_mobile"] + "";
                                newRow1["Address"] = sdt.Rows[si]["Customer_address"] + "";
                                newRow1["Order_id"] = sdt.Rows[si]["Order_id"] + "";
                                newRow1["Receipt"] = sdt.Rows[si]["Invoicepdf"] + "";
                                newRow1["Receipt_type"] = "Product Delivery Receipt";
                                newRow1["table"] = "tbl_order";
                                newRow1["rowid"] = sdt.Rows[si]["Id"] + "";
                                newRow1["columnname"] = "Invoicepdf";
                                dataTable.Rows.Add(newRow1);
                            }
                        }


                        string squery1 = "select * from tbl_order_summary where Order_id='" + dt.Rows[i]["Order_id"] + "' and Payment_status='No Due' and Invoice_pdf is not null";
                        DataTable sdt1 = db.GetAllRecord(squery1);
                        if (sdt1.Rows.Count > 0)
                        {
                            for (int si1 = 0; si1 < sdt1.Rows.Count; si1++)
                            {
                                sr++;
                                DataRow newRow11 = dataTable.NewRow();
                                newRow11["Sno"] = sr;
                                newRow11["Name"] = sdt1.Rows[si1]["Customer_name"] + "";
                                newRow11["customerid"] = sdt1.Rows[si1]["Customer_id"] + "";
                                newRow11["Contact"] = sdt1.Rows[si1]["Customer_mobile"] + "";
                                newRow11["Address"] = sdt1.Rows[si1]["Customer_address"] + "";
                                newRow11["Order_id"] = sdt1.Rows[si1]["Order_id"] + "";
                                newRow11["Receipt"] = sdt1.Rows[si1]["Invoice_pdf"] + "";
                                newRow11["Receipt_type"] = "Invoice or Bill of Supply Payment Receipt";
                                newRow11["table"] = "tbl_order";
                                newRow11["rowid"] = sdt1.Rows[si1]["Id"] + "";
                                newRow11["columnname"] = "Invoice_pdf";
                                dataTable.Rows.Add(newRow11);
                            }
                        }
                    }
                }


                json = JsonConvert.SerializeObject(dataTable, Formatting.None);
                
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }
        [OutputCache(CacheProfile = "NoCache")]
        public ActionResult Regenerate(string rt,string t,string i,string c)
        {
            string id = Session["suid"] + "";
            if (id != null && id != "")
            {
                ViewBag.rt = rt;
                ViewBag.t = t;
                ViewBag.i = i;
                ViewBag.c = c;
            }
            else
            {
                Response.Redirect("/Home/Login");
            }
            return View();
        }
        public JsonResult SendReceipt(string Contact,string Recpth,string Name,string Rectype)
        {
            string json = "";
            string Empid = "";
            string columnname = "";
            StringBuilder htmlTable = new StringBuilder();
            try
            {
                string[] replacementValues = { Name, Rectype, URL.ApiURL() + "" + Recpth };
                Messaging.SendWhatsappSMSNew1(Contact, "share_receipt", Name, Session["suid"]+"", Session["suname"] + "", "", URL.ApiURL() + "" + Recpth, Rectype, replacementValues, true);
                //Messaging.SendWhatsappSMSNew1(Contact, URL.ApiURL() + "" + Recpth, Rectype, Rectype, "", Name, Session["suid"]+"", Session["suname"]+"", "");
            }
            catch (Exception ex)
            {
                try
                {
                    Error_15_16 error_15_16 = new Error_15_16();
                    string pageUrl = "", moduleName = "", errorLine = "", errorMessage = "", errorName = "", errorTrace = "";
                    // Get the page URL, if available
                    pageUrl = System.Web.HttpContext.Current.Request.Url.AbsoluteUri;
                    // Get the module name
                    moduleName = ex.TargetSite.Module.Name;
                    // Get the error line number, if available
                    var stackTrace = ex.StackTrace;
                    if (!string.IsNullOrEmpty(stackTrace))
                    {
                        var lineNumberIndex = stackTrace.LastIndexOf(":line ");
                        if (lineNumberIndex >= 0)
                        {
                            var lineNumber = stackTrace.Substring(lineNumberIndex + 6);
                            var newLineIndex = lineNumber.IndexOf(Environment.NewLine);
                            if (newLineIndex >= 0)
                            {
                                errorLine = lineNumber.Substring(0, newLineIndex);
                            }
                            else
                            {
                                errorLine = lineNumber;
                            }
                        }
                    }
                    // Get the error message and name
                    if (ex.Message.ToString().Length >= 1000)
                    {
                        errorMessage = ex.Message.Substring(1, 500);
                    }
                    else
                    {
                        errorMessage = ex.Message;
                    }
                    errorName = ex.GetType().FullName;
                    // Get the error trace
                    errorTrace = ex.StackTrace;
                    error_15_16.Error_15_16ins(pageUrl, moduleName, errorLine, errorMessage.Replace("'", "`"), errorName.Replace("'", "`"), errorTrace.Replace("'", "`"), Session["suid"].ToString(), Session["suname"].ToString(), Session["smail"].ToString());
                }

                catch
                {

                }
                htmlTable.Append("<div class='row justify-content-center d-flex m-5' id='datanotdound'><img src='/Content/Img/nodata1.png' class='w-50 h-50 align-items-center'/></div>");
            }
            finally
            {
                db.connectionstate();
            }

            return Json(json, JsonRequestBehavior.AllowGet);

        }

    }
}